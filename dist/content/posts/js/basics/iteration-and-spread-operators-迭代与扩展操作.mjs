import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/basics/iteration-and-spread-operators-迭代与扩展操作.md",collection="posts",slug="js/basics/iteration-and-spread-operators-迭代与扩展操作",body="\n# Iteration and Spread Operators 迭代与扩展操作\n\n## ECMAScript 6 新增的迭代器和扩展操作符对集合引用类型特别有用\n\n- [Iterator-迭代器](iterator-迭代器)\n- [Collect and Spread Function Arguments-收集与扩展参数](collect-or-rest-and-spread-function-arguments-收集,-剩余与扩展参数)\n\n## 让集合类型之间 相互操作、复制和修改变得异常方便\n\n## 4 种原生集合类型定义了默认迭代器\n\n- Array\n- 所有定型数组\n- Map\n- Set\n\n## 都支持顺序迭代，都可以传入 for-of 循环\n\n## 都兼容扩展操作符\n\n- 扩展操作符在对可迭代对象执行 [Copy-深浅拷贝](copy-深浅拷贝)——浅拷贝 时特别有用， 只需简单的语法就可以复制整个对象\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561776097.png)\n\n## 只要传入一个可迭代对象就可以实现复制\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561810813.png)\n\n## 也可以构建数组的部分元素\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561816320.png)\n\n## 浅复制意味着只会复制对象引用\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561917304.png)\n\n## 都支持多种构建方法，比如 `Array.of()`和 `Array.from()`静态方法。在与扩展操 作符一起使用时，可以非常方便地实现互操作\n\n## 把数组复制到定型数组\n\n```js\nlet typedArr1 = Int16Array.of(...arr1);\nlet typedArr2 = Int16Array.from(arr1);\nconsole.log(typedArr1); // Int16Array [1, 2, 3]\nconsole.log(typedArr2); // Int16Array [1, 2, 3]\n```\n\n## 把数组复制到映射\n\n```js\nlet map = new Map(arr1.map((x) => [x, val + x]));\nconsole.log(map); // Map {1 => 'val 1', 2 => 'val 2', 3 => 'val 3'}\n```\n\n## 把数组复制到集合\n\n```js\nlet set = new Set(typedArr2);\nconsole.log(set); // Set {1, 2, 3}\n```\n\n## 把集合复制回数组\n\n```js\nlet arr2 = [...set];\nconsole.log(arr2); // [1, 2, 3]\n```\n",data={title:"Iteration and Spread Operators 迭代与扩展操作",DateStarted:new Date(16915392e5),draft:!1,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/iteration-and-spread-operators-迭代与扩展操作.md",rawData:void 0},html='<h1 id="iteration-and-spread-operators-迭代与扩展操作">Iteration and Spread Operators 迭代与扩展操作<a class="anchor" href="#iteration-and-spread-operators-迭代与扩展操作"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="ecmascript-6-新增的迭代器和扩展操作符对集合引用类型特别有用">ECMAScript 6 新增的迭代器和扩展操作符对集合引用类型特别有用<a class="anchor" href="#ecmascript-6-新增的迭代器和扩展操作符对集合引用类型特别有用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="iterator-%E8%BF%AD%E4%BB%A3%E5%99%A8">Iterator-迭代器</a></li>\n<li><a href="collect-or-rest-and-spread-function-arguments-%E6%94%B6%E9%9B%86,-%E5%89%A9%E4%BD%99%E4%B8%8E%E6%89%A9%E5%B1%95%E5%8F%82%E6%95%B0">Collect and Spread Function Arguments-收集与扩展参数</a></li>\n</ul>\n<h2 id="让集合类型之间-相互操作复制和修改变得异常方便">让集合类型之间 相互操作、复制和修改变得异常方便<a class="anchor" href="#让集合类型之间-相互操作复制和修改变得异常方便"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="4-种原生集合类型定义了默认迭代器">4 种原生集合类型定义了默认迭代器<a class="anchor" href="#4-种原生集合类型定义了默认迭代器"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Array</li>\n<li>所有定型数组</li>\n<li>Map</li>\n<li>Set</li>\n</ul>\n<h2 id="都支持顺序迭代都可以传入-for-of-循环">都支持顺序迭代，都可以传入 for-of 循环<a class="anchor" href="#都支持顺序迭代都可以传入-for-of-循环"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="都兼容扩展操作符">都兼容扩展操作符<a class="anchor" href="#都兼容扩展操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>扩展操作符在对可迭代对象执行 <a href="copy-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D">Copy-深浅拷贝</a>——浅拷贝 时特别有用， 只需简单的语法就可以复制整个对象</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561776097.png" alt=""></li>\n</ul>\n<h2 id="只要传入一个可迭代对象就可以实现复制">只要传入一个可迭代对象就可以实现复制<a class="anchor" href="#只要传入一个可迭代对象就可以实现复制"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561810813.png" alt=""></li>\n</ul>\n<h2 id="也可以构建数组的部分元素">也可以构建数组的部分元素<a class="anchor" href="#也可以构建数组的部分元素"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561816320.png" alt=""></li>\n</ul>\n<h2 id="浅复制意味着只会复制对象引用">浅复制意味着只会复制对象引用<a class="anchor" href="#浅复制意味着只会复制对象引用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561917304.png" alt=""></li>\n</ul>\n<h2 id="都支持多种构建方法比如-arrayof和-arrayfrom静态方法在与扩展操-作符一起使用时可以非常方便地实现互操作">都支持多种构建方法，比如 <code>Array.of()</code>和 <code>Array.from()</code>静态方法。在与扩展操 作符一起使用时，可以非常方便地实现互操作<a class="anchor" href="#都支持多种构建方法比如-arrayof和-arrayfrom静态方法在与扩展操-作符一起使用时可以非常方便地实现互操作"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="把数组复制到定型数组">把数组复制到定型数组<a class="anchor" href="#把数组复制到定型数组"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> typedArr1 </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Int16Array.</span><span style="color:#B392F0">of</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr1);</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> typedArr2 </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Int16Array.</span><span style="color:#B392F0">from</span><span style="color:#E1E4E8">(arr1);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(typedArr1); </span><span style="color:#6A737D">// Int16Array [1, 2, 3]</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(typedArr2); </span><span style="color:#6A737D">// Int16Array [1, 2, 3]</span></span>\n<span class="line"></span></code></pre>\n<h2 id="把数组复制到映射">把数组复制到映射<a class="anchor" href="#把数组复制到映射"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> map </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Map</span><span style="color:#E1E4E8">(arr1.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">x</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> [x, val </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> x]));</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(map); </span><span style="color:#6A737D">// Map {1 => \'val 1\', 2 => \'val 2\', 3 => \'val 3\'}</span></span>\n<span class="line"></span></code></pre>\n<h2 id="把数组复制到集合">把数组复制到集合<a class="anchor" href="#把数组复制到集合"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> set </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Set</span><span style="color:#E1E4E8">(typedArr2);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(set); </span><span style="color:#6A737D">// Set {1, 2, 3}</span></span>\n<span class="line"></span></code></pre>\n<h2 id="把集合复制回数组">把集合复制回数组<a class="anchor" href="#把集合复制回数组"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> arr2 </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">set];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr2); </span><span style="color:#6A737D">// [1, 2, 3]</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,title:"Iteration and Spread Operators 迭代与扩展操作",tags:["JavaScript"],topic:["Objects","Basics"],type:"D",DateStarted:"2023-08-09T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-04-17T00:00:00.000Z",reviewed:1,status:["Distilling"],difficulty:null,comment:null,aliases:["Iteration and Spread Operators 迭代与扩展操作"],"linter-yaml-title-alias":"Iteration and Spread Operators 迭代与扩展操作",category:"Programming",minutes:2,words:350},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/iteration-and-spread-operators-迭代与扩展操作.md",url=void 0;function rawContent(){return"\n# Iteration and Spread Operators 迭代与扩展操作\n\n## ECMAScript 6 新增的迭代器和扩展操作符对集合引用类型特别有用\n\n- [Iterator-迭代器](iterator-迭代器)\n- [Collect and Spread Function Arguments-收集与扩展参数](collect-or-rest-and-spread-function-arguments-收集,-剩余与扩展参数)\n\n## 让集合类型之间 相互操作、复制和修改变得异常方便\n\n## 4 种原生集合类型定义了默认迭代器\n\n- Array\n- 所有定型数组\n- Map\n- Set\n\n## 都支持顺序迭代，都可以传入 for-of 循环\n\n## 都兼容扩展操作符\n\n- 扩展操作符在对可迭代对象执行 [Copy-深浅拷贝](copy-深浅拷贝)——浅拷贝 时特别有用， 只需简单的语法就可以复制整个对象\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561776097.png)\n\n## 只要传入一个可迭代对象就可以实现复制\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561810813.png)\n\n## 也可以构建数组的部分元素\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561816320.png)\n\n## 浅复制意味着只会复制对象引用\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691561917304.png)\n\n## 都支持多种构建方法，比如 `Array.of()`和 `Array.from()`静态方法。在与扩展操 作符一起使用时，可以非常方便地实现互操作\n\n## 把数组复制到定型数组\n\n```js\nlet typedArr1 = Int16Array.of(...arr1);\nlet typedArr2 = Int16Array.from(arr1);\nconsole.log(typedArr1); // Int16Array [1, 2, 3]\nconsole.log(typedArr2); // Int16Array [1, 2, 3]\n```\n\n## 把数组复制到映射\n\n```js\nlet map = new Map(arr1.map((x) => [x, val + x]));\nconsole.log(map); // Map {1 => 'val 1', 2 => 'val 2', 3 => 'val 3'}\n```\n\n## 把数组复制到集合\n\n```js\nlet set = new Set(typedArr2);\nconsole.log(set); // Set {1, 2, 3}\n```\n\n## 把集合复制回数组\n\n```js\nlet arr2 = [...set];\nconsole.log(arr2); // [1, 2, 3]\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"iteration-and-spread-operators-迭代与扩展操作",text:"Iteration and Spread Operators 迭代与扩展操作#"},{depth:2,slug:"ecmascript-6-新增的迭代器和扩展操作符对集合引用类型特别有用",text:"ECMAScript 6 新增的迭代器和扩展操作符对集合引用类型特别有用#"},{depth:2,slug:"让集合类型之间-相互操作复制和修改变得异常方便",text:"让集合类型之间 相互操作、复制和修改变得异常方便#"},{depth:2,slug:"4-种原生集合类型定义了默认迭代器",text:"4 种原生集合类型定义了默认迭代器#"},{depth:2,slug:"都支持顺序迭代都可以传入-for-of-循环",text:"都支持顺序迭代，都可以传入 for-of 循环#"},{depth:2,slug:"都兼容扩展操作符",text:"都兼容扩展操作符#"},{depth:2,slug:"只要传入一个可迭代对象就可以实现复制",text:"只要传入一个可迭代对象就可以实现复制#"},{depth:2,slug:"也可以构建数组的部分元素",text:"也可以构建数组的部分元素#"},{depth:2,slug:"浅复制意味着只会复制对象引用",text:"浅复制意味着只会复制对象引用#"},{depth:2,slug:"都支持多种构建方法比如-arrayof和-arrayfrom静态方法在与扩展操-作符一起使用时可以非常方便地实现互操作",text:"都支持多种构建方法，比如 Array.of()和 Array.from()静态方法。在与扩展操 作符一起使用时，可以非常方便地实现互操作#"},{depth:2,slug:"把数组复制到定型数组",text:"把数组复制到定型数组#"},{depth:2,slug:"把数组复制到映射",text:"把数组复制到映射#"},{depth:2,slug:"把数组复制到集合",text:"把数组复制到集合#"},{depth:2,slug:"把集合复制回数组",text:"把集合复制回数组#"}]}const Content=createComponent(((n,a,e)=>{const{layout:r,...s}=frontmatter;return s.file=file,s.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),iterationAndSpreadOperators________=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,iterationAndSpreadOperators________,slug};