import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/basics/statements-语句.md",collection="posts",slug="js/basics/statements-语句",body="\n# Statements-语句\n\n## Multiple statements can be combined into a code block\n\nalso called flow-control statements\n\n## Conditionals\n\n- The if Statement\n  - It’s considered best coding practice to always use block statements\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529359572image.png)\n- The switch Statement\n  - The switch statement compares values using the identically equal operator, so no type coercion occurs\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529292548image.png)\n- Tenary Operation/ Conditional Operators\n\n```js\nactivePlayer = activePlayer === 1 ? 2 : 1;\n```\n\n## [loops-循环语句](loops-循环语句)\n\n## Labeled Statements\n\n- can be referenced later by using the break or continue statement.\n- are typically used with nested loops\n\n```js\nlet num = 0;\noutermost: for (let i = 0; i < 10; i++) {\n\tfor (let j = 0; j < 10; j++) {\n\t\tif (i == 5 && j == 5) {\n\t\t\tcontinue outermost;\n\t\t}\n\t\tnum++;\n\t}\n}\nconsole.log(num); // 95\n```\n\n## The break and continue Statements\n\n- break\n- exits the loop immediately, forcing execution to continue with the next statement after the loop\n- continue\n- exits the loop immediately, but execution continues from the top of the loop\n\n## The with Statement\n\n- sets the scope of the code within a particular object\n- was created as a convenience for times when a single object was being coded to over and over again\n- In strict mode, the with statement is not allowed and is considered a syntax error.\n- It is widely considered a poor practice to use the with statement in production code\n",data={title:"Statements-语句",DateStarted:new Date(16892064e5),draft:!1,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/statements-语句.md",rawData:void 0},html='<h1 id="statements-语句">Statements-语句<a class="anchor" href="#statements-语句"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="multiple-statements-can-be-combined-into-a-code-block">Multiple statements can be combined into a code block<a class="anchor" href="#multiple-statements-can-be-combined-into-a-code-block"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>also called flow-control statements</p>\n<h2 id="conditionals">Conditionals<a class="anchor" href="#conditionals"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>The if Statement\n<ul>\n<li>It’s considered best coding practice to always use block statements</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529359572image.png" alt=""></li>\n</ul>\n</li>\n<li>The switch Statement\n<ul>\n<li>The switch statement compares values using the identically equal operator, so no type coercion occurs</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529292548image.png" alt=""></li>\n</ul>\n</li>\n<li>Tenary Operation/ Conditional Operators</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">activePlayer </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> activePlayer </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> ?</span><span style="color:#79B8FF"> 2</span><span style="color:#F97583"> :</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"></span></code></pre>\n<h2 id="loops-循环语句"><a href="loops-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5">loops-循环语句</a><a class="anchor" href="#loops-循环语句"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="labeled-statements">Labeled Statements<a class="anchor" href="#labeled-statements"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>can be referenced later by using the break or continue statement.</li>\n<li>are typically used with nested loops</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> num </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">outermost</span><span style="color:#E1E4E8">: </span><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; j </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">; j</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> 5</span><span style="color:#F97583"> &#x26;&#x26;</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tcontinue</span><span style="color:#B392F0"> outermost</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tnum</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(num); </span><span style="color:#6A737D">// 95</span></span>\n<span class="line"></span></code></pre>\n<h2 id="the-break-and-continue-statements">The break and continue Statements<a class="anchor" href="#the-break-and-continue-statements"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>break</li>\n<li>exits the loop immediately, forcing execution to continue with the next statement after the loop</li>\n<li>continue</li>\n<li>exits the loop immediately, but execution continues from the top of the loop</li>\n</ul>\n<h2 id="the-with-statement">The with Statement<a class="anchor" href="#the-with-statement"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>sets the scope of the code within a particular object</li>\n<li>was created as a convenience for times when a single object was being coded to over and over again</li>\n<li>In strict mode, the with statement is not allowed and is considered a syntax error.</li>\n<li>It is widely considered a poor practice to use the with statement in production code</li>\n</ul>',frontmatter={draft:!1,title:"Statements-语句",tags:["JavaScript"],difficulty:null,comment:null,topic:["Basics"],type:"D",DateStarted:"2023-07-13T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-04-17T00:00:00.000Z",status:["Mature"],reviewed:2,"linter-yaml-title-alias":"Statements-语句",aliases:["Statements-语句"],category:"Programming",minutes:1,words:203},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/statements-语句.md",url=void 0;function rawContent(){return"\n# Statements-语句\n\n## Multiple statements can be combined into a code block\n\nalso called flow-control statements\n\n## Conditionals\n\n- The if Statement\n  - It’s considered best coding practice to always use block statements\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529359572image.png)\n- The switch Statement\n  - The switch statement compares values using the identically equal operator, so no type coercion occurs\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/paste-image-1690529292548image.png)\n- Tenary Operation/ Conditional Operators\n\n```js\nactivePlayer = activePlayer === 1 ? 2 : 1;\n```\n\n## [loops-循环语句](loops-循环语句)\n\n## Labeled Statements\n\n- can be referenced later by using the break or continue statement.\n- are typically used with nested loops\n\n```js\nlet num = 0;\noutermost: for (let i = 0; i < 10; i++) {\n\tfor (let j = 0; j < 10; j++) {\n\t\tif (i == 5 && j == 5) {\n\t\t\tcontinue outermost;\n\t\t}\n\t\tnum++;\n\t}\n}\nconsole.log(num); // 95\n```\n\n## The break and continue Statements\n\n- break\n- exits the loop immediately, forcing execution to continue with the next statement after the loop\n- continue\n- exits the loop immediately, but execution continues from the top of the loop\n\n## The with Statement\n\n- sets the scope of the code within a particular object\n- was created as a convenience for times when a single object was being coded to over and over again\n- In strict mode, the with statement is not allowed and is considered a syntax error.\n- It is widely considered a poor practice to use the with statement in production code\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"statements-语句",text:"Statements-语句#"},{depth:2,slug:"multiple-statements-can-be-combined-into-a-code-block",text:"Multiple statements can be combined into a code block#"},{depth:2,slug:"conditionals",text:"Conditionals#"},{depth:2,slug:"loops-循环语句",text:"loops-循环语句#"},{depth:2,slug:"labeled-statements",text:"Labeled Statements#"},{depth:2,slug:"the-break-and-continue-statements",text:"The break and continue Statements#"},{depth:2,slug:"the-with-statement",text:"The with Statement#"}]}const Content=createComponent(((e,n,t)=>{const{layout:s,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),statements___=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,statements___};