import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/function/callbacks-回调函数.md",collection="posts",slug="js/function/callbacks-回调函数",body="\n## Use of Callbacks\n\n#### 1. 回调函数（同步回调与异步回调？）\n\n> [带你聊聊 JavaScript 中的回调函数，区分下同步和异步回调-js 教程-PHP 中文网](https://www.php.cn/js-tutorial-486539.html))\n\n#### 2. Why Use Callbacks?\n\n> [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)  \n> [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\nWhen doing a complex task, we break that task down into smaller steps. To help us establish a relationship between these steps according to time (optional) and order, we use callbacks.\n\n#### 3. ✅ 异步回调方法？\n\n- Event Handler：将函数放入 EventListener (事件监听器) 中，事件处理器是异步回调函数的一种\n- Timer Function：将函数放入 setTimeout 等 Timer Function 中\n\n#### 4. ✅ 异步回调示例\n\n##### 4.1. Stock - BakcEnd\n\n```javascript\nlet stocks = {\n\tFruits: [strawberry, grapes, banana, apple],\n\tliquid: [water, ice],\n\tholder: [cone, cup, stick],\n\ttoppings: [chocolate, peanuts],\n};\n```\n\n##### 4.2. Kitchen - FrontEnd\n\n```javascript\n// 1st Function\nlet order = (fruit_name, call_production) => {\n\tsetTimeout(function () {\n\t\tconsole.log(`${stocks.Fruits[fruit_name]} was selected`);\n\t\t// Order placed. Call production to start\n\t\tcall_production();\n\t}, 2000);\n};\n// 2nd Function\nlet production = () => {\n\tsetTimeout(() => {\n\t\tconsole.log(production has DateStarted);\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(The fruit has been chopped);\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} Added`);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log(start the machine);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconsole.log(`Ice cream placed on ${stocks.holder[1]}`);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tconsole.log(`${stocks.toppings[0]} as toppings`);\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tconsole.log(serve Ice cream);\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t}, 2000);\n\t\t\t\t}, 1000);\n\t\t\t}, 1000);\n\t\t}, 2000);\n\t}, 0000);\n};\n// Trigger 👇\norder(0, production);\n```\n\n#### 5. 异步回调缺点？\n\n- Callback Hell\n- hard to handle errors:\n  - often you have to handle errors at each level of the pyramid, instead of having error handling only once at the top level\n\n#### 6. ⛔ 同步函数示例\n\n```js\nfunction doStep1(init) {\n\treturn init + 1;\n}\nfunction doStep2(init) {\n\treturn init + 2;\n}\nfunction doStep3(init) {\n\treturn init + 3;\n}\nfunction doOperation() {\n\tlet result = 0;\n\tresult = doStep1(result);\n\tresult = doStep2(result);\n\tresult = doStep3(result);\n\tconsole.log(`result: ${result}`);\n}\n\ndoOperation();\n```\n\n#### 7. ⛔ 同步回调函数示例\n\n```js\nfunction doStep1(init, callback) {\n\tconst result = init + 1;\n\tcallback(result);\n}\nfunction doStep2(init, callback) {\n\tconst result = init + 2;\n\tcallback(result);\n}\nfunction doStep3(init, callback) {\n\tconst result = init + 3;\n\tcallback(result);\n}\nfunction doOperation() {\n\tdoStep1(0, (result1) => {\n\t\tdoStep2(result1, (result2) => {\n\t\t\tdoStep3(result2, (result3) => {\n\t\t\t\tconsole.log(`result: ${result3}`);\n\t\t\t});\n\t\t});\n\t});\n}\ndoOperation();\n```\n",data={title:"callbacks-回调函数",DateStarted:new Date(1670544e6),draft:!0,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/function/callbacks-回调函数.md",rawData:void 0},html='<h2 id="use-of-callbacks">Use of Callbacks<a class="anchor" href="#use-of-callbacks"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="1-回调函数同步回调与异步回调">1. 回调函数（同步回调与异步回调？）<a class="anchor" href="#1-回调函数同步回调与异步回调"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p><a href="https://www.php.cn/js-tutorial-486539.html">带你聊聊 JavaScript 中的回调函数，区分下同步和异步回调-js 教程-PHP 中文网</a>)</p>\n</blockquote>\n<h4 id="2-why-use-callbacks">2. Why Use Callbacks?<a class="anchor" href="#2-why-use-callbacks"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p><a href="https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&#x26;vd_source=be278a4cfd00a5f72dcf153eaca79333">[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp</a><br>\n<a href="https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/">FreeCodeCamp-Blog</a></p>\n</blockquote>\n<p>When doing a complex task, we break that task down into smaller steps. To help us establish a relationship between these steps according to time (optional) and order, we use callbacks.</p>\n<h4 id="3--异步回调方法">3. ✅ 异步回调方法？<a class="anchor" href="#3--异步回调方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Event Handler：将函数放入 EventListener (事件监听器) 中，事件处理器是异步回调函数的一种</li>\n<li>Timer Function：将函数放入 setTimeout 等 Timer Function 中</li>\n</ul>\n<h4 id="4--异步回调示例">4. ✅ 异步回调示例<a class="anchor" href="#4--异步回调示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h5 id="41-stock---bakcend">4.1. Stock - BakcEnd<a class="anchor" href="#41-stock---bakcend"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> stocks </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tFruits: [strawberry, grapes, banana, apple],</span></span>\n<span class="line"><span style="color:#E1E4E8">\tliquid: [water, ice],</span></span>\n<span class="line"><span style="color:#E1E4E8">\tholder: [cone, cup, stick],</span></span>\n<span class="line"><span style="color:#E1E4E8">\ttoppings: [chocolate, peanuts],</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h5 id="42-kitchen---frontend">4.2. Kitchen - FrontEnd<a class="anchor" href="#42-kitchen---frontend"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// 1st Function</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#B392F0"> order</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">fruit_name</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">call_production</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">Fruits</span><span style="color:#9ECBFF">[</span><span style="color:#E1E4E8">fruit_name</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} was selected`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// Order placed. Call production to start</span></span>\n<span class="line"><span style="color:#B392F0">\t\tcall_production</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, </span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#6A737D">// 2nd Function</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#B392F0"> production</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(production has DateStarted);</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(The fruit has been chopped);</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} and ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} Added`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(start the machine);</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`Ice cream placed on ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">holder</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">toppings</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} as toppings`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\t\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(serve Ice cream);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t\t\t}, </span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t\t}, </span><span style="color:#79B8FF">3000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t\t}, </span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}, </span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, </span><span style="color:#79B8FF">0000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#6A737D">// Trigger 👇</span></span>\n<span class="line"><span style="color:#B392F0">order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">, production);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="5-异步回调缺点">5. 异步回调缺点？<a class="anchor" href="#5-异步回调缺点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Callback Hell</li>\n<li>hard to handle errors:\n<ul>\n<li>often you have to handle errors at each level of the pyramid, instead of having error handling only once at the top level</li>\n</ul>\n</li>\n</ul>\n<h4 id="6--同步函数示例">6. ⛔ 同步函数示例<a class="anchor" href="#6--同步函数示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep1</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep2</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep3</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 3</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doOperation</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> result </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\tresult </span><span style="color:#F97583">=</span><span style="color:#B392F0"> doStep1</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tresult </span><span style="color:#F97583">=</span><span style="color:#B392F0"> doStep2</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tresult </span><span style="color:#F97583">=</span><span style="color:#B392F0"> doStep3</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`result: ${</span><span style="color:#E1E4E8">result</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0">doOperation</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"></span></code></pre>\n<h4 id="7--同步回调函数示例">7. ⛔ 同步回调函数示例<a class="anchor" href="#7--同步回调函数示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep1</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">callback</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> result</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">\tcallback</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep2</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">callback</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> result</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">\tcallback</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doStep3</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">init</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">callback</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> result</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> init </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 3</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">\tcallback</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> doOperation</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#B392F0">\tdoStep1</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">, (</span><span style="color:#FFAB70">result1</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tdoStep2</span><span style="color:#E1E4E8">(result1, (</span><span style="color:#FFAB70">result2</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tdoStep3</span><span style="color:#E1E4E8">(result2, (</span><span style="color:#FFAB70">result3</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`result: ${</span><span style="color:#E1E4E8">result3</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#B392F0">doOperation</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"></span></code></pre>',frontmatter={Datereviewed:null,difficulty:null,comment:null,title:"callbacks-回调函数",type:"D",DateStarted:"2022-12-09T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:null,reviewed:1,draft:!0,topic:["Function","Async"],category:"Programming",tags:["JavaScript"],minutes:2,words:422},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/function/callbacks-回调函数.md",url=void 0;function rawContent(){return"\n## Use of Callbacks\n\n#### 1. 回调函数（同步回调与异步回调？）\n\n> [带你聊聊 JavaScript 中的回调函数，区分下同步和异步回调-js 教程-PHP 中文网](https://www.php.cn/js-tutorial-486539.html))\n\n#### 2. Why Use Callbacks?\n\n> [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)  \n> [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\nWhen doing a complex task, we break that task down into smaller steps. To help us establish a relationship between these steps according to time (optional) and order, we use callbacks.\n\n#### 3. ✅ 异步回调方法？\n\n- Event Handler：将函数放入 EventListener (事件监听器) 中，事件处理器是异步回调函数的一种\n- Timer Function：将函数放入 setTimeout 等 Timer Function 中\n\n#### 4. ✅ 异步回调示例\n\n##### 4.1. Stock - BakcEnd\n\n```javascript\nlet stocks = {\n\tFruits: [strawberry, grapes, banana, apple],\n\tliquid: [water, ice],\n\tholder: [cone, cup, stick],\n\ttoppings: [chocolate, peanuts],\n};\n```\n\n##### 4.2. Kitchen - FrontEnd\n\n```javascript\n// 1st Function\nlet order = (fruit_name, call_production) => {\n\tsetTimeout(function () {\n\t\tconsole.log(`${stocks.Fruits[fruit_name]} was selected`);\n\t\t// Order placed. Call production to start\n\t\tcall_production();\n\t}, 2000);\n};\n// 2nd Function\nlet production = () => {\n\tsetTimeout(() => {\n\t\tconsole.log(production has DateStarted);\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(The fruit has been chopped);\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} Added`);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log(start the machine);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconsole.log(`Ice cream placed on ${stocks.holder[1]}`);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tconsole.log(`${stocks.toppings[0]} as toppings`);\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tconsole.log(serve Ice cream);\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t}, 2000);\n\t\t\t\t}, 1000);\n\t\t\t}, 1000);\n\t\t}, 2000);\n\t}, 0000);\n};\n// Trigger 👇\norder(0, production);\n```\n\n#### 5. 异步回调缺点？\n\n- Callback Hell\n- hard to handle errors:\n  - often you have to handle errors at each level of the pyramid, instead of having error handling only once at the top level\n\n#### 6. ⛔ 同步函数示例\n\n```js\nfunction doStep1(init) {\n\treturn init + 1;\n}\nfunction doStep2(init) {\n\treturn init + 2;\n}\nfunction doStep3(init) {\n\treturn init + 3;\n}\nfunction doOperation() {\n\tlet result = 0;\n\tresult = doStep1(result);\n\tresult = doStep2(result);\n\tresult = doStep3(result);\n\tconsole.log(`result: ${result}`);\n}\n\ndoOperation();\n```\n\n#### 7. ⛔ 同步回调函数示例\n\n```js\nfunction doStep1(init, callback) {\n\tconst result = init + 1;\n\tcallback(result);\n}\nfunction doStep2(init, callback) {\n\tconst result = init + 2;\n\tcallback(result);\n}\nfunction doStep3(init, callback) {\n\tconst result = init + 3;\n\tcallback(result);\n}\nfunction doOperation() {\n\tdoStep1(0, (result1) => {\n\t\tdoStep2(result1, (result2) => {\n\t\t\tdoStep3(result2, (result3) => {\n\t\t\t\tconsole.log(`result: ${result3}`);\n\t\t\t});\n\t\t});\n\t});\n}\ndoOperation();\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:2,slug:"use-of-callbacks",text:"Use of Callbacks#"},{depth:4,slug:"1-回调函数同步回调与异步回调",text:"1. 回调函数（同步回调与异步回调？）#"},{depth:4,slug:"2-why-use-callbacks",text:"2. Why Use Callbacks?#"},{depth:4,slug:"3--异步回调方法",text:"3. ✅ 异步回调方法？#"},{depth:4,slug:"4--异步回调示例",text:"4. ✅ 异步回调示例#"},{depth:5,slug:"41-stock---bakcend",text:"4.1. Stock - BakcEnd#"},{depth:5,slug:"42-kitchen---frontend",text:"4.2. Kitchen - FrontEnd#"},{depth:4,slug:"5-异步回调缺点",text:"5. 异步回调缺点？#"},{depth:4,slug:"6--同步函数示例",text:"6. ⛔ 同步函数示例#"},{depth:4,slug:"7--同步回调函数示例",text:"7. ⛔ 同步回调函数示例#"}]}const Content=createComponent(((s,n,a)=>{const{layout:t,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),callbacks_____=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,callbacks_____,collection,data,id,slug};