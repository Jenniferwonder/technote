import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/ds-plus/typed-array-定型数组.md",collection="posts",slug="js/ds-plus/typed-array-定型数组",body="\n# Typed Array-定型数组\n\n## 基本概念\n\n- 历史\n  - [Typed Array History-历史](Typed-Array-History-历史)\n- 目的\n  - 提高与 WebGL 等原生库交换二进制数据的效率 (efficiently passing binary data to native libraries)\n- 功能\n  - 读取或写入 [Array Buffer](ArrayBuffer-缓冲)，引用 ArrayBuffer 中存储的二进制数据\n- 特点\n  - 特定于一种 [JS ElementType](ElementType)\n  - 遵循系统原生的 [字节序](Endianness-字节序)\n  - 提供了适用面更广的 API 和更高的性能\n  - 没有用任何值初始化，则其关联的缓冲会以 0 填充\n- 相关概念\n  - [ArrayBuffer 缓冲](ArrayBuffer-缓冲)\n  - [Dataview](Dataview)\n  - 一个字节有 8 位（1 byte = **8** bits）\n    - `Int32Array` 数组每个元素需要 **4** 字节\n    - 用 12 字节的缓冲可以创建一个长度为 **3** 的 Int32Array 定型数组\n\n## 创建方式\n\n- 通过 [JS ElementType](ElementType)\n  - `<ElementType>.from()`和`<ElementType>.of()`\n- 通过构造函数（构造函数参数）\n- ?\n  - 指定缓冲\n    - `new Int32Array(buf)`\n  - 指定长度\n    - `new Int32Array(length)`\n  - 指定元素值\n    - `const ints3 = new Int32Array([2, 4, 6, 8]);`\n  - 已有的定型数组（复制 ints3 的值创建一个 `Int16Array`）\n    - `const ints4 = new Int16Array(ints3);`\n\n## 实例属性\n\n- BYTES_PER_ELEMENT\n  - 返回该类型数组中每个元素的大小\n\n## 实例方法\n\n- 与普通数组相似的方法\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479384516.png)\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479394996.png)\n- 拼、删、增、截、改\n  - 不适用的方法\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479512448.png)\n  - 复制数据的新方法\n    - set()\n      - 从提供的数组或定型数组中把值复制到当前定型数组中指定的索引位置\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479695992.png)\n      - subarray()\n        - 基于从原始定型数组中复制的值返回一个新定型数组\n        - 开始索引和结束索引可选\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479818115.png)\n  - 拼接方法\n- 🟨 下溢和上溢-Underflow and Overflow\n\x3c!--SR:!2023-08-25,10,250--\x3e\n",data={title:"Typed Array-定型数组",DateStarted:new Date(169128e7),draft:!0,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/typed-array-定型数组.md",rawData:void 0},html='<h1 id="typed-array-定型数组">Typed Array-定型数组<a class="anchor" href="#typed-array-定型数组"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="基本概念">基本概念<a class="anchor" href="#基本概念"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>历史\n<ul>\n<li><a href="Typed-Array-History-%E5%8E%86%E5%8F%B2">Typed Array History-历史</a></li>\n</ul>\n</li>\n<li>目的\n<ul>\n<li>提高与 WebGL 等原生库交换二进制数据的效率 (efficiently passing binary data to native libraries)</li>\n</ul>\n</li>\n<li>功能\n<ul>\n<li>读取或写入 <a href="ArrayBuffer-%E7%BC%93%E5%86%B2">Array Buffer</a>，引用 ArrayBuffer 中存储的二进制数据</li>\n</ul>\n</li>\n<li>特点\n<ul>\n<li>特定于一种 <a href="ElementType">JS ElementType</a></li>\n<li>遵循系统原生的 <a href="Endianness-%E5%AD%97%E8%8A%82%E5%BA%8F">字节序</a></li>\n<li>提供了适用面更广的 API 和更高的性能</li>\n<li>没有用任何值初始化，则其关联的缓冲会以 0 填充</li>\n</ul>\n</li>\n<li>相关概念\n<ul>\n<li><a href="ArrayBuffer-%E7%BC%93%E5%86%B2">ArrayBuffer 缓冲</a></li>\n<li><a href="Dataview">Dataview</a></li>\n<li>一个字节有 8 位（1 byte = <strong>8</strong> bits）\n<ul>\n<li><code>Int32Array</code> 数组每个元素需要 <strong>4</strong> 字节</li>\n<li>用 12 字节的缓冲可以创建一个长度为 <strong>3</strong> 的 Int32Array 定型数组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="创建方式">创建方式<a class="anchor" href="#创建方式"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>通过 <a href="ElementType">JS ElementType</a>\n<ul>\n<li><code>&#x3C;ElementType>.from()</code>和<code>&#x3C;ElementType>.of()</code></li>\n</ul>\n</li>\n<li>通过构造函数（构造函数参数）</li>\n<li>?\n<ul>\n<li>指定缓冲\n<ul>\n<li><code>new Int32Array(buf)</code></li>\n</ul>\n</li>\n<li>指定长度\n<ul>\n<li><code>new Int32Array(length)</code></li>\n</ul>\n</li>\n<li>指定元素值\n<ul>\n<li><code>const ints3 = new Int32Array([2, 4, 6, 8]);</code></li>\n</ul>\n</li>\n<li>已有的定型数组（复制 ints3 的值创建一个 <code>Int16Array</code>）\n<ul>\n<li><code>const ints4 = new Int16Array(ints3);</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="实例属性">实例属性<a class="anchor" href="#实例属性"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>BYTES_PER_ELEMENT\n<ul>\n<li>返回该类型数组中每个元素的大小</li>\n</ul>\n</li>\n</ul>\n<h2 id="实例方法">实例方法<a class="anchor" href="#实例方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>与普通数组相似的方法\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479384516.png" alt=""></li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479394996.png" alt=""></li>\n</ul>\n</li>\n<li>拼、删、增、截、改\n<ul>\n<li>不适用的方法\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479512448.png" alt=""></li>\n</ul>\n</li>\n<li>复制数据的新方法\n<ul>\n<li>set()\n<ul>\n<li>从提供的数组或定型数组中把值复制到当前定型数组中指定的索引位置\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479695992.png" alt=""></li>\n</ul>\n</li>\n<li>subarray()\n<ul>\n<li>基于从原始定型数组中复制的值返回一个新定型数组</li>\n<li>开始索引和结束索引可选</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479818115.png" alt=""></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拼接方法</li>\n</ul>\n</li>\n<li>🟨 下溢和上溢-Underflow and Overflow</li>\n</ul>\n\x3c!--SR:!2023-08-25,10,250--\x3e',frontmatter={Datereviewed:null,reviewed:null,difficulty:null,comment:null,title:"Typed Array-定型数组",type:"D",DateStarted:"2023-08-06T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:"Snooze",Pomo:8,pages:5,Up:[["C06-Collection Reference Type-集合引用类型"]],Cards:34,aliases:["Typed Array-定型数组","JS Typed Array"],topic:["Array","DS+"],category:"Programming",tags:["JavaScript"],draft:!0,"linter-yaml-title-alias":"Typed Array-定型数组",minutes:2,words:376},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/typed-array-定型数组.md",url=void 0;function rawContent(){return"\n# Typed Array-定型数组\n\n## 基本概念\n\n- 历史\n  - [Typed Array History-历史](Typed-Array-History-历史)\n- 目的\n  - 提高与 WebGL 等原生库交换二进制数据的效率 (efficiently passing binary data to native libraries)\n- 功能\n  - 读取或写入 [Array Buffer](ArrayBuffer-缓冲)，引用 ArrayBuffer 中存储的二进制数据\n- 特点\n  - 特定于一种 [JS ElementType](ElementType)\n  - 遵循系统原生的 [字节序](Endianness-字节序)\n  - 提供了适用面更广的 API 和更高的性能\n  - 没有用任何值初始化，则其关联的缓冲会以 0 填充\n- 相关概念\n  - [ArrayBuffer 缓冲](ArrayBuffer-缓冲)\n  - [Dataview](Dataview)\n  - 一个字节有 8 位（1 byte = **8** bits）\n    - `Int32Array` 数组每个元素需要 **4** 字节\n    - 用 12 字节的缓冲可以创建一个长度为 **3** 的 Int32Array 定型数组\n\n## 创建方式\n\n- 通过 [JS ElementType](ElementType)\n  - `<ElementType>.from()`和`<ElementType>.of()`\n- 通过构造函数（构造函数参数）\n- ?\n  - 指定缓冲\n    - `new Int32Array(buf)`\n  - 指定长度\n    - `new Int32Array(length)`\n  - 指定元素值\n    - `const ints3 = new Int32Array([2, 4, 6, 8]);`\n  - 已有的定型数组（复制 ints3 的值创建一个 `Int16Array`）\n    - `const ints4 = new Int16Array(ints3);`\n\n## 实例属性\n\n- BYTES_PER_ELEMENT\n  - 返回该类型数组中每个元素的大小\n\n## 实例方法\n\n- 与普通数组相似的方法\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479384516.png)\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479394996.png)\n- 拼、删、增、截、改\n  - 不适用的方法\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479512448.png)\n  - 复制数据的新方法\n    - set()\n      - 从提供的数组或定型数组中把值复制到当前定型数组中指定的索引位置\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479695992.png)\n      - subarray()\n        - 基于从原始定型数组中复制的值返回一个新定型数组\n        - 开始索引和结束索引可选\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691479818115.png)\n  - 拼接方法\n- 🟨 下溢和上溢-Underflow and Overflow\n\x3c!--SR:!2023-08-25,10,250--\x3e\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"typed-array-定型数组",text:"Typed Array-定型数组#"},{depth:2,slug:"基本概念",text:"基本概念#"},{depth:2,slug:"创建方式",text:"创建方式#"},{depth:2,slug:"实例属性",text:"实例属性#"},{depth:2,slug:"实例方法",text:"实例方法#"}]}const Content=createComponent(((n,e,r)=>{const{layout:t,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),typedArray_____=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,typedArray_____};