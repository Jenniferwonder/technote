import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/ds-plus/set.md",collection="posts",slug="js/ds-plus/set",body="\n# Set\n\n## Basic API\n\n- Set 在很多方面都 像是加强的 Map\n- 它们的大多数 API 和行为都是共有的\n- const m = new Set();\n- 可以给 Set 构造函数传入一个可迭代对象\n- 使用数组初始化集合\n- 使用自定义迭代器初始化集合\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559944791.png)\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559952833.png)\n- add()\n- has()\n- size\n- delete()\n- clear()\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559997953.png)\n- add()返回集合的实例，所以可以将多个添加操作连缀起来，包括初始化\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560058246.png)\n- 与 Map 类似，Set 可以包含任何 JavaScript 数据类型作为值\n- 相当于使用严格对象相等的标准来检查值的匹 配性\n- delete()返回一个布尔值，表示集合中是否存在要删除的值\n\n## Order and Iteration\n\n- 支持按顺序迭代\n  - 可以直接对集合实例使用扩展操作，把集合转换为数组\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560666901.png)\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560672263.png)\n    - forEach()\n    - 传入的回调接收可选的第二个参数，这个参数用于重写回调内部 this 的值\n\n## Defining Formal Set Operations\n\n- 子类化 Set\n  - 定义一 个实用函数库\n  - 两种方式合二为一，可以在子类上实现静态方法，然后在实例方法中使用这些静态 方法\n",data={title:"Set",DateStarted:new Date(16698528e5),draft:!0,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/set.md",rawData:void 0},html='<h1 id="set">Set<a class="anchor" href="#set"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="basic-api">Basic API<a class="anchor" href="#basic-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Set 在很多方面都 像是加强的 Map</li>\n<li>它们的大多数 API 和行为都是共有的</li>\n<li>const m = new Set();</li>\n<li>可以给 Set 构造函数传入一个可迭代对象</li>\n<li>使用数组初始化集合</li>\n<li>使用自定义迭代器初始化集合</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559944791.png" alt=""></li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559952833.png" alt=""></li>\n<li>add()</li>\n<li>has()</li>\n<li>size</li>\n<li>delete()</li>\n<li>clear()</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559997953.png" alt=""></li>\n<li>add()返回集合的实例，所以可以将多个添加操作连缀起来，包括初始化</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560058246.png" alt=""></li>\n<li>与 Map 类似，Set 可以包含任何 JavaScript 数据类型作为值</li>\n<li>相当于使用严格对象相等的标准来检查值的匹 配性</li>\n<li>delete()返回一个布尔值，表示集合中是否存在要删除的值</li>\n</ul>\n<h2 id="order-and-iteration">Order and Iteration<a class="anchor" href="#order-and-iteration"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>支持按顺序迭代\n<ul>\n<li>可以直接对集合实例使用扩展操作，把集合转换为数组</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560666901.png" alt=""></li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560672263.png" alt="">\n<ul>\n<li>forEach()</li>\n<li>传入的回调接收可选的第二个参数，这个参数用于重写回调内部 this 的值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="defining-formal-set-operations">Defining Formal Set Operations<a class="anchor" href="#defining-formal-set-operations"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>子类化 Set\n<ul>\n<li>定义一 个实用函数库</li>\n<li>两种方式合二为一，可以在子类上实现静态方法，然后在实例方法中使用这些静态 方法</li>\n</ul>\n</li>\n</ul>',frontmatter={Datereviewed:null,reviewed:null,difficulty:null,comment:null,aliases:["Set"],title:"Set",type:"D",DateStarted:"2022-12-01T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:"Snooze",pages:7,Up:[["C06-Collection Reference Type-集合引用类型"]],Pomo:1,topic:["DS+"],category:"Programming",tags:["JavaScript"],draft:!0,"linter-yaml-title-alias":"Set",minutes:1,words:281},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/set.md",url=void 0;function rawContent(){return"\n# Set\n\n## Basic API\n\n- Set 在很多方面都 像是加强的 Map\n- 它们的大多数 API 和行为都是共有的\n- const m = new Set();\n- 可以给 Set 构造函数传入一个可迭代对象\n- 使用数组初始化集合\n- 使用自定义迭代器初始化集合\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559944791.png)\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559952833.png)\n- add()\n- has()\n- size\n- delete()\n- clear()\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691559997953.png)\n- add()返回集合的实例，所以可以将多个添加操作连缀起来，包括初始化\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560058246.png)\n- 与 Map 类似，Set 可以包含任何 JavaScript 数据类型作为值\n- 相当于使用严格对象相等的标准来检查值的匹 配性\n- delete()返回一个布尔值，表示集合中是否存在要删除的值\n\n## Order and Iteration\n\n- 支持按顺序迭代\n  - 可以直接对集合实例使用扩展操作，把集合转换为数组\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560666901.png)\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691560672263.png)\n    - forEach()\n    - 传入的回调接收可选的第二个参数，这个参数用于重写回调内部 this 的值\n\n## Defining Formal Set Operations\n\n- 子类化 Set\n  - 定义一 个实用函数库\n  - 两种方式合二为一，可以在子类上实现静态方法，然后在实例方法中使用这些静态 方法\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"set",text:"Set#"},{depth:2,slug:"basic-api",text:"Basic API#"},{depth:2,slug:"order-and-iteration",text:"Order and Iteration#"},{depth:2,slug:"defining-formal-set-operations",text:"Defining Formal Set Operations#"}]}const Content=createComponent(((n,e,t)=>{const{layout:i,...r}=frontmatter;return r.file=file,r.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),set=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,set,slug};