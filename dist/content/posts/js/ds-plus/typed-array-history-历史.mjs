import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/ds-plus/typed-array-history-历史.md",collection="posts",slug="js/ds-plus/typed-array-history-历史",body="\n# [Typed Array](Typed-Array-定型数组) History-历史\n\n- WebGL\n  - 2006 年，目的（Mozilla、Opera 等浏览器提供商提出）\n    - WebGL 目的是**充分利用 3D 图形 API 和 GPU 加速**，以便在`<canvas>`元素上渲染复杂的图形\n  - OpenGL ES\n    - 英文全称：**OpenGL for Embedded Systems**\n    - 是 OpenGL 专注于 2D 和 3D 计算机图形的子集\n    - JavaScript API 基于 OpenGL ES 2.0 规范的\n  - 2011 年，发布 1.0 版\n    - 这个新 API 被命名为 WebGL，全称 **Web Graphics Library**\n  - 早期版本存在性能问题\n    - 原因是**JavaScript 数组与原生数组之间不匹配**\n      - 图形 驱动程序 API 通常不需要以 JavaScript 默认**双精度浮点格式-double floating point**传递给它们的数值，而这恰恰是 JavaScript 数组在内存中的格式\n- 定型数组 - 目的 - 为解决**WebGL 早期版本性能问题** - `CanvasFloatArray`(Mozilla 推出) - 最终变成 `Float32Array` - 定义 - 是首个可用的提供 **JS 接口**、**C 语言**风格浮点值的**定型数组“类型”** - JavaScript 运行时使用这个类型可以分配、读取和写入数组。 - 这个数组可以直接传给底层图形驱动程序 API，也可以直接从底层获取到。 - 是 **one type of view-一种视图** 📌 - 功能 - Allow the JavaScript runtime to \\*\\*access (访问) `ArrayBuffer\n\x3c!--SR:!2023-08-22,7,250!2023-08-23,8,250!2023-08-25,10,250!2023-08-21,6,250!2023-08-23,8,250!2023-08-21,6,250!2023-08-21,6,250!2023-08-24,9,250!2023-08-23,8,250!2023-08-22,7,250--\x3e\n",data={title:"Typed Array History-历史",DateStarted:new Date(16915392e5),draft:!0,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/typed-array-history-历史.md",rawData:void 0},html='<h1 id="typed-array-history-历史"><a href="Typed-Array-%E5%AE%9A%E5%9E%8B%E6%95%B0%E7%BB%84">Typed Array</a> History-历史<a class="anchor" href="#typed-array-history-历史"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<ul>\n<li>WebGL\n<ul>\n<li>2006 年，目的（Mozilla、Opera 等浏览器提供商提出）\n<ul>\n<li>WebGL 目的是<strong>充分利用 3D 图形 API 和 GPU 加速</strong>，以便在<code>&#x3C;canvas></code>元素上渲染复杂的图形</li>\n</ul>\n</li>\n<li>OpenGL ES\n<ul>\n<li>英文全称：<strong>OpenGL for Embedded Systems</strong></li>\n<li>是 OpenGL 专注于 2D 和 3D 计算机图形的子集</li>\n<li>JavaScript API 基于 OpenGL ES 2.0 规范的</li>\n</ul>\n</li>\n<li>2011 年，发布 1.0 版\n<ul>\n<li>这个新 API 被命名为 WebGL，全称 <strong>Web Graphics Library</strong></li>\n</ul>\n</li>\n<li>早期版本存在性能问题\n<ul>\n<li>原因是<strong>JavaScript 数组与原生数组之间不匹配</strong>\n<ul>\n<li>图形 驱动程序 API 通常不需要以 JavaScript 默认<strong>双精度浮点格式-double floating point</strong>传递给它们的数值，而这恰恰是 JavaScript 数组在内存中的格式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>定型数组 - 目的 - 为解决<strong>WebGL 早期版本性能问题</strong> - <code>CanvasFloatArray</code>(Mozilla 推出) - 最终变成 <code>Float32Array</code> - 定义 - 是首个可用的提供 <strong>JS 接口</strong>、<strong>C 语言</strong>风格浮点值的<strong>定型数组“类型”</strong> - JavaScript 运行时使用这个类型可以分配、读取和写入数组。 - 这个数组可以直接传给底层图形驱动程序 API，也可以直接从底层获取到。 - 是 <strong>one type of view-一种视图</strong> 📌 - 功能 - Allow the JavaScript runtime to **access (访问) `ArrayBuffer</li>\n</ul>\n\x3c!--SR:!2023-08-22,7,250!2023-08-23,8,250!2023-08-25,10,250!2023-08-21,6,250!2023-08-23,8,250!2023-08-21,6,250!2023-08-21,6,250!2023-08-24,9,250!2023-08-23,8,250!2023-08-22,7,250--\x3e',frontmatter={Datereviewed:null,reviewed:null,difficulty:null,comment:null,aliases:["Typed Array History-历史"],title:"Typed Array History-历史",type:"D",DateStarted:"2023-08-09T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:["Snooze"],Up:[["Typed Array-定型数组"]],topic:["Array","DS+"],category:"Programming",tags:["JavaScript"],draft:!0,"linter-yaml-title-alias":"Typed Array History-历史",minutes:2,words:312},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/ds-plus/typed-array-history-历史.md",url=void 0;function rawContent(){return"\n# [Typed Array](Typed-Array-定型数组) History-历史\n\n- WebGL\n  - 2006 年，目的（Mozilla、Opera 等浏览器提供商提出）\n    - WebGL 目的是**充分利用 3D 图形 API 和 GPU 加速**，以便在`<canvas>`元素上渲染复杂的图形\n  - OpenGL ES\n    - 英文全称：**OpenGL for Embedded Systems**\n    - 是 OpenGL 专注于 2D 和 3D 计算机图形的子集\n    - JavaScript API 基于 OpenGL ES 2.0 规范的\n  - 2011 年，发布 1.0 版\n    - 这个新 API 被命名为 WebGL，全称 **Web Graphics Library**\n  - 早期版本存在性能问题\n    - 原因是**JavaScript 数组与原生数组之间不匹配**\n      - 图形 驱动程序 API 通常不需要以 JavaScript 默认**双精度浮点格式-double floating point**传递给它们的数值，而这恰恰是 JavaScript 数组在内存中的格式\n- 定型数组 - 目的 - 为解决**WebGL 早期版本性能问题** - `CanvasFloatArray`(Mozilla 推出) - 最终变成 `Float32Array` - 定义 - 是首个可用的提供 **JS 接口**、**C 语言**风格浮点值的**定型数组“类型”** - JavaScript 运行时使用这个类型可以分配、读取和写入数组。 - 这个数组可以直接传给底层图形驱动程序 API，也可以直接从底层获取到。 - 是 **one type of view-一种视图** 📌 - 功能 - Allow the JavaScript runtime to \\*\\*access (访问) `ArrayBuffer\n\x3c!--SR:!2023-08-22,7,250!2023-08-23,8,250!2023-08-25,10,250!2023-08-21,6,250!2023-08-23,8,250!2023-08-21,6,250!2023-08-21,6,250!2023-08-24,9,250!2023-08-23,8,250!2023-08-22,7,250--\x3e\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"typed-array-history-历史",text:"Typed Array History-历史#"}]}const Content=createComponent(((e,t,r)=>{const{layout:n,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),typedArrayHistory___=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,typedArrayHistory___};