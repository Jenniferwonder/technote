import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/object/object-creation-创建对象.md",collection="posts",slug="js/object/object-creation-创建对象",body="\n# Object Creation-创建对象\n\n---\n\nBasic\n\n### What is Object in JS\n\nBack:\n\n- A collection of Key-Value Pairs\n- 包含*内置对象类型*与*自定义对象类型*  \n🏷️: JS-Objects  \n📌: JS::JS-Objects\n\x3c!--ID: 1706843480961--\x3e\n\n---\n\n---\n\nBasic\n\n### 创建内置对象\n\nBack:\n\n- let o = new Object ();\n- new Array(), new String(), new Boolean(), new Error()...\n\x3c!--ID: 1706843480973--\x3e\n\n---\n\n---\n\nBasic\n\n### Ways to Create Object\n\nBack:\n\n- [object-literal-对象字面量表示法](object-literal-对象字面量表示法)\n- [Factory Function-工厂模式](factory-function-工厂函数模式)\n- [Constructor Function-构造函数模式](constructor-function-构造函数模式)\n- [Prototype Pattern-原型模式](prototype-pattern-原型模式)\n\x3c!--ID: 1706843480979--\x3e\n\n---\n\n### 如何创建一个没有原型的对象？\n\n可以使用` Object.create(null)` 方法创建一个没有原型的对象。这个方法创建一个全新的对象并将其原型设置为 null，因此它没有继承任何属性或方法。例如：\n\n```js\nconst obj = Object.create(null);\nconsole.log(obj.toString); // undefined\n```\n",data={title:"Object Creation-创建对象",DateStarted:new Date(17064864e5),draft:!1,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/object/object-creation-创建对象.md",rawData:void 0},html='<h1 id="object-creation-创建对象">Object Creation-创建对象<a class="anchor" href="#object-creation-创建对象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<hr>\n<p>Basic</p>\n<h3 id="what-is-object-in-js">What is Object in JS<a class="anchor" href="#what-is-object-in-js"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>A collection of Key-Value Pairs</li>\n<li>包含<em>内置对象类型</em>与<em>自定义对象类型</em><br>\n🏷️: JS-Objects<br>\n📌: JS::JS-Objects</li>\n</ul>\n\x3c!--ID: 1706843480961--\x3e\n<hr>\n<hr>\n<p>Basic</p>\n<h3 id="创建内置对象">创建内置对象<a class="anchor" href="#创建内置对象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>let o = new Object ();</li>\n<li>new Array(), new String(), new Boolean(), new Error()…</li>\n</ul>\n\x3c!--ID: 1706843480973--\x3e\n<hr>\n<hr>\n<p>Basic</p>\n<h3 id="ways-to-create-object">Ways to Create Object<a class="anchor" href="#ways-to-create-object"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li><a href="object-literal-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E8%A1%A8%E7%A4%BA%E6%B3%95">object-literal-对象字面量表示法</a></li>\n<li><a href="factory-function-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F">Factory Function-工厂模式</a></li>\n<li><a href="constructor-function-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F">Constructor Function-构造函数模式</a></li>\n<li><a href="prototype-pattern-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">Prototype Pattern-原型模式</a></li>\n</ul>\n\x3c!--ID: 1706843480979--\x3e\n<hr>\n<h3 id="如何创建一个没有原型的对象">如何创建一个没有原型的对象？<a class="anchor" href="#如何创建一个没有原型的对象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>可以使用<code> Object.create(null)</code> 方法创建一个没有原型的对象。这个方法创建一个全新的对象并将其原型设置为 null，因此它没有继承任何属性或方法。例如：</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> obj</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Object.</span><span style="color:#B392F0">create</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">null</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(obj.toString); </span><span style="color:#6A737D">// undefined</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,aliases:["Object Creation-创建对象"],title:"Object Creation-创建对象",topic:["Objects"],type:"D",tags:["JavaScript"],DateStarted:"2024-01-29T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-02-02T00:00:00.000Z",reviewed:2,difficulty:"Good",status:null,comment:null,"linter-yaml-title-alias":"Object Creation-创建对象",category:"Programming",minutes:1,words:164},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/object/object-creation-创建对象.md",url=void 0;function rawContent(){return"\n# Object Creation-创建对象\n\n---\n\nBasic\n\n### What is Object in JS\n\nBack:\n\n- A collection of Key-Value Pairs\n- 包含*内置对象类型*与*自定义对象类型*  \n🏷️: JS-Objects  \n📌: JS::JS-Objects\n\x3c!--ID: 1706843480961--\x3e\n\n---\n\n---\n\nBasic\n\n### 创建内置对象\n\nBack:\n\n- let o = new Object ();\n- new Array(), new String(), new Boolean(), new Error()...\n\x3c!--ID: 1706843480973--\x3e\n\n---\n\n---\n\nBasic\n\n### Ways to Create Object\n\nBack:\n\n- [object-literal-对象字面量表示法](object-literal-对象字面量表示法)\n- [Factory Function-工厂模式](factory-function-工厂函数模式)\n- [Constructor Function-构造函数模式](constructor-function-构造函数模式)\n- [Prototype Pattern-原型模式](prototype-pattern-原型模式)\n\x3c!--ID: 1706843480979--\x3e\n\n---\n\n### 如何创建一个没有原型的对象？\n\n可以使用` Object.create(null)` 方法创建一个没有原型的对象。这个方法创建一个全新的对象并将其原型设置为 null，因此它没有继承任何属性或方法。例如：\n\n```js\nconst obj = Object.create(null);\nconsole.log(obj.toString); // undefined\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"object-creation-创建对象",text:"Object Creation-创建对象#"},{depth:3,slug:"what-is-object-in-js",text:"What is Object in JS#"},{depth:3,slug:"创建内置对象",text:"创建内置对象#"},{depth:3,slug:"ways-to-create-object",text:"Ways to Create Object#"},{depth:3,slug:"如何创建一个没有原型的对象",text:"如何创建一个没有原型的对象？#"}]}const Content=createComponent(((n,e,t)=>{const{layout:o,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),objectCreation_____=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,objectCreation_____,slug};