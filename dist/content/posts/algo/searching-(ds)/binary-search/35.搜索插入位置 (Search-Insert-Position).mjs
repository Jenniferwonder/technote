import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="algo/searching-(ds)/binary-search/35.搜索插入位置 (Search-Insert-Position).md",collection="posts",slug="algo/searching-ds/binary-search/35搜索插入位置-search-insert-position",body="\n# 35.搜索插入位置 (Search-Insert-Position)\n\n## 题目要求\n\n本题要求返回 FF3A3A6;>一个整数在 FF3A3A6;>一个顺序排列的数组中的位置\n\n## [核心方法](核心方法)\n\n- [核心方法 > 二分法 (分治)](核心方法#二分法-分治)\n\n## 关键步骤\n\n## 代码实现 (JS)\n\n本题使用二分法，可满足时间复杂度 `O(logn)`，空间复杂度 `O(1)`\n\n```js\nvar searchInsert = function (nums, target) {\n\tlet left = 0;\n\tlet right = nums.length - 1;\n\twhile (left <= right) {\n\t\tlet mi = Math.trunc((left + right) / 2);\n\t\tif (target === nums[mi]) {\n\t\t\treturn mi;\n\t\t} else if (target < nums[mi]) {\n\t\t\tright = mi - 1;\n\t\t} else if (target > nums[mi]) {\n\t\t\tleft = mi + 1;\n\t\t}\n\t}\n\treturn left;\n};\n```\n\n## 实现过程总结\n\n### 一、确定变量\n\n> 这一步不容易，一开始往往只能想到利用中间位置(mi)，很难充分想到数组左右位置变量的妙用\n\n1. 思考给定变或已知变量: `nums`, `target`\n2. 定义其他需要的输入、输出变量: `left`, `right`, `mi` (middleIndex), `len` (`nums.length`)\n\n### 二、确定循环条件\n\n从二分法特点出发，每次数组长度切半，判断数组长度是否大于等一 1，若是，则循环继续，实现方式有两种：\n\n1. `len >= 1` ，`len/2`，这种最容易想到：每次数组长度切半，但以 `len` 作为变量，且只考虑中间位置的话，极易遗漏情况\n2. `right >= left`, 若目标在左，则 `right = mi - 1`，若目标在右，则`left = mi + 1`\n\n#### 三、考虑并测试所有可能情况，绘图可视化\n\n> 这一步可用 DrawIO 绘图或动笔记录，能避免遗漏，并减轻大脑负担，每通过一种情况，标绿一个，确保所有边际情况都在内即可，可以不用测试太多……：\n\n- ![LC-35-Input.png](https://pic.leetcode.cn/1693892392-FKotLV-LC-35-Input.png)\n- 绘制初步流程图：第一版直接炸了 🤣，高达 11 个 `if...else` 判断…………………  \n  ![LC-35-DR-Binary Search-v1.png](https://pic.leetcode.cn/1693892374-SfAGIB-LC-35-DR-Binary-Search-v1.png)\n\n#### 四、合并精简，勿死磕\n\n> 这一步实在不行不要死磕，不要硬抗…… 不防看看题解，或许直接豁然开朗，省下不少时间\n\n- 第二版：精简到 8 个判断，但代码还是长到不行，还写出一个 bug……  \n      - ![LC-35-DR-Binary Search-v2.png](https://pic.leetcode.cn/1693895111-VpGCkW-LC-35-DR-Binary-Search-v2.png)\n- 第三版：参考题解，只需 3 个判断，差距一目了然……  \n      - ![LC-35-DR-Binary Search-v3.png](https://pic.leetcode.cn/1693895686-cTbfQz-LC-35-DR-Binary-Search-v3.png)\n\n#### 五、代码实现除 BUG，善用 GPT\n\n> 这一步如果出现 Bug，问 ChatGPT 是真香，不过也不能全听全信，参考参考，自己判断\n\n- ! 切记 JS 条件判断不要用 `=`，而是用 `===`\n- ![LC-35-GPT.png|325](https://pic.leetcode.cn/1693896176-JriCWN-LC-35-GPT.png)\n",data={title:"35.搜索插入位置 (Search-Insert-Position)",DateStarted:new Date(16936992e5),draft:!1,tags:["Algo"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/searching-(ds)/binary-search/35.搜索插入位置 (Search-Insert-Position).md",rawData:void 0},html='<h1 id="35搜索插入位置-search-insert-position">35.搜索插入位置 (Search-Insert-Position)<a class="anchor" href="#35搜索插入位置-search-insert-position"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="题目要求">题目要求<a class="anchor" href="#题目要求"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本题要求返回 FF3A3A6;>一个整数在 FF3A3A6;>一个顺序排列的数组中的位置</p>\n<h2 id="核心方法"><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95">核心方法</a><a class="anchor" href="#核心方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95#%E4%BA%8C%E5%88%86%E6%B3%95-%E5%88%86%E6%B2%BB">核心方法 > 二分法 (分治)</a></li>\n</ul>\n<h2 id="关键步骤">关键步骤<a class="anchor" href="#关键步骤"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="代码实现-js">代码实现 (JS)<a class="anchor" href="#代码实现-js"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本题使用二分法，可满足时间复杂度 <code>O(logn)</code>，空间复杂度 <code>O(1)</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">var</span><span style="color:#B392F0"> searchInsert</span><span style="color:#F97583"> =</span><span style="color:#F97583"> function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">nums</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">target</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> nums.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> right) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tlet</span><span style="color:#E1E4E8"> mi </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">trunc</span><span style="color:#E1E4E8">((left </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> right) </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (target </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> nums[mi]) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> mi;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8"> (target </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> nums[mi]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tright </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mi </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8"> (target </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> nums[mi]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mi </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> left;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h2 id="实现过程总结">实现过程总结<a class="anchor" href="#实现过程总结"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="一确定变量">一、确定变量<a class="anchor" href="#一确定变量"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p>这一步不容易，一开始往往只能想到利用中间位置(mi)，很难充分想到数组左右位置变量的妙用</p>\n</blockquote>\n<ol>\n<li>思考给定变或已知变量: <code>nums</code>, <code>target</code></li>\n<li>定义其他需要的输入、输出变量: <code>left</code>, <code>right</code>, <code>mi</code> (middleIndex), <code>len</code> (<code>nums.length</code>)</li>\n</ol>\n<h3 id="二确定循环条件">二、确定循环条件<a class="anchor" href="#二确定循环条件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>从二分法特点出发，每次数组长度切半，判断数组长度是否大于等一 1，若是，则循环继续，实现方式有两种：</p>\n<ol>\n<li><code>len >= 1</code> ，<code>len/2</code>，这种最容易想到：每次数组长度切半，但以 <code>len</code> 作为变量，且只考虑中间位置的话，极易遗漏情况</li>\n<li><code>right >= left</code>, 若目标在左，则 <code>right = mi - 1</code>，若目标在右，则<code>left = mi + 1</code></li>\n</ol>\n<h4 id="三考虑并测试所有可能情况绘图可视化">三、考虑并测试所有可能情况，绘图可视化<a class="anchor" href="#三考虑并测试所有可能情况绘图可视化"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>这一步可用 DrawIO 绘图或动笔记录，能避免遗漏，并减轻大脑负担，每通过一种情况，标绿一个，确保所有边际情况都在内即可，可以不用测试太多……：</p>\n</blockquote>\n<ul>\n<li><img src="https://pic.leetcode.cn/1693892392-FKotLV-LC-35-Input.png" alt="LC-35-Input.png"></li>\n<li>绘制初步流程图：第一版直接炸了 🤣，高达 11 个 <code>if...else</code> 判断…………………<br>\n<img src="https://pic.leetcode.cn/1693892374-SfAGIB-LC-35-DR-Binary-Search-v1.png" alt="LC-35-DR-Binary Search-v1.png"></li>\n</ul>\n<h4 id="四合并精简勿死磕">四、合并精简，勿死磕<a class="anchor" href="#四合并精简勿死磕"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>这一步实在不行不要死磕，不要硬抗…… 不防看看题解，或许直接豁然开朗，省下不少时间</p>\n</blockquote>\n<ul>\n<li>第二版：精简到 8 个判断，但代码还是长到不行，还写出一个 bug……<br>\n    - <img src="https://pic.leetcode.cn/1693895111-VpGCkW-LC-35-DR-Binary-Search-v2.png" alt="LC-35-DR-Binary Search-v2.png"></li>\n<li>第三版：参考题解，只需 3 个判断，差距一目了然……<br>\n    - <img src="https://pic.leetcode.cn/1693895686-cTbfQz-LC-35-DR-Binary-Search-v3.png" alt="LC-35-DR-Binary Search-v3.png"></li>\n</ul>\n<h4 id="五代码实现除-bug善用-gpt">五、代码实现除 BUG，善用 GPT<a class="anchor" href="#五代码实现除-bug善用-gpt"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>这一步如果出现 Bug，问 ChatGPT 是真香，不过也不能全听全信，参考参考，自己判断</p>\n</blockquote>\n<ul>\n<li>! 切记 JS 条件判断不要用 <code>=</code>，而是用 <code>===</code></li>\n<li><img src="https://pic.leetcode.cn/1693896176-JriCWN-LC-35-GPT.png" alt="LC-35-GPT.png|325"></li>\n</ul>',frontmatter={tags:["Algo"],category:"Programming",draft:!1,LCID:"LC-35",title:"35.搜索插入位置 (Search-Insert-Position)",type:"A",topic:["Array","BinarySearch","Two-Pointers"],difficulty:"Easy",Time:"O(logn)",Space:"O(1)",Like:!0,Solution:"二分法",SourceLink:"https://leetcode.cn/problems/search-insert-position",DateStarted:"2023-09-03T00:00:00.000Z",DateDone:"2023-09-04T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",aliases:["LC-35"],status:null,Datereviewed:"2024-02-16T16:00:00.000Z",reviewed:4,comment:"二分法, 左右指针基础; ⚠️注意中间数声明在循环体内部; 最后返回左指针数值",TimeNeed:"Easy",Similar:[["704.二分查找 (Binary Search)|LC-704"]],minutes:3,words:595},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/searching-(ds)/binary-search/35.搜索插入位置 (Search-Insert-Position).md",url=void 0;function rawContent(){return"\n# 35.搜索插入位置 (Search-Insert-Position)\n\n## 题目要求\n\n本题要求返回 FF3A3A6;>一个整数在 FF3A3A6;>一个顺序排列的数组中的位置\n\n## [核心方法](核心方法)\n\n- [核心方法 > 二分法 (分治)](核心方法#二分法-分治)\n\n## 关键步骤\n\n## 代码实现 (JS)\n\n本题使用二分法，可满足时间复杂度 `O(logn)`，空间复杂度 `O(1)`\n\n```js\nvar searchInsert = function (nums, target) {\n\tlet left = 0;\n\tlet right = nums.length - 1;\n\twhile (left <= right) {\n\t\tlet mi = Math.trunc((left + right) / 2);\n\t\tif (target === nums[mi]) {\n\t\t\treturn mi;\n\t\t} else if (target < nums[mi]) {\n\t\t\tright = mi - 1;\n\t\t} else if (target > nums[mi]) {\n\t\t\tleft = mi + 1;\n\t\t}\n\t}\n\treturn left;\n};\n```\n\n## 实现过程总结\n\n### 一、确定变量\n\n> 这一步不容易，一开始往往只能想到利用中间位置(mi)，很难充分想到数组左右位置变量的妙用\n\n1. 思考给定变或已知变量: `nums`, `target`\n2. 定义其他需要的输入、输出变量: `left`, `right`, `mi` (middleIndex), `len` (`nums.length`)\n\n### 二、确定循环条件\n\n从二分法特点出发，每次数组长度切半，判断数组长度是否大于等一 1，若是，则循环继续，实现方式有两种：\n\n1. `len >= 1` ，`len/2`，这种最容易想到：每次数组长度切半，但以 `len` 作为变量，且只考虑中间位置的话，极易遗漏情况\n2. `right >= left`, 若目标在左，则 `right = mi - 1`，若目标在右，则`left = mi + 1`\n\n#### 三、考虑并测试所有可能情况，绘图可视化\n\n> 这一步可用 DrawIO 绘图或动笔记录，能避免遗漏，并减轻大脑负担，每通过一种情况，标绿一个，确保所有边际情况都在内即可，可以不用测试太多……：\n\n- ![LC-35-Input.png](https://pic.leetcode.cn/1693892392-FKotLV-LC-35-Input.png)\n- 绘制初步流程图：第一版直接炸了 🤣，高达 11 个 `if...else` 判断…………………  \n  ![LC-35-DR-Binary Search-v1.png](https://pic.leetcode.cn/1693892374-SfAGIB-LC-35-DR-Binary-Search-v1.png)\n\n#### 四、合并精简，勿死磕\n\n> 这一步实在不行不要死磕，不要硬抗…… 不防看看题解，或许直接豁然开朗，省下不少时间\n\n- 第二版：精简到 8 个判断，但代码还是长到不行，还写出一个 bug……  \n      - ![LC-35-DR-Binary Search-v2.png](https://pic.leetcode.cn/1693895111-VpGCkW-LC-35-DR-Binary-Search-v2.png)\n- 第三版：参考题解，只需 3 个判断，差距一目了然……  \n      - ![LC-35-DR-Binary Search-v3.png](https://pic.leetcode.cn/1693895686-cTbfQz-LC-35-DR-Binary-Search-v3.png)\n\n#### 五、代码实现除 BUG，善用 GPT\n\n> 这一步如果出现 Bug，问 ChatGPT 是真香，不过也不能全听全信，参考参考，自己判断\n\n- ! 切记 JS 条件判断不要用 `=`，而是用 `===`\n- ![LC-35-GPT.png|325](https://pic.leetcode.cn/1693896176-JriCWN-LC-35-GPT.png)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"35搜索插入位置-search-insert-position",text:"35.搜索插入位置 (Search-Insert-Position)#"},{depth:2,slug:"题目要求",text:"题目要求#"},{depth:2,slug:"核心方法",text:"核心方法#"},{depth:2,slug:"关键步骤",text:"关键步骤#"},{depth:2,slug:"代码实现-js",text:"代码实现 (JS)#"},{depth:2,slug:"实现过程总结",text:"实现过程总结#"},{depth:3,slug:"一确定变量",text:"一、确定变量#"},{depth:3,slug:"二确定循环条件",text:"二、确定循环条件#"},{depth:4,slug:"三考虑并测试所有可能情况绘图可视化",text:"三、考虑并测试所有可能情况，绘图可视化#"},{depth:4,slug:"四合并精简勿死磕",text:"四、合并精简，勿死磕#"},{depth:4,slug:"五代码实现除-bug善用-gpt",text:"五、代码实现除 BUG，善用 GPT#"}]}const Content=createComponent(((n,e,t)=>{const{layout:s,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),_35_________SearchInsertPosition_=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_35_________SearchInsertPosition_,_internal,body,collection,data,id,slug};