import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="algo/recursive-algorithm/two-pointers/26.去除重复元素 (Remove-duplicates-from-sorted-array).md",collection="posts",slug="algo/recursive-algorithm/two-pointers/26去除重复元素-remove-duplicates-from-sorted-array",body="\n# 26.去除重复元素 (Remove-duplicates-from-sorted-array)\n\n## 题目要求\n\n输入**一个升序排列的数组  `nums`** ，要求**原地删除重复出现的元素**，使每个元素只出现一次  ，返回删除后数组的新长度。元素的相对顺序应该保持   一致  。然后返回 **`nums`  中唯一元素的个数**。\n\n#### 示例：\n\n\x3c!--SR:!2023-09-15,3,250!2023-09-15,3,250!2023-09-15,3,250--\x3e\n\n```\n输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n```\n\n## [核心方法](核心方法)\n\n- [核心方法 > 双指针](核心方法#双指针)：\n  - 利用快指针**遍历数组去重**，慢指针**追踪唯一元素**\n\n## 关键步骤\n\n1. 变量声明：**快慢指针 slow, fast**\n2. 变量初始赋值：**均为 1**\n3. 循环：**fast** `< nums.length`，执行循环\n   - 判断： **fast 对应元素** 与 **其前一元素** 是否相等\n     - 若不相等，则赋值 **fast** 对应元素给 **slow** 对应元素，并让 **slow ++**\n     - 若相等，则 **fast ++**\n4. 返回：**slow**\n\n## 代码实现 (JS)\n\n本方案可满足时间复杂度 **O(n)**，空间复杂度 **O(1)**\n\n```js\n// 二版：双指针，利用快指针遍历数组去重，慢指针追踪唯一元素\nvar removeDuplicates = function (nums) {\n  let slow = 1;\n  for (let fast = 1; fast < nums.length; fast++) {\n    if (nums[fast] !== nums[fast - 1]) {\n      nums[slow] = nums[fast];\n      slow++;\n    }\n  }\n  return slow;\n```\n",data={title:"26.去除重复元素 (Remove-duplicates-from-sorted-array)",DateStarted:new Date(16942176e5),draft:!1,tags:["Algo"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/recursive-algorithm/two-pointers/26.去除重复元素 (Remove-duplicates-from-sorted-array).md",rawData:void 0},html='<h1 id="26去除重复元素-remove-duplicates-from-sorted-array">26.去除重复元素 (Remove-duplicates-from-sorted-array)<a class="anchor" href="#26去除重复元素-remove-duplicates-from-sorted-array"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="题目要求">题目要求<a class="anchor" href="#题目要求"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>输入<strong>一个升序排列的数组  <code>nums</code></strong> ，要求<strong>原地删除重复出现的元素</strong>，使每个元素只出现一次  ，返回删除后数组的新长度。元素的相对顺序应该保持   一致  。然后返回 <strong><code>nums</code>  中唯一元素的个数</strong>。</p>\n<h4 id="示例">示例：<a class="anchor" href="#示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n\x3c!--SR:!2023-09-15,3,250!2023-09-15,3,250!2023-09-15,3,250--\x3e\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>输入：nums = [0,0,1,1,1,2,2,3,3,4]</span></span>\n<span class="line"><span>输出：5, nums = [0,1,2,3,4]</span></span>\n<span class="line"><span>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span></span>\n<span class="line"><span></span></span></code></pre>\n<h2 id="核心方法"><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95">核心方法</a><a class="anchor" href="#核心方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95#%E5%8F%8C%E6%8C%87%E9%92%88">核心方法 > 双指针</a>：\n<ul>\n<li>利用快指针<strong>遍历数组去重</strong>，慢指针<strong>追踪唯一元素</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id="关键步骤">关键步骤<a class="anchor" href="#关键步骤"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ol>\n<li>变量声明：<strong>快慢指针 slow, fast</strong></li>\n<li>变量初始赋值：<strong>均为 1</strong></li>\n<li>循环：<strong>fast</strong> <code>&#x3C; nums.length</code>，执行循环\n<ul>\n<li>判断： <strong>fast 对应元素</strong> 与 <strong>其前一元素</strong> 是否相等\n<ul>\n<li>若不相等，则赋值 <strong>fast</strong> 对应元素给 <strong>slow</strong> 对应元素，并让 <strong>slow ++</strong></li>\n<li>若相等，则 <strong>fast ++</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>返回：<strong>slow</strong></li>\n</ol>\n<h2 id="代码实现-js">代码实现 (JS)<a class="anchor" href="#代码实现-js"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本方案可满足时间复杂度 <strong>O(n)</strong>，空间复杂度 <strong>O(1)</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// 二版：双指针，利用快指针遍历数组去重，慢指针追踪唯一元素</span></span>\n<span class="line"><span style="color:#F97583">var</span><span style="color:#B392F0"> removeDuplicates</span><span style="color:#F97583"> =</span><span style="color:#F97583"> function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">nums</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">  let</span><span style="color:#E1E4E8"> slow </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> fast </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; fast </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> nums.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; fast</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">    if</span><span style="color:#E1E4E8"> (nums[fast] </span><span style="color:#F97583">!==</span><span style="color:#E1E4E8"> nums[fast </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">      nums[slow] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> nums[fast];</span></span>\n<span class="line"><span style="color:#E1E4E8">      slow</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#E1E4E8"> slow;</span></span>\n<span class="line"></span></code></pre>',frontmatter={tags:["Algo"],draft:!1,LCID:"LC-26",title:"26.去除重复元素 (Remove-duplicates-from-sorted-array)",type:"A",Similar:[[["27.移除元素 (Remove Element)|LC-27"]]],topic:["Array","Two-Pointers"],difficulty:"Easy",Time:"O(n)",Space:"O(1)",Like:!0,Solution:"双指针去重",SourceLink:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array",DateStarted:"2023-09-09T00:00:00.000Z",DateDone:"2023-09-09T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",status:null,aliases:["LC-26"],reviewed:6,Datereviewed:"2024-02-16T16:00:00.000Z",comment:"快慢指针; 注意最短数组长度为 1；与前一个数对比",TimeNeed:"Easy",category:"Programming",minutes:2,words:363},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/recursive-algorithm/two-pointers/26.去除重复元素 (Remove-duplicates-from-sorted-array).md",url=void 0;function rawContent(){return"\n# 26.去除重复元素 (Remove-duplicates-from-sorted-array)\n\n## 题目要求\n\n输入**一个升序排列的数组  `nums`** ，要求**原地删除重复出现的元素**，使每个元素只出现一次  ，返回删除后数组的新长度。元素的相对顺序应该保持   一致  。然后返回 **`nums`  中唯一元素的个数**。\n\n#### 示例：\n\n\x3c!--SR:!2023-09-15,3,250!2023-09-15,3,250!2023-09-15,3,250--\x3e\n\n```\n输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n```\n\n## [核心方法](核心方法)\n\n- [核心方法 > 双指针](核心方法#双指针)：\n  - 利用快指针**遍历数组去重**，慢指针**追踪唯一元素**\n\n## 关键步骤\n\n1. 变量声明：**快慢指针 slow, fast**\n2. 变量初始赋值：**均为 1**\n3. 循环：**fast** `< nums.length`，执行循环\n   - 判断： **fast 对应元素** 与 **其前一元素** 是否相等\n     - 若不相等，则赋值 **fast** 对应元素给 **slow** 对应元素，并让 **slow ++**\n     - 若相等，则 **fast ++**\n4. 返回：**slow**\n\n## 代码实现 (JS)\n\n本方案可满足时间复杂度 **O(n)**，空间复杂度 **O(1)**\n\n```js\n// 二版：双指针，利用快指针遍历数组去重，慢指针追踪唯一元素\nvar removeDuplicates = function (nums) {\n  let slow = 1;\n  for (let fast = 1; fast < nums.length; fast++) {\n    if (nums[fast] !== nums[fast - 1]) {\n      nums[slow] = nums[fast];\n      slow++;\n    }\n  }\n  return slow;\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"26去除重复元素-remove-duplicates-from-sorted-array",text:"26.去除重复元素 (Remove-duplicates-from-sorted-array)#"},{depth:2,slug:"题目要求",text:"题目要求#"},{depth:4,slug:"示例",text:"示例：#"},{depth:2,slug:"核心方法",text:"核心方法#"},{depth:2,slug:"关键步骤",text:"关键步骤#"},{depth:2,slug:"代码实现-js",text:"代码实现 (JS)#"}]}const Content=createComponent(((n,s,a)=>{const{layout:o,...e}=frontmatter;return e.file=file,e.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),_26_________RemoveDuplicatesFromSortedArray_=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_26_________RemoveDuplicatesFromSortedArray_,_internal,body,collection,data,id,slug};