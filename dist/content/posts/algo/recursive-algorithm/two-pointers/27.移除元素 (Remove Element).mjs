import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="algo/recursive-algorithm/two-pointers/27.移除元素 (Remove Element).md",collection="posts",slug="algo/recursive-algorithm/two-pointers/27移除元素-remove-element",body="\n# 27.移除元素 (Remove Element)\n\n## 题目要求\n\n本题要求**原地移除所有数值等于  `val`  的元素**，并返回**移除后数组的新长度**。必须仅使用 `O(1)` 额外空间并原地修改输入数组。\n\n#### 示例：\n\n## [核心方法](核心方法)\n\n- [核心方法 > 双指针](核心方法#双指针)\n  - 法一：利用快指针**向右遍历数组去除给定值**，慢指针保留不等元素\n  - 法二：利用左右指针**相向遍历数组去除给定值**，左指针保留不等元素\n\n## 关键步骤\n\n1. 变量声明：**左右指针 left, right**\n2. 变量初始赋值：**left = 0, right = nums. Length**\n3. 循环：**left < right**，执行循环\n   - 判断： **左指针对应元素** 与 **val** 是否相等\n     - 若相等，则赋值 **right-1** 对应元素给 **left** 对应元素，并**将右指针左移 right --**\n     - 若不相等，则 **left ++**\n4. 返回：**left**\n\n## 代码实现 (JS)\n\n本方案可满足时间复杂度 **O(n)**，空间复杂度 **O(1)**\n\n#### 二版\n\n> 两个指针在最坏的情况下合起来只遍历了数组一次，会改变元素原有位置\n\n```js\nvar removeElement = function (nums, val) {\n\tlet left = 0,\n\t\tright = nums.length;\n\twhile (left < right) {\n\t\tif (nums[left] === val) {\n\t\t\tnums[left] = nums[right - 1];\n\t\t\tright--;\n\t\t} else {\n\t\t\tleft++;\n\t\t}\n\t}\n\treturn left;\n};\n```\n\n#### 一版\n\n> 快慢指针各遍历了数组一次\n\n```js\nvar removeElement = function (nums, val) {\n\tlet slow = 0; // 依次对比 val 与数组元素的值\n\tfor (let fast = 0; fast < nums.length; fast++) {\n\t\tif (nums[fast] !== val) {\n\t\t\tnums[slow] = nums[fast];\n\t\t\tslow++;\n\t\t}\n\t} // 返回数组长度\n\treturn slow;\n};\n```\n",data={title:"27.移除元素 (Remove Element)",DateStarted:new Date(16942176e5),draft:!1,tags:["Algo"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/recursive-algorithm/two-pointers/27.移除元素 (Remove Element).md",rawData:void 0},html='<h1 id="27移除元素-remove-element">27.移除元素 (Remove Element)<a class="anchor" href="#27移除元素-remove-element"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="题目要求">题目要求<a class="anchor" href="#题目要求"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本题要求<strong>原地移除所有数值等于  <code>val</code>  的元素</strong>，并返回<strong>移除后数组的新长度</strong>。必须仅使用 <code>O(1)</code> 额外空间并原地修改输入数组。</p>\n<h4 id="示例">示例：<a class="anchor" href="#示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h2 id="核心方法"><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95">核心方法</a><a class="anchor" href="#核心方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95#%E5%8F%8C%E6%8C%87%E9%92%88">核心方法 > 双指针</a>\n<ul>\n<li>法一：利用快指针<strong>向右遍历数组去除给定值</strong>，慢指针保留不等元素</li>\n<li>法二：利用左右指针<strong>相向遍历数组去除给定值</strong>，左指针保留不等元素</li>\n</ul>\n</li>\n</ul>\n<h2 id="关键步骤">关键步骤<a class="anchor" href="#关键步骤"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ol>\n<li>变量声明：<strong>左右指针 left, right</strong></li>\n<li>变量初始赋值：<strong>left = 0, right = nums. Length</strong></li>\n<li>循环：<strong>left &#x3C; right</strong>，执行循环\n<ul>\n<li>判断： <strong>左指针对应元素</strong> 与 <strong>val</strong> 是否相等\n<ul>\n<li>若相等，则赋值 <strong>right-1</strong> 对应元素给 <strong>left</strong> 对应元素，并<strong>将右指针左移 right —</strong></li>\n<li>若不相等，则 <strong>left ++</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>返回：<strong>left</strong></li>\n</ol>\n<h2 id="代码实现-js">代码实现 (JS)<a class="anchor" href="#代码实现-js"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本方案可满足时间复杂度 <strong>O(n)</strong>，空间复杂度 <strong>O(1)</strong></p>\n<h4 id="二版">二版<a class="anchor" href="#二版"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>两个指针在最坏的情况下合起来只遍历了数组一次，会改变元素原有位置</p>\n</blockquote>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">var</span><span style="color:#B392F0"> removeElement</span><span style="color:#F97583"> =</span><span style="color:#F97583"> function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">nums</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">val</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tright </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> nums.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> right) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (nums[left] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> val) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tnums[left] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> nums[right </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tright</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> left;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h4 id="一版">一版<a class="anchor" href="#一版"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>快慢指针各遍历了数组一次</p>\n</blockquote>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">var</span><span style="color:#B392F0"> removeElement</span><span style="color:#F97583"> =</span><span style="color:#F97583"> function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">nums</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">val</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> slow </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; </span><span style="color:#6A737D">// 依次对比 val 与数组元素的值</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> fast </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; fast </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> nums.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; fast</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (nums[fast] </span><span style="color:#F97583">!==</span><span style="color:#E1E4E8"> val) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tnums[slow] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> nums[fast];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tslow</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#6A737D">// 返回数组长度</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> slow;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>',frontmatter={tags:["Algo"],category:"Programming",draft:!1,LCID:"LC-27",title:"27.移除元素 (Remove Element)",type:"A",Similar:[[["26.去除重复元素 (Remove-duplicates-from-sorted-array)|LC-26"]]],topic:["Array","Two-Pointers"],difficulty:"Easy",Time:"O(n)",Space:"O(1)",Like:null,Solution:"双指针去目标值",SourceLink:"https://leetcode.cn/problems/remove-element/",DateStarted:"2023-09-09T00:00:00.000Z",DateDone:"2023-09-09T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",status:null,aliases:["LC-27"],reviewed:7,Datereviewed:"2024-02-16T16:00:00.000Z",comment:"快慢指针",TimeNeed:"Easy",minutes:2,words:379},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/recursive-algorithm/two-pointers/27.移除元素 (Remove Element).md",url=void 0;function rawContent(){return"\n# 27.移除元素 (Remove Element)\n\n## 题目要求\n\n本题要求**原地移除所有数值等于  `val`  的元素**，并返回**移除后数组的新长度**。必须仅使用 `O(1)` 额外空间并原地修改输入数组。\n\n#### 示例：\n\n## [核心方法](核心方法)\n\n- [核心方法 > 双指针](核心方法#双指针)\n  - 法一：利用快指针**向右遍历数组去除给定值**，慢指针保留不等元素\n  - 法二：利用左右指针**相向遍历数组去除给定值**，左指针保留不等元素\n\n## 关键步骤\n\n1. 变量声明：**左右指针 left, right**\n2. 变量初始赋值：**left = 0, right = nums. Length**\n3. 循环：**left < right**，执行循环\n   - 判断： **左指针对应元素** 与 **val** 是否相等\n     - 若相等，则赋值 **right-1** 对应元素给 **left** 对应元素，并**将右指针左移 right --**\n     - 若不相等，则 **left ++**\n4. 返回：**left**\n\n## 代码实现 (JS)\n\n本方案可满足时间复杂度 **O(n)**，空间复杂度 **O(1)**\n\n#### 二版\n\n> 两个指针在最坏的情况下合起来只遍历了数组一次，会改变元素原有位置\n\n```js\nvar removeElement = function (nums, val) {\n\tlet left = 0,\n\t\tright = nums.length;\n\twhile (left < right) {\n\t\tif (nums[left] === val) {\n\t\t\tnums[left] = nums[right - 1];\n\t\t\tright--;\n\t\t} else {\n\t\t\tleft++;\n\t\t}\n\t}\n\treturn left;\n};\n```\n\n#### 一版\n\n> 快慢指针各遍历了数组一次\n\n```js\nvar removeElement = function (nums, val) {\n\tlet slow = 0; // 依次对比 val 与数组元素的值\n\tfor (let fast = 0; fast < nums.length; fast++) {\n\t\tif (nums[fast] !== val) {\n\t\t\tnums[slow] = nums[fast];\n\t\t\tslow++;\n\t\t}\n\t} // 返回数组长度\n\treturn slow;\n};\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"27移除元素-remove-element",text:"27.移除元素 (Remove Element)#"},{depth:2,slug:"题目要求",text:"题目要求#"},{depth:4,slug:"示例",text:"示例：#"},{depth:2,slug:"核心方法",text:"核心方法#"},{depth:2,slug:"关键步骤",text:"关键步骤#"},{depth:2,slug:"代码实现-js",text:"代码实现 (JS)#"},{depth:4,slug:"二版",text:"二版#"},{depth:4,slug:"一版",text:"一版#"}]}const Content=createComponent(((n,s,t)=>{const{layout:e,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),_27_______Remove_Element_=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_27_______Remove_Element_,_internal,body,collection,data,id,slug};