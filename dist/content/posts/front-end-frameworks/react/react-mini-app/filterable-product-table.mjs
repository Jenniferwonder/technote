import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726310608649/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/react-mini-app/filterable-product-table.md",collection="posts",slug="front-end-frameworks/react/react-mini-app/filterable-product-table",body="# Build a Filterable Product Table\n\n### Step 1: Break the UI into a component hierarchy\n\n#### Splitting up a design into components\n\n- ![split-up-design](https://react.dev/images/docs/s_thinking-in-react_ui_outline.png)\n- Start by drawing boxes around every component and subcomponent in the mockup and naming them.\n- each component matches one piece of your data model\n\n#### Different Approaches\n\n- _Programming_â€”use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n- _CSS_â€”consider what you would make class selectors for. (However, components are a bit less granular.)\n- _Design_â€”consider how you would organize the design's layers.\n\n### Step 2: Build a static version in React\n\n#### build a version that renders the UI from your data model without adding any interactivity\n\n- Building a static version requires a lot of typing and no thinking\n- adding interactivity requires a lot of thinking and not a lot of typing\n- ðŸ“Œ`StaticApp.jsx`\n\n#### don't use state at all to build this static version\n- State is reserved only for interactivity\n\n#### top down\n- For simpler examples\n\n#### bottom-up\n- For larger projects\n\n#### _one-way data flow_\n\n- the data flows down from the top-level component to the ones at the bottom of the tree\n\n### Step 3: Find the minimal but complete representation of UI state\n- The search text\n- The value of the checkbox\n### Step 4: Identify where your state should live\n\n### Step 5: Add inverse data flow\n\n- ðŸ“Œ`ProductApp.jsx`",data={title:"Build a Filterable Product Table",DateStarted:new Date(17133984e5),draft:!0,tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/react-mini-app/filterable-product-table.md",rawData:void 0},html='<h1 id="build-a-filterable-product-table">Build a Filterable Product Table<a class="anchor" href="#build-a-filterable-product-table"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h3 id="step-1-break-the-ui-into-a-component-hierarchy">Step 1: Break the UI into a component hierarchy<a class="anchor" href="#step-1-break-the-ui-into-a-component-hierarchy"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="splitting-up-a-design-into-components">Splitting up a design into components<a class="anchor" href="#splitting-up-a-design-into-components"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><img src="https://react.dev/images/docs/s_thinking-in-react_ui_outline.png" alt="split-up-design"></li>\n<li>Start by drawing boxes around every component and subcomponent in the mockup and naming them.</li>\n<li>each component matches one piece of your data model</li>\n</ul>\n<h4 id="different-approaches">Different Approaches<a class="anchor" href="#different-approaches"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><em>Programming</em>â€”use the same techniques for deciding if you should create a new function or object. One such technique is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility principle</a>, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.</li>\n<li><em>CSS</em>â€”consider what you would make class selectors for. (However, components are a bit less granular.)</li>\n<li><em>Design</em>â€”consider how you would organize the designâ€™s layers.</li>\n</ul>\n<h3 id="step-2-build-a-static-version-in-react">Step 2: Build a static version in React<a class="anchor" href="#step-2-build-a-static-version-in-react"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="build-a-version-that-renders-the-ui-from-your-data-model-without-adding-any-interactivity">build a version that renders the UI from your data model without adding any interactivity<a class="anchor" href="#build-a-version-that-renders-the-ui-from-your-data-model-without-adding-any-interactivity"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Building a static version requires a lot of typing and no thinking</li>\n<li>adding interactivity requires a lot of thinking and not a lot of typing</li>\n<li>ðŸ“Œ<code>StaticApp.jsx</code></li>\n</ul>\n<h4 id="dont-use-state-at-all-to-build-this-static-version">donâ€™t use state at all to build this static version<a class="anchor" href="#dont-use-state-at-all-to-build-this-static-version"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>State is reserved only for interactivity</li>\n</ul>\n<h4 id="top-down">top down<a class="anchor" href="#top-down"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>For simpler examples</li>\n</ul>\n<h4 id="bottom-up">bottom-up<a class="anchor" href="#bottom-up"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>For larger projects</li>\n</ul>\n<h4 id="one-way-data-flow"><em>one-way data flow</em><a class="anchor" href="#one-way-data-flow"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>the data flows down from the top-level component to the ones at the bottom of the tree</li>\n</ul>\n<h3 id="step-3-find-the-minimal-but-complete-representation-of-ui-state">Step 3: Find the minimal but complete representation of UI state<a class="anchor" href="#step-3-find-the-minimal-but-complete-representation-of-ui-state"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>The search text</li>\n<li>The value of the checkbox</li>\n</ul>\n<h3 id="step-4-identify-where-your-state-should-live">Step 4: Identify where your state should live<a class="anchor" href="#step-4-identify-where-your-state-should-live"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="step-5-add-inverse-data-flow">Step 5: Add inverse data flow<a class="anchor" href="#step-5-add-inverse-data-flow"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>ðŸ“Œ<code>ProductApp.jsx</code></li>\n</ul>',frontmatter={title:"Build a Filterable Product Table",topic:null,type:"D",tags:["React"],category:"Front-End Frameworks",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["Build a Filterable Product Table"],DateStarted:"2024-04-18T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z","linter-yaml-title-alias":"Build a Filterable Product Table",draft:!0,minutes:1,words:215},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/react-mini-app/filterable-product-table.md",url=void 0;function rawContent(){return"# Build a Filterable Product Table\n\n### Step 1: Break the UI into a component hierarchy\n\n#### Splitting up a design into components\n\n- ![split-up-design](https://react.dev/images/docs/s_thinking-in-react_ui_outline.png)\n- Start by drawing boxes around every component and subcomponent in the mockup and naming them.\n- each component matches one piece of your data model\n\n#### Different Approaches\n\n- _Programming_â€”use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n- _CSS_â€”consider what you would make class selectors for. (However, components are a bit less granular.)\n- _Design_â€”consider how you would organize the design's layers.\n\n### Step 2: Build a static version in React\n\n#### build a version that renders the UI from your data model without adding any interactivity\n\n- Building a static version requires a lot of typing and no thinking\n- adding interactivity requires a lot of thinking and not a lot of typing\n- ðŸ“Œ`StaticApp.jsx`\n\n#### don't use state at all to build this static version\n- State is reserved only for interactivity\n\n#### top down\n- For simpler examples\n\n#### bottom-up\n- For larger projects\n\n#### _one-way data flow_\n\n- the data flows down from the top-level component to the ones at the bottom of the tree\n\n### Step 3: Find the minimal but complete representation of UI state\n- The search text\n- The value of the checkbox\n### Step 4: Identify where your state should live\n\n### Step 5: Add inverse data flow\n\n- ðŸ“Œ`ProductApp.jsx`"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"build-a-filterable-product-table",text:"Build a Filterable Product Table#"},{depth:3,slug:"step-1-break-the-ui-into-a-component-hierarchy",text:"Step 1: Break the UI into a component hierarchy#"},{depth:4,slug:"splitting-up-a-design-into-components",text:"Splitting up a design into components#"},{depth:4,slug:"different-approaches",text:"Different Approaches#"},{depth:3,slug:"step-2-build-a-static-version-in-react",text:"Step 2: Build a static version in React#"},{depth:4,slug:"build-a-version-that-renders-the-ui-from-your-data-model-without-adding-any-interactivity",text:"build a version that renders the UI from your data model without adding any interactivity#"},{depth:4,slug:"dont-use-state-at-all-to-build-this-static-version",text:"donâ€™t use state at all to build this static version#"},{depth:4,slug:"top-down",text:"top down#"},{depth:4,slug:"bottom-up",text:"bottom-up#"},{depth:4,slug:"one-way-data-flow",text:"one-way data flow#"},{depth:3,slug:"step-3-find-the-minimal-but-complete-representation-of-ui-state",text:"Step 3: Find the minimal but complete representation of UI state#"},{depth:3,slug:"step-4-identify-where-your-state-should-live",text:"Step 4: Identify where your state should live#"},{depth:3,slug:"step-5-add-inverse-data-flow",text:"Step 5: Add inverse data flow#"}]}const Content=createComponent(((e,t,n)=>{const{layout:a,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),filterableProductTable=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,filterableProductTable,id,slug};