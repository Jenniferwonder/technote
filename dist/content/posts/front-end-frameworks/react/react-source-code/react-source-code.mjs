import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/react-source-code/react-source-code.md",collection="posts",slug="front-end-frameworks/react/react-source-code/react-source-code",body="\n# React Source Code\n\n## Reverse Engineering\n\n[in Depth-level-up-your-reverse-engineering-skills](https://angularindepth.com/posts/1005/level-up-your-reverse-engineering-skills)  \n[in Depth-practical-application-of-reverse-engineering-guidelines-and-principles](https://angularindepth.com/posts/1006/practical-application-of-reverse-engineering-guidelines-and-principles)\n\n## Virtual DOM\n\n- [in Depth-how-virtual-dom-is-implemented-in-react](https://angularindepth.com/posts/1501/exploring-how-virtual-dom-is-implemented-in-react)\n\n## Fiber\n\n- [Inside Fiber: in-depth overview of the new reconciliation algorithm in React | by Max Koretskyi | React In Depth | Medium](https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e)\n- [in Depth-inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react](https://angularindepth.com/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react)\n- [in Depth-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree](https://angularindepth.com/posts/1007/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree)\n\n## Questions\n\n#### [你阅读了几遍 React 的源码？都有哪些收获？你是怎么阅读的？](https://github.com/haizlin/fe-interview/issues/879)\n\n#### [你阅读过 React 的源码吗？简要说下它的执行流程](https://github.com/haizlin/fe-interview/issues/654)\n\n#### [React Fiber 它的目的是解决什么问题？](https://github.com/haizlin/fe-interview/issues/858)\n\n#### [说说你对 Fiber 架构的理解](https://github.com/haizlin/fe-interview/issues/700)\n\n#### [说说 React diff 的原理是什么？](https://github.com/haizlin/fe-interview/issues/724)\n\n#### [你知道 Virtual DOM 的工作原理吗？](https://github.com/haizlin/fe-interview/issues/655)\n\n#### [为何说虚拟 DOM 会提高性能？](https://github.com/haizlin/fe-interview/issues/720)\n\n#### [React 的虚拟 DOM 和 vue 的虚拟 DOM 有什么区别？](https://github.com/haizlin/fe-interview/issues/617)\n\n#### [React 怎么拿到组件对应的 DOM 元素？](https://github.com/haizlin/fe-interview/issues/663)\n\n#### [说说你对 React 的 reconciliation（一致化算法）的理解](https://github.com/haizlin/fe-interview/issues/870)\n\n#### [React16 的 reconciliation 和 commit 分别是什么？](https://github.com/haizlin/fe-interview/issues/711)\n\n#### [简要描述下你知道的 React 工作原理是什么？](https://github.com/haizlin/fe-interview/issues/611)\n",data={title:"React Source Code",DateStarted:new Date(1712016e6),draft:!0,tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/react-source-code/react-source-code.md",rawData:void 0},html='<h1 id="react-source-code">React Source Code<a class="anchor" href="#react-source-code"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="reverse-engineering">Reverse Engineering<a class="anchor" href="#reverse-engineering"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="https://angularindepth.com/posts/1005/level-up-your-reverse-engineering-skills">in Depth-level-up-your-reverse-engineering-skills</a><br>\n<a href="https://angularindepth.com/posts/1006/practical-application-of-reverse-engineering-guidelines-and-principles">in Depth-practical-application-of-reverse-engineering-guidelines-and-principles</a></p>\n<h2 id="virtual-dom">Virtual DOM<a class="anchor" href="#virtual-dom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://angularindepth.com/posts/1501/exploring-how-virtual-dom-is-implemented-in-react">in Depth-how-virtual-dom-is-implemented-in-react</a></li>\n</ul>\n<h2 id="fiber">Fiber<a class="anchor" href="#fiber"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e">Inside Fiber: in-depth overview of the new reconciliation algorithm in React | by Max Koretskyi | React In Depth | Medium</a></li>\n<li><a href="https://angularindepth.com/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react">in Depth-inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react</a></li>\n<li><a href="https://angularindepth.com/posts/1007/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree">in Depth-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree</a></li>\n</ul>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="你阅读了几遍-react-的源码都有哪些收获你是怎么阅读的"><a href="https://github.com/haizlin/fe-interview/issues/879">你阅读了几遍 React 的源码？都有哪些收获？你是怎么阅读的？</a><a class="anchor" href="#你阅读了几遍-react-的源码都有哪些收获你是怎么阅读的"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="你阅读过-react-的源码吗简要说下它的执行流程"><a href="https://github.com/haizlin/fe-interview/issues/654">你阅读过 React 的源码吗？简要说下它的执行流程</a><a class="anchor" href="#你阅读过-react-的源码吗简要说下它的执行流程"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-fiber-它的目的是解决什么问题"><a href="https://github.com/haizlin/fe-interview/issues/858">React Fiber 它的目的是解决什么问题？</a><a class="anchor" href="#react-fiber-它的目的是解决什么问题"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说你对-fiber-架构的理解"><a href="https://github.com/haizlin/fe-interview/issues/700">说说你对 Fiber 架构的理解</a><a class="anchor" href="#说说你对-fiber-架构的理解"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说-react-diff-的原理是什么"><a href="https://github.com/haizlin/fe-interview/issues/724">说说 React diff 的原理是什么？</a><a class="anchor" href="#说说-react-diff-的原理是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="你知道-virtual-dom-的工作原理吗"><a href="https://github.com/haizlin/fe-interview/issues/655">你知道 Virtual DOM 的工作原理吗？</a><a class="anchor" href="#你知道-virtual-dom-的工作原理吗"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="为何说虚拟-dom-会提高性能"><a href="https://github.com/haizlin/fe-interview/issues/720">为何说虚拟 DOM 会提高性能？</a><a class="anchor" href="#为何说虚拟-dom-会提高性能"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-的虚拟-dom-和-vue-的虚拟-dom-有什么区别"><a href="https://github.com/haizlin/fe-interview/issues/617">React 的虚拟 DOM 和 vue 的虚拟 DOM 有什么区别？</a><a class="anchor" href="#react-的虚拟-dom-和-vue-的虚拟-dom-有什么区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-怎么拿到组件对应的-dom-元素"><a href="https://github.com/haizlin/fe-interview/issues/663">React 怎么拿到组件对应的 DOM 元素？</a><a class="anchor" href="#react-怎么拿到组件对应的-dom-元素"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说你对-react-的-reconciliation一致化算法的理解"><a href="https://github.com/haizlin/fe-interview/issues/870">说说你对 React 的 reconciliation（一致化算法）的理解</a><a class="anchor" href="#说说你对-react-的-reconciliation一致化算法的理解"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react16-的-reconciliation-和-commit-分别是什么"><a href="https://github.com/haizlin/fe-interview/issues/711">React16 的 reconciliation 和 commit 分别是什么？</a><a class="anchor" href="#react16-的-reconciliation-和-commit-分别是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="简要描述下你知道的-react-工作原理是什么"><a href="https://github.com/haizlin/fe-interview/issues/611">简要描述下你知道的 React 工作原理是什么？</a><a class="anchor" href="#简要描述下你知道的-react-工作原理是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={category:"Front-End Frameworks",topic:null,type:null,tags:["React"],DateStarted:"2024-04-02T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,title:"React Source Code",aliases:["React Source Code","React Source Code"],"linter-yaml-title-alias":"React Source Code",draft:!0,minutes:1,words:198},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/react-source-code/react-source-code.md",url=void 0;function rawContent(){return"\n# React Source Code\n\n## Reverse Engineering\n\n[in Depth-level-up-your-reverse-engineering-skills](https://angularindepth.com/posts/1005/level-up-your-reverse-engineering-skills)  \n[in Depth-practical-application-of-reverse-engineering-guidelines-and-principles](https://angularindepth.com/posts/1006/practical-application-of-reverse-engineering-guidelines-and-principles)\n\n## Virtual DOM\n\n- [in Depth-how-virtual-dom-is-implemented-in-react](https://angularindepth.com/posts/1501/exploring-how-virtual-dom-is-implemented-in-react)\n\n## Fiber\n\n- [Inside Fiber: in-depth overview of the new reconciliation algorithm in React | by Max Koretskyi | React In Depth | Medium](https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e)\n- [in Depth-inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react](https://angularindepth.com/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react)\n- [in Depth-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree](https://angularindepth.com/posts/1007/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree)\n\n## Questions\n\n#### [你阅读了几遍 React 的源码？都有哪些收获？你是怎么阅读的？](https://github.com/haizlin/fe-interview/issues/879)\n\n#### [你阅读过 React 的源码吗？简要说下它的执行流程](https://github.com/haizlin/fe-interview/issues/654)\n\n#### [React Fiber 它的目的是解决什么问题？](https://github.com/haizlin/fe-interview/issues/858)\n\n#### [说说你对 Fiber 架构的理解](https://github.com/haizlin/fe-interview/issues/700)\n\n#### [说说 React diff 的原理是什么？](https://github.com/haizlin/fe-interview/issues/724)\n\n#### [你知道 Virtual DOM 的工作原理吗？](https://github.com/haizlin/fe-interview/issues/655)\n\n#### [为何说虚拟 DOM 会提高性能？](https://github.com/haizlin/fe-interview/issues/720)\n\n#### [React 的虚拟 DOM 和 vue 的虚拟 DOM 有什么区别？](https://github.com/haizlin/fe-interview/issues/617)\n\n#### [React 怎么拿到组件对应的 DOM 元素？](https://github.com/haizlin/fe-interview/issues/663)\n\n#### [说说你对 React 的 reconciliation（一致化算法）的理解](https://github.com/haizlin/fe-interview/issues/870)\n\n#### [React16 的 reconciliation 和 commit 分别是什么？](https://github.com/haizlin/fe-interview/issues/711)\n\n#### [简要描述下你知道的 React 工作原理是什么？](https://github.com/haizlin/fe-interview/issues/611)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"react-source-code",text:"React Source Code#"},{depth:2,slug:"reverse-engineering",text:"Reverse Engineering#"},{depth:2,slug:"virtual-dom",text:"Virtual DOM#"},{depth:2,slug:"fiber",text:"Fiber#"},{depth:2,slug:"questions",text:"Questions#"},{depth:4,slug:"你阅读了几遍-react-的源码都有哪些收获你是怎么阅读的",text:"你阅读了几遍 React 的源码？都有哪些收获？你是怎么阅读的？#"},{depth:4,slug:"你阅读过-react-的源码吗简要说下它的执行流程",text:"你阅读过 React 的源码吗？简要说下它的执行流程#"},{depth:4,slug:"react-fiber-它的目的是解决什么问题",text:"React Fiber 它的目的是解决什么问题？#"},{depth:4,slug:"说说你对-fiber-架构的理解",text:"说说你对 Fiber 架构的理解#"},{depth:4,slug:"说说-react-diff-的原理是什么",text:"说说 React diff 的原理是什么？#"},{depth:4,slug:"你知道-virtual-dom-的工作原理吗",text:"你知道 Virtual DOM 的工作原理吗？#"},{depth:4,slug:"为何说虚拟-dom-会提高性能",text:"为何说虚拟 DOM 会提高性能？#"},{depth:4,slug:"react-的虚拟-dom-和-vue-的虚拟-dom-有什么区别",text:"React 的虚拟 DOM 和 vue 的虚拟 DOM 有什么区别？#"},{depth:4,slug:"react-怎么拿到组件对应的-dom-元素",text:"React 怎么拿到组件对应的 DOM 元素？#"},{depth:4,slug:"说说你对-react-的-reconciliation一致化算法的理解",text:"说说你对 React 的 reconciliation（一致化算法）的理解#"},{depth:4,slug:"react16-的-reconciliation-和-commit-分别是什么",text:"React16 的 reconciliation 和 commit 分别是什么？#"},{depth:4,slug:"简要描述下你知道的-react-工作原理是什么",text:"简要描述下你知道的 React 工作原理是什么？#"}]}const Content=createComponent(((e,i,t)=>{const{layout:n,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),reactSourceCode=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,reactSourceCode,slug};