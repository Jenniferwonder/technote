import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726310608649/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/state-management/useContext.md",collection="posts",slug="front-end-frameworks/react/state-management/usecontext",body="\n# React `useContext` and Context API\n\n> [Passing Data Deeply with Context – React](https://react.dev/learn/passing-data-deeply-with-context) >[useContext – React](https://react.dev/reference/react/useContext)\n\n## `useContext`\n\n### Why\n\na React Hook lets you read and subscribe to [context](https://react.dev/learn/passing-data-deeply-with-context) from your component.  \n_Context_ lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props\n\n### Basics\n\n`const value = useContext(SomeContext)`\n\n#### createContext()\n\n```jsx\nimport { createContext } from \"react\";\nconst ThemeContext = createContext(\"light\");\n```\n\n#### useContext()\n\n```jsx\nimport { useContext } from 'react';\nfunction MyComponent() {\n\tconst theme = useContext(ThemeContext);\n```\n\n#### Parameter\n\n`SomeContext`\n\n- The context that you've previously created with [`createContext`](https://react.dev/reference/react/createContext)(a React API).\n- it only represents the kind of information you can provide or read from components\n\n#### Return\n\n`useContext` returns the context value for the calling component.\n\n- It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree\n- `useContext()` call in a component is not affected by providers returned from the *same* component. The corresponding `<Context.Provider>` **needs to be above** the component doing the `useContext()` call\n\n### Use Case\n\n#### Updating a value via context\n\n📌 ThemeContextApp.jsx\n\n#### Updating an object via context\n\n📌 CurrentUser.jsx\n\n#### Multiple Context\n\n📌 MultiContext.jsx\n\n#### Extract Context\n\n📌 ExtractContext.jsx\n\n#### Specifying a fallback default value\n\n`const ThemeContext = createContext('light');`\n\n#### Override a theme\n\n📌 OverrideContext.jsx\n\n## `createContext()` API\n\n### Parameter\n\n### Return\n\n## Questions\n\n#### [怎么使用 Context 开发组件？](https://github.com/haizlin/fe-interview/issues/944)\n\n#### [在 React 怎么使用 Context？](https://github.com/haizlin/fe-interview/issues/937)\n\n#### [为什么 React 并不推荐我们优先考虑使用 Context？](https://github.com/haizlin/fe-interview/issues/943)\n\n#### [说说 Context 有哪些属性？](https://github.com/haizlin/fe-interview/issues/945)\n\n#### [除了实例的属性可以获取 Context 外哪些地方还能直接获取 Context 呢？](https://github.com/haizlin/fe-interview/issues/942)\n\n#### [childContextTypes 是什么？它有什么用？](https://github.com/haizlin/fe-interview/issues/941)\n\n#### [contextType 是什么？它有什么用？](https://github.com/haizlin/fe-interview/issues/940)\n\n#### [Consumer 向上找不到 Provider 的时候怎么办？](https://github.com/haizlin/fe-interview/issues/939)\n\n#### [有使用过 Consumer 吗？](https://github.com/haizlin/fe-interview/issues/938)\n\n#### [Context api 可以取代 Redux 吗？为什么？](https://github.com/haizlin/fe-interview/issues/916)\n",data={title:"React `useContext` and Context API",DateStarted:new Date(17054496e5),tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/state-management/useContext.md",rawData:void 0},html='<h1 id="react-usecontext-and-context-api">React <code>useContext</code> and Context API<a class="anchor" href="#react-usecontext-and-context-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p><a href="https://react.dev/learn/passing-data-deeply-with-context">Passing Data Deeply with Context – React</a> ><a href="https://react.dev/reference/react/useContext">useContext – React</a></p>\n</blockquote>\n<h2 id="usecontext"><code>useContext</code><a class="anchor" href="#usecontext"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="why">Why<a class="anchor" href="#why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>a React Hook lets you read and subscribe to <a href="https://react.dev/learn/passing-data-deeply-with-context">context</a> from your component.<br>\n<em>Context</em> lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props</p>\n<h3 id="basics">Basics<a class="anchor" href="#basics"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>const value = useContext(SomeContext)</code></p>\n<h4 id="createcontext">createContext()<a class="anchor" href="#createcontext"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { createContext } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "react"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> ThemeContext</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> createContext</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"light"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="usecontext-1">useContext()<a class="anchor" href="#usecontext-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { useContext } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> MyComponent</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> theme</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useContext</span><span style="color:#E1E4E8">(ThemeContext);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="parameter">Parameter<a class="anchor" href="#parameter"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>SomeContext</code></p>\n<ul>\n<li>The context that you’ve previously created with <a href="https://react.dev/reference/react/createContext"><code>createContext</code></a>(a React API).</li>\n<li>it only represents the kind of information you can provide or read from components</li>\n</ul>\n<h4 id="return">Return<a class="anchor" href="#return"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>useContext</code> returns the context value for the calling component.</p>\n<ul>\n<li>It is determined as the <code>value</code> passed to the closest <code>SomeContext.Provider</code> above the calling component in the tree</li>\n<li><code>useContext()</code> call in a component is not affected by providers returned from the <em>same</em> component. The corresponding <code>&#x3C;Context.Provider></code> <strong>needs to be above</strong> the component doing the <code>useContext()</code> call</li>\n</ul>\n<h3 id="use-case">Use Case<a class="anchor" href="#use-case"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="updating-a-value-via-context">Updating a value via context<a class="anchor" href="#updating-a-value-via-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>📌 ThemeContextApp.jsx</p>\n<h4 id="updating-an-object-via-context">Updating an object via context<a class="anchor" href="#updating-an-object-via-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>📌 CurrentUser.jsx</p>\n<h4 id="multiple-context">Multiple Context<a class="anchor" href="#multiple-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>📌 MultiContext.jsx</p>\n<h4 id="extract-context">Extract Context<a class="anchor" href="#extract-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>📌 ExtractContext.jsx</p>\n<h4 id="specifying-a-fallback-default-value">Specifying a fallback default value<a class="anchor" href="#specifying-a-fallback-default-value"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>const ThemeContext = createContext(\'light\');</code></p>\n<h4 id="override-a-theme">Override a theme<a class="anchor" href="#override-a-theme"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>📌 OverrideContext.jsx</p>\n<h2 id="createcontext-api"><code>createContext()</code> API<a class="anchor" href="#createcontext-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="parameter-1">Parameter<a class="anchor" href="#parameter-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="return-1">Return<a class="anchor" href="#return-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="怎么使用-context-开发组件"><a href="https://github.com/haizlin/fe-interview/issues/944">怎么使用 Context 开发组件？</a><a class="anchor" href="#怎么使用-context-开发组件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="在-react-怎么使用-context"><a href="https://github.com/haizlin/fe-interview/issues/937">在 React 怎么使用 Context？</a><a class="anchor" href="#在-react-怎么使用-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="为什么-react-并不推荐我们优先考虑使用-context"><a href="https://github.com/haizlin/fe-interview/issues/943">为什么 React 并不推荐我们优先考虑使用 Context？</a><a class="anchor" href="#为什么-react-并不推荐我们优先考虑使用-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说-context-有哪些属性"><a href="https://github.com/haizlin/fe-interview/issues/945">说说 Context 有哪些属性？</a><a class="anchor" href="#说说-context-有哪些属性"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="除了实例的属性可以获取-context-外哪些地方还能直接获取-context-呢"><a href="https://github.com/haizlin/fe-interview/issues/942">除了实例的属性可以获取 Context 外哪些地方还能直接获取 Context 呢？</a><a class="anchor" href="#除了实例的属性可以获取-context-外哪些地方还能直接获取-context-呢"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="childcontexttypes-是什么它有什么用"><a href="https://github.com/haizlin/fe-interview/issues/941">childContextTypes 是什么？它有什么用？</a><a class="anchor" href="#childcontexttypes-是什么它有什么用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="contexttype-是什么它有什么用"><a href="https://github.com/haizlin/fe-interview/issues/940">contextType 是什么？它有什么用？</a><a class="anchor" href="#contexttype-是什么它有什么用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="consumer-向上找不到-provider-的时候怎么办"><a href="https://github.com/haizlin/fe-interview/issues/939">Consumer 向上找不到 Provider 的时候怎么办？</a><a class="anchor" href="#consumer-向上找不到-provider-的时候怎么办"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="有使用过-consumer-吗"><a href="https://github.com/haizlin/fe-interview/issues/938">有使用过 Consumer 吗？</a><a class="anchor" href="#有使用过-consumer-吗"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="context-api-可以取代-redux-吗为什么"><a href="https://github.com/haizlin/fe-interview/issues/916">Context api 可以取代 Redux 吗？为什么？</a><a class="anchor" href="#context-api-可以取代-redux-吗为什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={title:"React `useContext` and Context API",topic:["React"],type:"D",tags:["React"],DateStarted:"2024-01-17T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:null,reviewed:null,comment:null,difficulty:null,status:null,aliases:["React `useContext` and Context API","useContext"],"linter-yaml-title-alias":"React `useContext` and Context API",category:"Front-End Frameworks",minutes:1,words:278},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/state-management/useContext.md",url=void 0;function rawContent(){return"\n# React `useContext` and Context API\n\n> [Passing Data Deeply with Context – React](https://react.dev/learn/passing-data-deeply-with-context) >[useContext – React](https://react.dev/reference/react/useContext)\n\n## `useContext`\n\n### Why\n\na React Hook lets you read and subscribe to [context](https://react.dev/learn/passing-data-deeply-with-context) from your component.  \n_Context_ lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props\n\n### Basics\n\n`const value = useContext(SomeContext)`\n\n#### createContext()\n\n```jsx\nimport { createContext } from \"react\";\nconst ThemeContext = createContext(\"light\");\n```\n\n#### useContext()\n\n```jsx\nimport { useContext } from 'react';\nfunction MyComponent() {\n\tconst theme = useContext(ThemeContext);\n```\n\n#### Parameter\n\n`SomeContext`\n\n- The context that you've previously created with [`createContext`](https://react.dev/reference/react/createContext)(a React API).\n- it only represents the kind of information you can provide or read from components\n\n#### Return\n\n`useContext` returns the context value for the calling component.\n\n- It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree\n- `useContext()` call in a component is not affected by providers returned from the *same* component. The corresponding `<Context.Provider>` **needs to be above** the component doing the `useContext()` call\n\n### Use Case\n\n#### Updating a value via context\n\n📌 ThemeContextApp.jsx\n\n#### Updating an object via context\n\n📌 CurrentUser.jsx\n\n#### Multiple Context\n\n📌 MultiContext.jsx\n\n#### Extract Context\n\n📌 ExtractContext.jsx\n\n#### Specifying a fallback default value\n\n`const ThemeContext = createContext('light');`\n\n#### Override a theme\n\n📌 OverrideContext.jsx\n\n## `createContext()` API\n\n### Parameter\n\n### Return\n\n## Questions\n\n#### [怎么使用 Context 开发组件？](https://github.com/haizlin/fe-interview/issues/944)\n\n#### [在 React 怎么使用 Context？](https://github.com/haizlin/fe-interview/issues/937)\n\n#### [为什么 React 并不推荐我们优先考虑使用 Context？](https://github.com/haizlin/fe-interview/issues/943)\n\n#### [说说 Context 有哪些属性？](https://github.com/haizlin/fe-interview/issues/945)\n\n#### [除了实例的属性可以获取 Context 外哪些地方还能直接获取 Context 呢？](https://github.com/haizlin/fe-interview/issues/942)\n\n#### [childContextTypes 是什么？它有什么用？](https://github.com/haizlin/fe-interview/issues/941)\n\n#### [contextType 是什么？它有什么用？](https://github.com/haizlin/fe-interview/issues/940)\n\n#### [Consumer 向上找不到 Provider 的时候怎么办？](https://github.com/haizlin/fe-interview/issues/939)\n\n#### [有使用过 Consumer 吗？](https://github.com/haizlin/fe-interview/issues/938)\n\n#### [Context api 可以取代 Redux 吗？为什么？](https://github.com/haizlin/fe-interview/issues/916)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"react-usecontext-and-context-api",text:"React useContext and Context API#"},{depth:2,slug:"usecontext",text:"useContext#"},{depth:3,slug:"why",text:"Why#"},{depth:3,slug:"basics",text:"Basics#"},{depth:4,slug:"createcontext",text:"createContext()#"},{depth:4,slug:"usecontext-1",text:"useContext()#"},{depth:4,slug:"parameter",text:"Parameter#"},{depth:4,slug:"return",text:"Return#"},{depth:3,slug:"use-case",text:"Use Case#"},{depth:4,slug:"updating-a-value-via-context",text:"Updating a value via context#"},{depth:4,slug:"updating-an-object-via-context",text:"Updating an object via context#"},{depth:4,slug:"multiple-context",text:"Multiple Context#"},{depth:4,slug:"extract-context",text:"Extract Context#"},{depth:4,slug:"specifying-a-fallback-default-value",text:"Specifying a fallback default value#"},{depth:4,slug:"override-a-theme",text:"Override a theme#"},{depth:2,slug:"createcontext-api",text:"createContext() API#"},{depth:3,slug:"parameter-1",text:"Parameter#"},{depth:3,slug:"return-1",text:"Return#"},{depth:2,slug:"questions",text:"Questions#"},{depth:4,slug:"怎么使用-context-开发组件",text:"怎么使用 Context 开发组件？#"},{depth:4,slug:"在-react-怎么使用-context",text:"在 React 怎么使用 Context？#"},{depth:4,slug:"为什么-react-并不推荐我们优先考虑使用-context",text:"为什么 React 并不推荐我们优先考虑使用 Context？#"},{depth:4,slug:"说说-context-有哪些属性",text:"说说 Context 有哪些属性？#"},{depth:4,slug:"除了实例的属性可以获取-context-外哪些地方还能直接获取-context-呢",text:"除了实例的属性可以获取 Context 外哪些地方还能直接获取 Context 呢？#"},{depth:4,slug:"childcontexttypes-是什么它有什么用",text:"childContextTypes 是什么？它有什么用？#"},{depth:4,slug:"contexttype-是什么它有什么用",text:"contextType 是什么？它有什么用？#"},{depth:4,slug:"consumer-向上找不到-provider-的时候怎么办",text:"Consumer 向上找不到 Provider 的时候怎么办？#"},{depth:4,slug:"有使用过-consumer-吗",text:"有使用过 Consumer 吗？#"},{depth:4,slug:"context-api-可以取代-redux-吗为什么",text:"Context api 可以取代 Redux 吗？为什么？#"}]}const Content=createComponent(((e,t,n)=>{const{layout:a,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),useContext=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,useContext};