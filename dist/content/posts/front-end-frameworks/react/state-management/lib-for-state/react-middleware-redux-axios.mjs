import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../../chunks/1726310608649/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/state-management/lib-for-state/react-middleware-redux-axios.md",collection="posts",slug="front-end-frameworks/react/state-management/lib-for-state/react-middleware-redux-axios",body='\n# React-Middleware-Redux-Axios-中间件\n\n#### [你有写过 React 的中间件插件吗？](https://github.com/haizlin/fe-interview/issues/691)\n\n#### [React 中你用过哪些第三方的中间件？](https://github.com/haizlin/fe-interview/issues/689)\n\n#### [React 的中间件机制是怎么样的？这种机制有什么作用？](https://github.com/haizlin/fe-interview/issues/690)\n\nReact 并没有像 Redux 或 Express 这样的中间件机制。然而，React 被广泛用于构建前端应用程序，而这些应用程序通常需要与后端服务器进行数据通信。在这种情况下，中间件通常与 React 一起使用以处理网络请求和其他异步操作。这是一种常见的做法，但它不是 React 本身的一部分。  \n以下是一个通常用于 React 应用程序中的中间件机制：\n\n1. **Redux Middleware**：如果您使用了 Redux 来管理应用程序的状态，Redux 提供了中间件机制。Redux 中间件允许您在派发(action dispatch)到 Redux 存储之前或之后执行自定义逻辑。例如，`redux-thunk`中间件允许您派发异步操作。\n\n   ```js\n   import { applyMiddleware, createStore } from "redux";\n   import thunk from "redux-thunk";\n   import rootReducer from "./reducers";\n   const store = createStore(rootReducer, applyMiddleware(thunk));\n   ```\n\n2. **Axios Interceptors**：如果您使用 Axios 等 HTTP 库来处理网络请求，您可以使用 Axios 的拦截器（interceptors）来添加中间件。拦截器可以用于在请求发送或响应返回时执行自定义逻辑。\n\n   ```js\n   import axios from "axios";\n   axios.interceptors.request.use((config) => {\n   \t// 在请求发送前执行逻辑\n   \treturn config;\n   });\n   axios.interceptors.response.use((response) => {\n   \t// 在响应返回后执行逻辑\n   \treturn response;\n   });\n   ```\n\n中间件的作用包括：\n\n- **异步操作处理**：中间件可以用于处理异步操作，例如数据获取、API 请求等。Redux 中的中间件可以使您的 Redux 操作变得更加灵活和复杂。\n- **请求和响应处理**：中间件可以用于添加请求头、处理响应数据、错误处理等。这对于与后端服务器通信非常有用。\n- **日志记录和调试**：中间件可以用于记录操作、捕获错误、调试应用程序等。这有助于更好地了解应用程序的运行状况。  \n  总之，虽然 React 本身没有中间件机制，但在构建 React 应用程序时，通常会使用一些第三方库（如 Redux 或 Axios）提供的中间件机制来处理各种任务，从而使应用程序更加灵活和可维护。中间件可以用于处理异步操作、网络请求、日志记录等各种需求。\n',data={title:"React-Middleware-Redux-Axios-中间件",DateStarted:new Date(171288e7),draft:!0,tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/state-management/lib-for-state/react-middleware-redux-axios.md",rawData:void 0},html='<h1 id="react-middleware-redux-axios-中间件">React-Middleware-Redux-Axios-中间件<a class="anchor" href="#react-middleware-redux-axios-中间件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h4 id="你有写过-react-的中间件插件吗"><a href="https://github.com/haizlin/fe-interview/issues/691">你有写过 React 的中间件插件吗？</a><a class="anchor" href="#你有写过-react-的中间件插件吗"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-中你用过哪些第三方的中间件"><a href="https://github.com/haizlin/fe-interview/issues/689">React 中你用过哪些第三方的中间件？</a><a class="anchor" href="#react-中你用过哪些第三方的中间件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-的中间件机制是怎么样的这种机制有什么作用"><a href="https://github.com/haizlin/fe-interview/issues/690">React 的中间件机制是怎么样的？这种机制有什么作用？</a><a class="anchor" href="#react-的中间件机制是怎么样的这种机制有什么作用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>React 并没有像 Redux 或 Express 这样的中间件机制。然而，React 被广泛用于构建前端应用程序，而这些应用程序通常需要与后端服务器进行数据通信。在这种情况下，中间件通常与 React 一起使用以处理网络请求和其他异步操作。这是一种常见的做法，但它不是 React 本身的一部分。<br>\n以下是一个通常用于 React 应用程序中的中间件机制：</p>\n<ol>\n<li>\n<p><strong>Redux Middleware</strong>：如果您使用了 Redux 来管理应用程序的状态，Redux 提供了中间件机制。Redux 中间件允许您在派发(action dispatch)到 Redux 存储之前或之后执行自定义逻辑。例如，<code>redux-thunk</code>中间件允许您派发异步操作。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { applyMiddleware, createStore } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "redux"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> thunk </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "redux-thunk"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> rootReducer </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "./reducers"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> store</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> createStore</span><span style="color:#E1E4E8">(rootReducer, </span><span style="color:#B392F0">applyMiddleware</span><span style="color:#E1E4E8">(thunk));</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p><strong>Axios Interceptors</strong>：如果您使用 Axios 等 HTTP 库来处理网络请求，您可以使用 Axios 的拦截器（interceptors）来添加中间件。拦截器可以用于在请求发送或响应返回时执行自定义逻辑。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> axios </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "axios"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">axios.interceptors.request.</span><span style="color:#B392F0">use</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">config</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t// 在请求发送前执行逻辑</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> config;</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">axios.interceptors.response.</span><span style="color:#B392F0">use</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">response</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t// 在响应返回后执行逻辑</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> response;</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ol>\n<p>中间件的作用包括：</p>\n<ul>\n<li><strong>异步操作处理</strong>：中间件可以用于处理异步操作，例如数据获取、API 请求等。Redux 中的中间件可以使您的 Redux 操作变得更加灵活和复杂。</li>\n<li><strong>请求和响应处理</strong>：中间件可以用于添加请求头、处理响应数据、错误处理等。这对于与后端服务器通信非常有用。</li>\n<li><strong>日志记录和调试</strong>：中间件可以用于记录操作、捕获错误、调试应用程序等。这有助于更好地了解应用程序的运行状况。<br>\n总之，虽然 React 本身没有中间件机制，但在构建 React 应用程序时，通常会使用一些第三方库（如 Redux 或 Axios）提供的中间件机制来处理各种任务，从而使应用程序更加灵活和可维护。中间件可以用于处理异步操作、网络请求、日志记录等各种需求。</li>\n</ul>',frontmatter={draft:!0,aliases:["React-Middleware-Redux-Axios-中间件"],title:"React-Middleware-Redux-Axios-中间件",topic:["Data-Fetching"],type:"D",tags:["React"],DateStarted:"2024-04-12T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:"2024-04-12T00:00:00.000Z",reviewed:1,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"React-Middleware-Redux-Axios-中间件",category:"Front-End Frameworks",minutes:3,words:613},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/state-management/lib-for-state/react-middleware-redux-axios.md",url=void 0;function rawContent(){return'\n# React-Middleware-Redux-Axios-中间件\n\n#### [你有写过 React 的中间件插件吗？](https://github.com/haizlin/fe-interview/issues/691)\n\n#### [React 中你用过哪些第三方的中间件？](https://github.com/haizlin/fe-interview/issues/689)\n\n#### [React 的中间件机制是怎么样的？这种机制有什么作用？](https://github.com/haizlin/fe-interview/issues/690)\n\nReact 并没有像 Redux 或 Express 这样的中间件机制。然而，React 被广泛用于构建前端应用程序，而这些应用程序通常需要与后端服务器进行数据通信。在这种情况下，中间件通常与 React 一起使用以处理网络请求和其他异步操作。这是一种常见的做法，但它不是 React 本身的一部分。  \n以下是一个通常用于 React 应用程序中的中间件机制：\n\n1. **Redux Middleware**：如果您使用了 Redux 来管理应用程序的状态，Redux 提供了中间件机制。Redux 中间件允许您在派发(action dispatch)到 Redux 存储之前或之后执行自定义逻辑。例如，`redux-thunk`中间件允许您派发异步操作。\n\n   ```js\n   import { applyMiddleware, createStore } from "redux";\n   import thunk from "redux-thunk";\n   import rootReducer from "./reducers";\n   const store = createStore(rootReducer, applyMiddleware(thunk));\n   ```\n\n2. **Axios Interceptors**：如果您使用 Axios 等 HTTP 库来处理网络请求，您可以使用 Axios 的拦截器（interceptors）来添加中间件。拦截器可以用于在请求发送或响应返回时执行自定义逻辑。\n\n   ```js\n   import axios from "axios";\n   axios.interceptors.request.use((config) => {\n   \t// 在请求发送前执行逻辑\n   \treturn config;\n   });\n   axios.interceptors.response.use((response) => {\n   \t// 在响应返回后执行逻辑\n   \treturn response;\n   });\n   ```\n\n中间件的作用包括：\n\n- **异步操作处理**：中间件可以用于处理异步操作，例如数据获取、API 请求等。Redux 中的中间件可以使您的 Redux 操作变得更加灵活和复杂。\n- **请求和响应处理**：中间件可以用于添加请求头、处理响应数据、错误处理等。这对于与后端服务器通信非常有用。\n- **日志记录和调试**：中间件可以用于记录操作、捕获错误、调试应用程序等。这有助于更好地了解应用程序的运行状况。  \n  总之，虽然 React 本身没有中间件机制，但在构建 React 应用程序时，通常会使用一些第三方库（如 Redux 或 Axios）提供的中间件机制来处理各种任务，从而使应用程序更加灵活和可维护。中间件可以用于处理异步操作、网络请求、日志记录等各种需求。\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"react-middleware-redux-axios-中间件",text:"React-Middleware-Redux-Axios-中间件#"},{depth:4,slug:"你有写过-react-的中间件插件吗",text:"你有写过 React 的中间件插件吗？#"},{depth:4,slug:"react-中你用过哪些第三方的中间件",text:"React 中你用过哪些第三方的中间件？#"},{depth:4,slug:"react-的中间件机制是怎么样的这种机制有什么作用",text:"React 的中间件机制是怎么样的？这种机制有什么作用？#"}]}const Content=createComponent(((e,n,s)=>{const{layout:t,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),reactMiddlewareReduxAxios=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,reactMiddlewareReduxAxios,slug};