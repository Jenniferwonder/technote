import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/data-fetching/react-data-fetching.md",collection="posts",slug="front-end-frameworks/react/data-fetching/react-data-fetching",body='\n# React Data Fetching\n\ncreating, reading, searching, updating, and deleting data. A typical web app would probably be talking to an API on your web server, but we\'re going to use browser storage and fake some network latency to keep this focused\n\n## Fetch\n\n#### `await response.text()`\n\ntypically used when you expect the server to respond with plain text, HTML, XML, or any other non-JSON format\n\n##### fetch `.` data from `raw.githubusercontent.com`\n\n```js\nconst pathToMermaid =\n\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/guides/roadmap.";\nconst getMermaidCode = async () => {\n\tconst response = await fetch(pathToMermaid);\n\treturn await response.text();\n};\nconst mermaidCode = await getMermaidCode();\n```\n\n##### fetch `.yml` data from `raw.githubusercontent.com`\n\n```js\nimport yaml from "js-yaml";\nconst resourcesUrl =\n\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/resources.yml";\nconst fetchResources = async (url) => {\n\tconst response = await fetch(url);\n\tconst textData = await response.text();\n\tconst data = yaml.load(textData);\n\treturn data.resources || [];\n};\nconst resources = await fetchResources(resourcesUrl);\n```\n\n#### `await response.json()`\n\n## React Query\n\n## Questions\n\n#### [在 React 中怎么使用 async/await？](https://github.com/haizlin/fe-interview/issues/880)\n\n### Error Handling\n\n#### [React 中在哪捕获错误？](https://github.com/haizlin/fe-interview/issues/928)\n\n#### [说说你对 Error Boundaries 的理解](https://github.com/haizlin/fe-interview/issues/701)\n\n#### [React v15 中怎么处理错误边界？](https://github.com/haizlin/fe-interview/issues/859)\n',data={title:"React Data Fetching",DateStarted:new Date(17096832e5),draft:!0,tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/data-fetching/react-data-fetching.md",rawData:void 0},html='<h1 id="react-data-fetching">React Data Fetching<a class="anchor" href="#react-data-fetching"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<p>creating, reading, searching, updating, and deleting data. A typical web app would probably be talking to an API on your web server, but we’re going to use browser storage and fake some network latency to keep this focused</p>\n<h2 id="fetch">Fetch<a class="anchor" href="#fetch"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="await-responsetext"><code>await response.text()</code><a class="anchor" href="#await-responsetext"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>typically used when you expect the server to respond with plain text, HTML, XML, or any other non-JSON format</p>\n<h5 id="fetch--data-from-rawgithubusercontentcom">fetch <code>.</code> data from <code>raw.githubusercontent.com</code><a class="anchor" href="#fetch--data-from-rawgithubusercontentcom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> pathToMermaid</span><span style="color:#F97583"> =</span></span>\n<span class="line"><span style="color:#9ECBFF">\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/guides/roadmap."</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> getMermaidCode</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> response</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(pathToMermaid);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> response.</span><span style="color:#B392F0">text</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> mermaidCode</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getMermaidCode</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"></span></code></pre>\n<h5 id="fetch-yml-data-from-rawgithubusercontentcom">fetch <code>.yml</code> data from <code>raw.githubusercontent.com</code><a class="anchor" href="#fetch-yml-data-from-rawgithubusercontentcom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> yaml </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "js-yaml"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> resourcesUrl</span><span style="color:#F97583"> =</span></span>\n<span class="line"><span style="color:#9ECBFF">\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/resources.yml"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> fetchResources</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">url</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> response</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(url);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> textData</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> response.</span><span style="color:#B392F0">text</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> data</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> yaml.</span><span style="color:#B392F0">load</span><span style="color:#E1E4E8">(textData);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> data.resources </span><span style="color:#F97583">||</span><span style="color:#E1E4E8"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> resources</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetchResources</span><span style="color:#E1E4E8">(resourcesUrl);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="await-responsejson"><code>await response.json()</code><a class="anchor" href="#await-responsejson"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h2 id="react-query">React Query<a class="anchor" href="#react-query"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="在-react-中怎么使用-asyncawait"><a href="https://github.com/haizlin/fe-interview/issues/880">在 React 中怎么使用 async/await？</a><a class="anchor" href="#在-react-中怎么使用-asyncawait"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h3 id="error-handling">Error Handling<a class="anchor" href="#error-handling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="react-中在哪捕获错误"><a href="https://github.com/haizlin/fe-interview/issues/928">React 中在哪捕获错误？</a><a class="anchor" href="#react-中在哪捕获错误"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说你对-error-boundaries-的理解"><a href="https://github.com/haizlin/fe-interview/issues/701">说说你对 Error Boundaries 的理解</a><a class="anchor" href="#说说你对-error-boundaries-的理解"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-v15-中怎么处理错误边界"><a href="https://github.com/haizlin/fe-interview/issues/859">React v15 中怎么处理错误边界？</a><a class="anchor" href="#react-v15-中怎么处理错误边界"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={title:"React Data Fetching",topic:["React"],type:"D",tags:["React"],DateStarted:"2024-03-06T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["React Data Fetching"],category:"Front-End Frameworks","linter-yaml-title-alias":"React Data Fetching",draft:!0,minutes:1,words:167},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/data-fetching/react-data-fetching.md",url=void 0;function rawContent(){return'\n# React Data Fetching\n\ncreating, reading, searching, updating, and deleting data. A typical web app would probably be talking to an API on your web server, but we\'re going to use browser storage and fake some network latency to keep this focused\n\n## Fetch\n\n#### `await response.text()`\n\ntypically used when you expect the server to respond with plain text, HTML, XML, or any other non-JSON format\n\n##### fetch `.` data from `raw.githubusercontent.com`\n\n```js\nconst pathToMermaid =\n\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/guides/roadmap.";\nconst getMermaidCode = async () => {\n\tconst response = await fetch(pathToMermaid);\n\treturn await response.text();\n};\nconst mermaidCode = await getMermaidCode();\n```\n\n##### fetch `.yml` data from `raw.githubusercontent.com`\n\n```js\nimport yaml from "js-yaml";\nconst resourcesUrl =\n\t"https://raw.githubusercontent.com/Lissy93/git-into-open-source/main/resources.yml";\nconst fetchResources = async (url) => {\n\tconst response = await fetch(url);\n\tconst textData = await response.text();\n\tconst data = yaml.load(textData);\n\treturn data.resources || [];\n};\nconst resources = await fetchResources(resourcesUrl);\n```\n\n#### `await response.json()`\n\n## React Query\n\n## Questions\n\n#### [在 React 中怎么使用 async/await？](https://github.com/haizlin/fe-interview/issues/880)\n\n### Error Handling\n\n#### [React 中在哪捕获错误？](https://github.com/haizlin/fe-interview/issues/928)\n\n#### [说说你对 Error Boundaries 的理解](https://github.com/haizlin/fe-interview/issues/701)\n\n#### [React v15 中怎么处理错误边界？](https://github.com/haizlin/fe-interview/issues/859)\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"react-data-fetching",text:"React Data Fetching#"},{depth:2,slug:"fetch",text:"Fetch#"},{depth:4,slug:"await-responsetext",text:"await response.text()#"},{depth:5,slug:"fetch--data-from-rawgithubusercontentcom",text:"fetch . data from raw.githubusercontent.com#"},{depth:5,slug:"fetch-yml-data-from-rawgithubusercontentcom",text:"fetch .yml data from raw.githubusercontent.com#"},{depth:4,slug:"await-responsejson",text:"await response.json()#"},{depth:2,slug:"react-query",text:"React Query#"},{depth:2,slug:"questions",text:"Questions#"},{depth:4,slug:"在-react-中怎么使用-asyncawait",text:"在 React 中怎么使用 async/await？#"},{depth:3,slug:"error-handling",text:"Error Handling#"},{depth:4,slug:"react-中在哪捕获错误",text:"React 中在哪捕获错误？#"},{depth:4,slug:"说说你对-error-boundaries-的理解",text:"说说你对 Error Boundaries 的理解#"},{depth:4,slug:"react-v15-中怎么处理错误边界",text:"React v15 中怎么处理错误边界？#"}]}const Content=createComponent(((a,e,n)=>{const{layout:t,...s}=frontmatter;return s.file=file,s.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),reactDataFetching=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,reactDataFetching,slug};