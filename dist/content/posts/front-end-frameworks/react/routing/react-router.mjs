import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726310608649/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/routing/react-router.md",collection="posts",slug="front-end-frameworks/react/routing/react-router",body='\n# React Router DOM\n\n> [Feature Overview v6.22.3 | React Router](https://reactrouter.com/en/main/start/overview)\n\n## Why\n\n> [Server-side vs Client-side Routing | by Wilbert Schepenaar | Medium](https://medium.com/@wilbo/server-side-vs-client-side-routing-71d710e9227f) >[Server side vs Client side Routing- Scaler Topics](https://www.scaler.com/topics/react/server-client-routing/)  \n> [What is the difference between React Router and conventional routing? | by Yashi Shukla | Nerd For Tech | Medium](https://medium.com/nerd-for-tech/what-is-the-difference-between-react-router-and-conventional-routing-9b11159d92a4)\n\nReact Router enables "==client side routing=="\n\n### What is Client Side Routing & Why?\n\nIn traditional websites, the browser **requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server**. When the user clicks a link, it starts the process all over again for a new page  \nClient side routing allows your app to update the URL from a link click **without making another request for another document from the server**. Instead, your app can immediately render some new UI and make data requests with `fetch` to update the page with new information\n\n\n## Routers\nlow-level interface that is shared by all router components. \n- [`<Router>`](https://reactrouter.com/en/main/router-components/router)\n\t- should use one of the higher-level routers. Only ever need one router in a given app\n### ✅ Data Routers (v6.4)\n>v6.4, new routers that support Data API  \n> to quickly update to a v6.4 is to get the help from [`createRoutesFromElements`](https://reactrouter.com/en/main/utils/create-routes-from-elements) so you don\'t need to convert your `<Route>` elements to route objects\n- [`createBrowserRouter`](https://reactrouter.com/en/main/routers/create-browser-router)\n\t- For all web projects \n\t- uses the **full URL** instead of the hash urls (`#this/stuff`) common in web apps before `history.pushState` was standardized\n\t- better for SEO, better for server rendering, and are just more compatible with the rest of the web platform\n\t- on a static file server, you\'ll need to configure it to send all requests to your `index.html` to avoid getting 404s\n- [`createMemoryRouter`](https://reactrouter.com/en/main/routers/create-memory-router)\n\t- Testing components that use React Router APIs is easiest with [`createMemoryRouter`](https://reactrouter.com/en/main/routers/create-memory-router) or [`<MemoryRouter>`](https://reactrouter.com/en/main/router-components/memory-router) instead of the routers you use in your app that require DOM history APIs\n- [`createHashRouter`](https://reactrouter.com/en/main/routers/create-hash-router)\n\t- If for some reason you can\'t use the full URL, [`createHashRouter`](https://reactrouter.com/en/main/routers/create-hash-router) is the next best thing\n- [`createStaticRouter`](https://reactrouter.com/en/main/routers/create-static-router)\n### 🟨 Old Router Components\n> Router components that do not support the data APIs:  \n> recommend updating your app to use one of the new routers from 6.4\n- [`<BrowserRouter>`](https://reactrouter.com/en/main/router-components/browser-router)\n- [`<MemoryRouter>`](https://reactrouter.com/en/main/router-components/memory-router)\n- [`<HashRouter>`](https://reactrouter.com/en/main/router-components/hash-router)\n- [`<NativeRouter>`](https://reactrouter.com/en/main/router-components/native-router)\n- [`<StaticRouter>`](https://reactrouter.com/en/main/router-components/static-router)\n## Route\nData APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`route.action`](https://reactrouter.com/en/main/route/action)\n- [`route.errorElement`](https://reactrouter.com/en/main/route/error-element)\n- [`route.lazy`](https://reactrouter.com/en/main/route/lazy)\n- [`route.loader`](https://reactrouter.com/en/main/route/loader)\n- [`route.shouldRevalidate`](https://reactrouter.com/en/main/route/should-revalidate)\n- [`route.handle`](https://reactrouter.com/en/main/route/route#handle)\n\n## Components\n>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`<Await>`](https://reactrouter.com/en/main/components/await)\n- [`<Form>`](https://reactrouter.com/en/main/components/form)\n- [`<ScrollRestoration>`](https://reactrouter.com/en/main/components/scroll-restoration)\n## Hooks\n>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`useActionData`](https://reactrouter.com/en/main/hooks/use-action-data)\n- [`useAsyncError`](https://reactrouter.com/en/main/hooks/use-async-error)\n- [`useAsyncValue`](https://reactrouter.com/en/main/hooks/use-async-value)\n- [`useFetcher`](https://reactrouter.com/en/main/hooks/use-fetcher)\n- [`useFetchers`](https://reactrouter.com/en/main/hooks/use-fetchers)\n- [`useLoaderData`](https://reactrouter.com/en/main/hooks/use-loader-data)\n- [`useMatches`](https://reactrouter.com/en/main/hooks/use-matches)\n- [`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation)\n- [`useRevalidator`](https://reactrouter.com/en/main/hooks/use-revalidator)\n- [`useRouteError`](https://reactrouter.com/en/main/hooks/use-route-error)\n- [`useRouteLoaderData`](https://reactrouter.com/en/main/hooks/use-route-loader-data)\n- [`useSubmit`](https://reactrouter.com/en/main/hooks/use-submit)\n- `startViewTransition` support on [Link](https://reactrouter.com/en/main/components/link#unstable_viewtransition) and [useNavigate](https://reactrouter.com/en/main/hooks/use-navigate#optionsunstable_viewtransition)\n## Fetch Utilities\n\n\n## Utilities\n\n\n\n\n## Use\n\n### Main Route\n\n`import { createBrowserRouter, RouterProvider } from "react-router-dom";`\n\n### Nested Route\n\n`{... children:[{...}]}`\n\n#### Deep nested routes\n\n> [reactjs - createBrowserRouter How to nest child routes inside another route that itself is a nested child route? - Stack Overflow](https://stackoverflow.com/questions/74566649/createbrowserrouter-how-to-nest-child-routes-inside-another-route-that-itself-is/78214668#78214668)\n\n### Handle Not Found Error\n\nErrorBoundary  \n`errorElement: ...`\n\n#### ErrorPage\n\n```jsx\nimport { useRouteError } from "react-router-dom";\nexport default function ErrorPage() {\n\tconst error = useRouteError();\n\tconsole.error(error);\n\treturn (\n\t\t<div id="error-page">\n\t\t\t      <h1>Oops!</h1>      <p>Sorry, an unexpected error has occurred.</p> \n\t\t\t   {" "}\n\t\t\t<p>\n\t\t\t\t        <i>{error.statusText || error.message}</i>     {" "}\n\t\t\t</p>\n\t\t\t   {" "}\n\t\t</div>\n\t);\n}\n```\n\n### Loading Data\n\nexport an async loader function from root.jsx  \nimport the loader function in main.jsx  \n`loader: loaderFunction`  \n`import {useLoaderData} from "react-router-dom"`\n\n### Data Writes + HTML Forms\n\nReact Router emulates HTML Form navigation as the data mutation primitive  \nLinks can only change the URL while forms can also change the request method (GET vs POST) and the request body (POST form data)\n\n#### Form component\n\n`import { Form } from "react-router-dom";`\n\n- [`<Form>`](https://reactrouter.com/en/main/components/form) prevents the browser from sending the request to the server and sends it to your route `action` instead.\n- React Router uses POST as a hint to automatically revalidate the data on the page after the action finishes. That means all of your `useLoaderData` hooks update and the UI stays in sync with your data automatically!\n- Like `<Link to>`, `<Form action>` can take a *relative* value. A relative action with `destroy` will submit the form to `contact/:contactId/destroy` when clicked\n\n#### URL Params\n\n`path: "contacts/:contactId"`\n\n- The colon (`:`) has special meaning, turning it into a "dynamic segment". We call these values in the URL "URL Params", or just "params" for short.\n- These params are most often used to find a record by ID\n\n### Update with FormData\n\n[FormData - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/FormData)  \nWithout JavaScript, when a form is submitted, the browser will create [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and set it as the body of the request when it sends it to the server  \nReact Router prevents that and sends the request to your action instead, including the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)  \nEach field in the form is accessible with `formData.get(name)`\n\n```jsx\nexport async function action({ request, params }) {\n\tconst formData = await request.formData();\n\tconst firstName = formData.get("first");\n\tconst lastName = formData.get("last");\n\t// ...\n}\n```\n\n### Active Link Styling\n\nWe can use [`NavLink`](https://reactrouter.com/en/main/components/nav-link)  \nwe are passing a function to `className`. When the user is at the URL in the `NavLink`, then `isActive` will be true. When it\'s *about* to be active (the data is still loading) then `isPending` will be true\n\n### Global Pending UI\n\nAs the user navigates the app, React Router will *leave the old page up* as data is loading for the next page. We can provide the user with some feedback so the app doesn\'t feel unresponsive  \nReact Router is managing all of the state behind the scenes and reveals the pieces of it you need to build dynamic web apps. We\'ll use the [`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation) hook  \n[`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation) returns the current navigation state: it can be one of `"idle" | "submitting" | "loading"`\n\n### Contextual Error\n\ncreate a contextual error message for the destroy route  \nuser now has more options than slamming refresh, they can continue to interact with the parts of the page that aren\'t having trouble\n\n### Index Route\n\nYou can think of index routes as the default child route to fill in that space.\n\n### Cancel Button (`useNavigate`)\n\n`const navigate = useNavigate();`  \n`<button type="button" onClick={() => {navigate(-1); }}>`\n\n- A `<button type="button">`, while seemingly redundant, is the HTML way of preventing a button from submitting its form  \n  when the user clicks "Cancel", they\'ll be sent back one entry in the browser\'s history\n\n## URL Search Params and GET Submissions\n\nAll interactive UI in this demo project so far have been either  \n - **links** that change the URL or  \n - **forms** that post data to actions  \nThe search field is a mix of both!\n\n- The search form does not have `<form method="post">`. The default `method` is `"get"`  \n  the browser\'s URL contains your query in the URL as [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)  \n  `http://127.0.0.1:5173/?q=ryan`\n- browsers can serialize forms by the `name` attribute of it\'s input elements\n- The name of this input is `q`, that\'s why the URL has `?q=`.  \n  Submitting a GET form is the same as clicking a link: only the URL changes. That\'s why the code we added for filtering is in the `loader`, not the `action` of this route\n\n### Synchronize URLs to Form State\n\n### Submitting the Search Form `onChange` (`useSubmit`)\n\nhave the filtering happen on every key stroke instead of when the form is explicitly submitted  \n`const submit = useSubmit()`\n\n```jsx\n<input onChange={(event) => {\n       submit(event.currentTarget.form);}}\n```\n\nThe `currentTarget` is the DOM node the event is attached to, and the `currentTarget.form` is the input\'s parent form node. The `submit` function will serialize and submit any form you pass to it.\n\n### Add Search Spinner\n\nThe `navigation.location` will show up when the app is navigating to a new URL and loading the data for it. It then goes away when there is no pending navigation anymore\n\n### Manage the History Stack (Throttle)\n\n*replacing* the current entry in the history stack with the next page, instead of pushing into it\n\n### Mutation without Navigation\n\n`useFetcher` allows us to communicate with loaders and actions without causing a navigation\n\n\n\n## Questions\n#### [在 history 模式中 push 和 replace 有什么区别？](https://github.com/haizlin/fe-interview/issues/778)\n\n#### [React-Router 的实现原理是什么？](https://github.com/haizlin/fe-interview/issues/774)\n\n#### [React-Router 怎么获取 URL 的参数？](https://github.com/haizlin/fe-interview/issues/921)\n\n#### [React-Router 怎么获取历史对象？](https://github.com/haizlin/fe-interview/issues/922)\n\n\n#### [React-Router 怎么设置重定向？](https://github.com/haizlin/fe-interview/issues/777)\n\n#### [路由切换时同一组件无法重新渲染的有什么方法可以解决？](https://github.com/haizlin/fe-interview/issues/833)\n\n#### [React-Router 的路由有几种模式？](https://github.com/haizlin/fe-interview/issues/772)\n\n#### [React-Router 的`<Link>`标签和`<a>`标签有什么区别？](https://github.com/haizlin/fe-interview/issues/770)\n\n#### [React-Router 4 中`<Router>`组件有几种类型？](https://github.com/haizlin/fe-interview/issues/776)\n\n#### [React-Router 3 和 React-Router 4 有什么变化？添加了什么好的特性？](https://github.com/haizlin/fe-interview/issues/775)\n\n#### [React-Router 4 的 switch 有什么用？](https://github.com/haizlin/fe-interview/issues/773)\n\n#### [React-Router 4 怎样在路由变化时重新渲染同一个组件？](https://github.com/haizlin/fe-interview/issues/771)\n\n\n#### [React 的路由和普通路由有什么区别？](https://github.com/haizlin/fe-interview/issues/728)\n\n#### [请你说说 React 的路由的优缺点？](https://github.com/haizlin/fe-interview/issues/727)\n\n#### [请你说说 React 的路由是什么？](https://github.com/haizlin/fe-interview/issues/726)\n\n\n\n\n\n\n\n\n',data={title:"React Router DOM",DateStarted:new Date(1712016e6),tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/routing/react-router.md",rawData:void 0},html='<h1 id="react-router-dom">React Router DOM<a class="anchor" href="#react-router-dom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p><a href="https://reactrouter.com/en/main/start/overview">Feature Overview v6.22.3 | React Router</a></p>\n</blockquote>\n<h2 id="why">Why<a class="anchor" href="#why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p><a href="https://medium.com/@wilbo/server-side-vs-client-side-routing-71d710e9227f">Server-side vs Client-side Routing | by Wilbert Schepenaar | Medium</a> ><a href="https://www.scaler.com/topics/react/server-client-routing/">Server side vs Client side Routing- Scaler Topics</a><br>\n<a href="https://medium.com/nerd-for-tech/what-is-the-difference-between-react-router-and-conventional-routing-9b11159d92a4">What is the difference between React Router and conventional routing? | by Yashi Shukla | Nerd For Tech | Medium</a></p>\n</blockquote>\n<p>React Router enables “==client side routing==“</p>\n<h3 id="what-is-client-side-routing--why">What is Client Side Routing &#x26; Why?<a class="anchor" href="#what-is-client-side-routing--why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>In traditional websites, the browser <strong>requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server</strong>. When the user clicks a link, it starts the process all over again for a new page<br>\nClient side routing allows your app to update the URL from a link click <strong>without making another request for another document from the server</strong>. Instead, your app can immediately render some new UI and make data requests with <code>fetch</code> to update the page with new information</p>\n<h2 id="routers">Routers<a class="anchor" href="#routers"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>low-level interface that is shared by all router components.</p>\n<ul>\n<li><a href="https://reactrouter.com/en/main/router-components/router"><code>&#x3C;Router></code></a>\n<ul>\n<li>should use one of the higher-level routers. Only ever need one router in a given app</li>\n</ul>\n</li>\n</ul>\n<h3 id="-data-routers-v64">✅ Data Routers (v6.4)<a class="anchor" href="#-data-routers-v64"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p>v6.4, new routers that support Data API<br>\n to quickly update to a v6.4 is to get the help from <a href="https://reactrouter.com/en/main/utils/create-routes-from-elements"><code>createRoutesFromElements</code></a> so you don’t need to convert your <code>&#x3C;Route></code> elements to route objects</p>\n</blockquote>\n<ul>\n<li><a href="https://reactrouter.com/en/main/routers/create-browser-router"><code>createBrowserRouter</code></a>\n<ul>\n<li>For all web projects</li>\n<li>uses the <strong>full URL</strong> instead of the hash urls (<code>#this/stuff</code>) common in web apps before <code>history.pushState</code> was standardized</li>\n<li>better for SEO, better for server rendering, and are just more compatible with the rest of the web platform</li>\n<li>on a static file server, you’ll need to configure it to send all requests to your <code>index.html</code> to avoid getting 404s</li>\n</ul>\n</li>\n<li><a href="https://reactrouter.com/en/main/routers/create-memory-router"><code>createMemoryRouter</code></a>\n<ul>\n<li>Testing components that use React Router APIs is easiest with <a href="https://reactrouter.com/en/main/routers/create-memory-router"><code>createMemoryRouter</code></a> or <a href="https://reactrouter.com/en/main/router-components/memory-router"><code>&#x3C;MemoryRouter></code></a> instead of the routers you use in your app that require DOM history APIs</li>\n</ul>\n</li>\n<li><a href="https://reactrouter.com/en/main/routers/create-hash-router"><code>createHashRouter</code></a>\n<ul>\n<li>If for some reason you can’t use the full URL, <a href="https://reactrouter.com/en/main/routers/create-hash-router"><code>createHashRouter</code></a> is the next best thing</li>\n</ul>\n</li>\n<li><a href="https://reactrouter.com/en/main/routers/create-static-router"><code>createStaticRouter</code></a></li>\n</ul>\n<h3 id="-old-router-components">🟨 Old Router Components<a class="anchor" href="#-old-router-components"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p>Router components that do not support the data APIs:<br>\n recommend updating your app to use one of the new routers from 6.4</p>\n</blockquote>\n<ul>\n<li><a href="https://reactrouter.com/en/main/router-components/browser-router"><code>&#x3C;BrowserRouter></code></a></li>\n<li><a href="https://reactrouter.com/en/main/router-components/memory-router"><code>&#x3C;MemoryRouter></code></a></li>\n<li><a href="https://reactrouter.com/en/main/router-components/hash-router"><code>&#x3C;HashRouter></code></a></li>\n<li><a href="https://reactrouter.com/en/main/router-components/native-router"><code>&#x3C;NativeRouter></code></a></li>\n<li><a href="https://reactrouter.com/en/main/router-components/static-router"><code>&#x3C;StaticRouter></code></a></li>\n</ul>\n<h2 id="route">Route<a class="anchor" href="#route"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]</p>\n<ul>\n<li><a href="https://reactrouter.com/en/main/route/action"><code>route.action</code></a></li>\n<li><a href="https://reactrouter.com/en/main/route/error-element"><code>route.errorElement</code></a></li>\n<li><a href="https://reactrouter.com/en/main/route/lazy"><code>route.lazy</code></a></li>\n<li><a href="https://reactrouter.com/en/main/route/loader"><code>route.loader</code></a></li>\n<li><a href="https://reactrouter.com/en/main/route/should-revalidate"><code>route.shouldRevalidate</code></a></li>\n<li><a href="https://reactrouter.com/en/main/route/route#handle"><code>route.handle</code></a></li>\n</ul>\n<h2 id="components">Components<a class="anchor" href="#components"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]</p>\n</blockquote>\n<ul>\n<li><a href="https://reactrouter.com/en/main/components/await"><code>&#x3C;Await></code></a></li>\n<li><a href="https://reactrouter.com/en/main/components/form"><code>&#x3C;Form></code></a></li>\n<li><a href="https://reactrouter.com/en/main/components/scroll-restoration"><code>&#x3C;ScrollRestoration></code></a></li>\n</ul>\n<h2 id="hooks">Hooks<a class="anchor" href="#hooks"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]</p>\n</blockquote>\n<ul>\n<li><a href="https://reactrouter.com/en/main/hooks/use-action-data"><code>useActionData</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-async-error"><code>useAsyncError</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-async-value"><code>useAsyncValue</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-fetcher"><code>useFetcher</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-fetchers"><code>useFetchers</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-loader-data"><code>useLoaderData</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-matches"><code>useMatches</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-navigation"><code>useNavigation</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-revalidator"><code>useRevalidator</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-route-error"><code>useRouteError</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-route-loader-data"><code>useRouteLoaderData</code></a></li>\n<li><a href="https://reactrouter.com/en/main/hooks/use-submit"><code>useSubmit</code></a></li>\n<li><code>startViewTransition</code> support on <a href="https://reactrouter.com/en/main/components/link#unstable_viewtransition">Link</a> and <a href="https://reactrouter.com/en/main/hooks/use-navigate#optionsunstable_viewtransition">useNavigate</a></li>\n</ul>\n<h2 id="fetch-utilities">Fetch Utilities<a class="anchor" href="#fetch-utilities"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="utilities">Utilities<a class="anchor" href="#utilities"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="use">Use<a class="anchor" href="#use"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="main-route">Main Route<a class="anchor" href="#main-route"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>import { createBrowserRouter, RouterProvider } from "react-router-dom";</code></p>\n<h3 id="nested-route">Nested Route<a class="anchor" href="#nested-route"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>{... children:[{...}]}</code></p>\n<h4 id="deep-nested-routes">Deep nested routes<a class="anchor" href="#deep-nested-routes"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p><a href="https://stackoverflow.com/questions/74566649/createbrowserrouter-how-to-nest-child-routes-inside-another-route-that-itself-is/78214668#78214668">reactjs - createBrowserRouter How to nest child routes inside another route that itself is a nested child route? - Stack Overflow</a></p>\n</blockquote>\n<h3 id="handle-not-found-error">Handle Not Found Error<a class="anchor" href="#handle-not-found-error"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>ErrorBoundary<br>\n<code>errorElement: ...</code></p>\n<h4 id="errorpage">ErrorPage<a class="anchor" href="#errorpage"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { useRouteError } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "react-router-dom"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> ErrorPage</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> error</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useRouteError</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(error);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> id</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"error-page"</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t      &#x3C;</span><span style="color:#85E89D">h1</span><span style="color:#E1E4E8">>Oops!&#x3C;/</span><span style="color:#85E89D">h1</span><span style="color:#E1E4E8">>      &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>Sorry, an unexpected error has occurred.&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">> </span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t   {</span><span style="color:#9ECBFF">" "</span><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t&#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t        &#x3C;</span><span style="color:#85E89D">i</span><span style="color:#E1E4E8">>{error.statusText </span><span style="color:#F97583">||</span><span style="color:#E1E4E8"> error.message}&#x3C;/</span><span style="color:#85E89D">i</span><span style="color:#E1E4E8">>     {</span><span style="color:#9ECBFF">" "</span><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t   {</span><span style="color:#9ECBFF">" "</span><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h3 id="loading-data">Loading Data<a class="anchor" href="#loading-data"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>export an async loader function from root.jsx<br>\nimport the loader function in main.jsx<br>\n<code>loader: loaderFunction</code><br>\n<code>import {useLoaderData} from "react-router-dom"</code></p>\n<h3 id="data-writes--html-forms">Data Writes + HTML Forms<a class="anchor" href="#data-writes--html-forms"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>React Router emulates HTML Form navigation as the data mutation primitive<br>\nLinks can only change the URL while forms can also change the request method (GET vs POST) and the request body (POST form data)</p>\n<h4 id="form-component">Form component<a class="anchor" href="#form-component"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>import { Form } from "react-router-dom";</code></p>\n<ul>\n<li><a href="https://reactrouter.com/en/main/components/form"><code>&#x3C;Form></code></a> prevents the browser from sending the request to the server and sends it to your route <code>action</code> instead.</li>\n<li>React Router uses POST as a hint to automatically revalidate the data on the page after the action finishes. That means all of your <code>useLoaderData</code> hooks update and the UI stays in sync with your data automatically!</li>\n<li>Like <code>&#x3C;Link to></code>, <code>&#x3C;Form action></code> can take a <em>relative</em> value. A relative action with <code>destroy</code> will submit the form to <code>contact/:contactId/destroy</code> when clicked</li>\n</ul>\n<h4 id="url-params">URL Params<a class="anchor" href="#url-params"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>path: "contacts/:contactId"</code></p>\n<ul>\n<li>The colon (<code>:</code>) has special meaning, turning it into a “dynamic segment”. We call these values in the URL “URL Params”, or just “params” for short.</li>\n<li>These params are most often used to find a record by ID</li>\n</ul>\n<h3 id="update-with-formdata">Update with FormData<a class="anchor" href="#update-with-formdata"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData - Web APIs | MDN</a><br>\nWithout JavaScript, when a form is submitted, the browser will create <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"><code>FormData</code></a> and set it as the body of the request when it sends it to the server<br>\nReact Router prevents that and sends the request to your action instead, including the <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"><code>FormData</code></a><br>\nEach field in the form is accessible with <code>formData.get(name)</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> action</span><span style="color:#E1E4E8">({ </span><span style="color:#FFAB70">request</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">params</span><span style="color:#E1E4E8"> }) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> formData</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> request.</span><span style="color:#B392F0">formData</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> firstName</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"first"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> lastName</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"last"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">\t// ...</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h3 id="active-link-styling">Active Link Styling<a class="anchor" href="#active-link-styling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>We can use <a href="https://reactrouter.com/en/main/components/nav-link"><code>NavLink</code></a><br>\nwe are passing a function to <code>className</code>. When the user is at the URL in the <code>NavLink</code>, then <code>isActive</code> will be true. When it’s <em>about</em> to be active (the data is still loading) then <code>isPending</code> will be true</p>\n<h3 id="global-pending-ui">Global Pending UI<a class="anchor" href="#global-pending-ui"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>As the user navigates the app, React Router will <em>leave the old page up</em> as data is loading for the next page. We can provide the user with some feedback so the app doesn’t feel unresponsive<br>\nReact Router is managing all of the state behind the scenes and reveals the pieces of it you need to build dynamic web apps. We’ll use the <a href="https://reactrouter.com/en/main/hooks/use-navigation"><code>useNavigation</code></a> hook<br>\n<a href="https://reactrouter.com/en/main/hooks/use-navigation"><code>useNavigation</code></a> returns the current navigation state: it can be one of <code>"idle" | "submitting" | "loading"</code></p>\n<h3 id="contextual-error">Contextual Error<a class="anchor" href="#contextual-error"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>create a contextual error message for the destroy route<br>\nuser now has more options than slamming refresh, they can continue to interact with the parts of the page that aren’t having trouble</p>\n<h3 id="index-route">Index Route<a class="anchor" href="#index-route"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>You can think of index routes as the default child route to fill in that space.</p>\n<h3 id="cancel-button-usenavigate">Cancel Button (<code>useNavigate</code>)<a class="anchor" href="#cancel-button-usenavigate"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>const navigate = useNavigate();</code><br>\n<code>&#x3C;button type="button" onClick={() => {navigate(-1); }}></code></p>\n<ul>\n<li>A <code>&#x3C;button type="button"></code>, while seemingly redundant, is the HTML way of preventing a button from submitting its form<br>\nwhen the user clicks “Cancel”, they’ll be sent back one entry in the browser’s history</li>\n</ul>\n<h2 id="url-search-params-and-get-submissions">URL Search Params and GET Submissions<a class="anchor" href="#url-search-params-and-get-submissions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>All interactive UI in this demo project so far have been either<br>\n - <strong>links</strong> that change the URL or<br>\n - <strong>forms</strong> that post data to actions<br>\nThe search field is a mix of both!</p>\n<ul>\n<li>The search form does not have <code>&#x3C;form method="post"></code>. The default <code>method</code> is <code>"get"</code><br>\nthe browser’s URL contains your query in the URL as <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams</a><br>\n<code>http://127.0.0.1:5173/?q=ryan</code></li>\n<li>browsers can serialize forms by the <code>name</code> attribute of it’s input elements</li>\n<li>The name of this input is <code>q</code>, that’s why the URL has <code>?q=</code>.<br>\nSubmitting a GET form is the same as clicking a link: only the URL changes. That’s why the code we added for filtering is in the <code>loader</code>, not the <code>action</code> of this route</li>\n</ul>\n<h3 id="synchronize-urls-to-form-state">Synchronize URLs to Form State<a class="anchor" href="#synchronize-urls-to-form-state"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="submitting-the-search-form-onchange-usesubmit">Submitting the Search Form <code>onChange</code> (<code>useSubmit</code>)<a class="anchor" href="#submitting-the-search-form-onchange-usesubmit"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>have the filtering happen on every key stroke instead of when the form is explicitly submitted<br>\n<code>const submit = useSubmit()</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">input</span><span style="color:#B392F0"> onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{(</span><span style="color:#FFAB70">event</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">       submit</span><span style="color:#E1E4E8">(event.currentTarget.form);}}</span></span>\n<span class="line"></span></code></pre>\n<p>The <code>currentTarget</code> is the DOM node the event is attached to, and the <code>currentTarget.form</code> is the input’s parent form node. The <code>submit</code> function will serialize and submit any form you pass to it.</p>\n<h3 id="add-search-spinner">Add Search Spinner<a class="anchor" href="#add-search-spinner"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>The <code>navigation.location</code> will show up when the app is navigating to a new URL and loading the data for it. It then goes away when there is no pending navigation anymore</p>\n<h3 id="manage-the-history-stack-throttle">Manage the History Stack (Throttle)<a class="anchor" href="#manage-the-history-stack-throttle"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><em>replacing</em> the current entry in the history stack with the next page, instead of pushing into it</p>\n<h3 id="mutation-without-navigation">Mutation without Navigation<a class="anchor" href="#mutation-without-navigation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>useFetcher</code> allows us to communicate with loaders and actions without causing a navigation</p>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="在-history-模式中-push-和-replace-有什么区别"><a href="https://github.com/haizlin/fe-interview/issues/778">在 history 模式中 push 和 replace 有什么区别？</a><a class="anchor" href="#在-history-模式中-push-和-replace-有什么区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-的实现原理是什么"><a href="https://github.com/haizlin/fe-interview/issues/774">React-Router 的实现原理是什么？</a><a class="anchor" href="#react-router-的实现原理是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-怎么获取-url-的参数"><a href="https://github.com/haizlin/fe-interview/issues/921">React-Router 怎么获取 URL 的参数？</a><a class="anchor" href="#react-router-怎么获取-url-的参数"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-怎么获取历史对象"><a href="https://github.com/haizlin/fe-interview/issues/922">React-Router 怎么获取历史对象？</a><a class="anchor" href="#react-router-怎么获取历史对象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-怎么设置重定向"><a href="https://github.com/haizlin/fe-interview/issues/777">React-Router 怎么设置重定向？</a><a class="anchor" href="#react-router-怎么设置重定向"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="路由切换时同一组件无法重新渲染的有什么方法可以解决"><a href="https://github.com/haizlin/fe-interview/issues/833">路由切换时同一组件无法重新渲染的有什么方法可以解决？</a><a class="anchor" href="#路由切换时同一组件无法重新渲染的有什么方法可以解决"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-的路由有几种模式"><a href="https://github.com/haizlin/fe-interview/issues/772">React-Router 的路由有几种模式？</a><a class="anchor" href="#react-router-的路由有几种模式"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-的link标签和a标签有什么区别"><a href="https://github.com/haizlin/fe-interview/issues/770">React-Router 的<code>&#x3C;Link></code>标签和<code>&#x3C;a></code>标签有什么区别？</a><a class="anchor" href="#react-router-的link标签和a标签有什么区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-4-中router组件有几种类型"><a href="https://github.com/haizlin/fe-interview/issues/776">React-Router 4 中<code>&#x3C;Router></code>组件有几种类型？</a><a class="anchor" href="#react-router-4-中router组件有几种类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-3-和-react-router-4-有什么变化添加了什么好的特性"><a href="https://github.com/haizlin/fe-interview/issues/775">React-Router 3 和 React-Router 4 有什么变化？添加了什么好的特性？</a><a class="anchor" href="#react-router-3-和-react-router-4-有什么变化添加了什么好的特性"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-4-的-switch-有什么用"><a href="https://github.com/haizlin/fe-interview/issues/773">React-Router 4 的 switch 有什么用？</a><a class="anchor" href="#react-router-4-的-switch-有什么用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-router-4-怎样在路由变化时重新渲染同一个组件"><a href="https://github.com/haizlin/fe-interview/issues/771">React-Router 4 怎样在路由变化时重新渲染同一个组件？</a><a class="anchor" href="#react-router-4-怎样在路由变化时重新渲染同一个组件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="react-的路由和普通路由有什么区别"><a href="https://github.com/haizlin/fe-interview/issues/728">React 的路由和普通路由有什么区别？</a><a class="anchor" href="#react-的路由和普通路由有什么区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="请你说说-react-的路由的优缺点"><a href="https://github.com/haizlin/fe-interview/issues/727">请你说说 React 的路由的优缺点？</a><a class="anchor" href="#请你说说-react-的路由的优缺点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="请你说说-react-的路由是什么"><a href="https://github.com/haizlin/fe-interview/issues/726">请你说说 React 的路由是什么？</a><a class="anchor" href="#请你说说-react-的路由是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={topic:["Routing"],type:"D",tags:["React"],Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,title:"React Router DOM",aliases:["React Router DOM","react-router"],DateStarted:"2024-04-02T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z","linter-yaml-title-alias":"React Router DOM",category:"Front-End Frameworks",minutes:6,words:1284},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/routing/react-router.md",url=void 0;function rawContent(){return'\n# React Router DOM\n\n> [Feature Overview v6.22.3 | React Router](https://reactrouter.com/en/main/start/overview)\n\n## Why\n\n> [Server-side vs Client-side Routing | by Wilbert Schepenaar | Medium](https://medium.com/@wilbo/server-side-vs-client-side-routing-71d710e9227f) >[Server side vs Client side Routing- Scaler Topics](https://www.scaler.com/topics/react/server-client-routing/)  \n> [What is the difference between React Router and conventional routing? | by Yashi Shukla | Nerd For Tech | Medium](https://medium.com/nerd-for-tech/what-is-the-difference-between-react-router-and-conventional-routing-9b11159d92a4)\n\nReact Router enables "==client side routing=="\n\n### What is Client Side Routing & Why?\n\nIn traditional websites, the browser **requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server**. When the user clicks a link, it starts the process all over again for a new page  \nClient side routing allows your app to update the URL from a link click **without making another request for another document from the server**. Instead, your app can immediately render some new UI and make data requests with `fetch` to update the page with new information\n\n\n## Routers\nlow-level interface that is shared by all router components. \n- [`<Router>`](https://reactrouter.com/en/main/router-components/router)\n\t- should use one of the higher-level routers. Only ever need one router in a given app\n### ✅ Data Routers (v6.4)\n>v6.4, new routers that support Data API  \n> to quickly update to a v6.4 is to get the help from [`createRoutesFromElements`](https://reactrouter.com/en/main/utils/create-routes-from-elements) so you don\'t need to convert your `<Route>` elements to route objects\n- [`createBrowserRouter`](https://reactrouter.com/en/main/routers/create-browser-router)\n\t- For all web projects \n\t- uses the **full URL** instead of the hash urls (`#this/stuff`) common in web apps before `history.pushState` was standardized\n\t- better for SEO, better for server rendering, and are just more compatible with the rest of the web platform\n\t- on a static file server, you\'ll need to configure it to send all requests to your `index.html` to avoid getting 404s\n- [`createMemoryRouter`](https://reactrouter.com/en/main/routers/create-memory-router)\n\t- Testing components that use React Router APIs is easiest with [`createMemoryRouter`](https://reactrouter.com/en/main/routers/create-memory-router) or [`<MemoryRouter>`](https://reactrouter.com/en/main/router-components/memory-router) instead of the routers you use in your app that require DOM history APIs\n- [`createHashRouter`](https://reactrouter.com/en/main/routers/create-hash-router)\n\t- If for some reason you can\'t use the full URL, [`createHashRouter`](https://reactrouter.com/en/main/routers/create-hash-router) is the next best thing\n- [`createStaticRouter`](https://reactrouter.com/en/main/routers/create-static-router)\n### 🟨 Old Router Components\n> Router components that do not support the data APIs:  \n> recommend updating your app to use one of the new routers from 6.4\n- [`<BrowserRouter>`](https://reactrouter.com/en/main/router-components/browser-router)\n- [`<MemoryRouter>`](https://reactrouter.com/en/main/router-components/memory-router)\n- [`<HashRouter>`](https://reactrouter.com/en/main/router-components/hash-router)\n- [`<NativeRouter>`](https://reactrouter.com/en/main/router-components/native-router)\n- [`<StaticRouter>`](https://reactrouter.com/en/main/router-components/static-router)\n## Route\nData APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`route.action`](https://reactrouter.com/en/main/route/action)\n- [`route.errorElement`](https://reactrouter.com/en/main/route/error-element)\n- [`route.lazy`](https://reactrouter.com/en/main/route/lazy)\n- [`route.loader`](https://reactrouter.com/en/main/route/loader)\n- [`route.shouldRevalidate`](https://reactrouter.com/en/main/route/should-revalidate)\n- [`route.handle`](https://reactrouter.com/en/main/route/route#handle)\n\n## Components\n>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`<Await>`](https://reactrouter.com/en/main/components/await)\n- [`<Form>`](https://reactrouter.com/en/main/components/form)\n- [`<ScrollRestoration>`](https://reactrouter.com/en/main/components/scroll-restoration)\n## Hooks\n>Data APIs for Route; Only work when using a [[front-end-frameworks/react/routing/react-router#✅ Data Routers v6 4|✅ Data Router v6 4]]\n- [`useActionData`](https://reactrouter.com/en/main/hooks/use-action-data)\n- [`useAsyncError`](https://reactrouter.com/en/main/hooks/use-async-error)\n- [`useAsyncValue`](https://reactrouter.com/en/main/hooks/use-async-value)\n- [`useFetcher`](https://reactrouter.com/en/main/hooks/use-fetcher)\n- [`useFetchers`](https://reactrouter.com/en/main/hooks/use-fetchers)\n- [`useLoaderData`](https://reactrouter.com/en/main/hooks/use-loader-data)\n- [`useMatches`](https://reactrouter.com/en/main/hooks/use-matches)\n- [`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation)\n- [`useRevalidator`](https://reactrouter.com/en/main/hooks/use-revalidator)\n- [`useRouteError`](https://reactrouter.com/en/main/hooks/use-route-error)\n- [`useRouteLoaderData`](https://reactrouter.com/en/main/hooks/use-route-loader-data)\n- [`useSubmit`](https://reactrouter.com/en/main/hooks/use-submit)\n- `startViewTransition` support on [Link](https://reactrouter.com/en/main/components/link#unstable_viewtransition) and [useNavigate](https://reactrouter.com/en/main/hooks/use-navigate#optionsunstable_viewtransition)\n## Fetch Utilities\n\n\n## Utilities\n\n\n\n\n## Use\n\n### Main Route\n\n`import { createBrowserRouter, RouterProvider } from "react-router-dom";`\n\n### Nested Route\n\n`{... children:[{...}]}`\n\n#### Deep nested routes\n\n> [reactjs - createBrowserRouter How to nest child routes inside another route that itself is a nested child route? - Stack Overflow](https://stackoverflow.com/questions/74566649/createbrowserrouter-how-to-nest-child-routes-inside-another-route-that-itself-is/78214668#78214668)\n\n### Handle Not Found Error\n\nErrorBoundary  \n`errorElement: ...`\n\n#### ErrorPage\n\n```jsx\nimport { useRouteError } from "react-router-dom";\nexport default function ErrorPage() {\n\tconst error = useRouteError();\n\tconsole.error(error);\n\treturn (\n\t\t<div id="error-page">\n\t\t\t      <h1>Oops!</h1>      <p>Sorry, an unexpected error has occurred.</p> \n\t\t\t   {" "}\n\t\t\t<p>\n\t\t\t\t        <i>{error.statusText || error.message}</i>     {" "}\n\t\t\t</p>\n\t\t\t   {" "}\n\t\t</div>\n\t);\n}\n```\n\n### Loading Data\n\nexport an async loader function from root.jsx  \nimport the loader function in main.jsx  \n`loader: loaderFunction`  \n`import {useLoaderData} from "react-router-dom"`\n\n### Data Writes + HTML Forms\n\nReact Router emulates HTML Form navigation as the data mutation primitive  \nLinks can only change the URL while forms can also change the request method (GET vs POST) and the request body (POST form data)\n\n#### Form component\n\n`import { Form } from "react-router-dom";`\n\n- [`<Form>`](https://reactrouter.com/en/main/components/form) prevents the browser from sending the request to the server and sends it to your route `action` instead.\n- React Router uses POST as a hint to automatically revalidate the data on the page after the action finishes. That means all of your `useLoaderData` hooks update and the UI stays in sync with your data automatically!\n- Like `<Link to>`, `<Form action>` can take a *relative* value. A relative action with `destroy` will submit the form to `contact/:contactId/destroy` when clicked\n\n#### URL Params\n\n`path: "contacts/:contactId"`\n\n- The colon (`:`) has special meaning, turning it into a "dynamic segment". We call these values in the URL "URL Params", or just "params" for short.\n- These params are most often used to find a record by ID\n\n### Update with FormData\n\n[FormData - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/FormData)  \nWithout JavaScript, when a form is submitted, the browser will create [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and set it as the body of the request when it sends it to the server  \nReact Router prevents that and sends the request to your action instead, including the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)  \nEach field in the form is accessible with `formData.get(name)`\n\n```jsx\nexport async function action({ request, params }) {\n\tconst formData = await request.formData();\n\tconst firstName = formData.get("first");\n\tconst lastName = formData.get("last");\n\t// ...\n}\n```\n\n### Active Link Styling\n\nWe can use [`NavLink`](https://reactrouter.com/en/main/components/nav-link)  \nwe are passing a function to `className`. When the user is at the URL in the `NavLink`, then `isActive` will be true. When it\'s *about* to be active (the data is still loading) then `isPending` will be true\n\n### Global Pending UI\n\nAs the user navigates the app, React Router will *leave the old page up* as data is loading for the next page. We can provide the user with some feedback so the app doesn\'t feel unresponsive  \nReact Router is managing all of the state behind the scenes and reveals the pieces of it you need to build dynamic web apps. We\'ll use the [`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation) hook  \n[`useNavigation`](https://reactrouter.com/en/main/hooks/use-navigation) returns the current navigation state: it can be one of `"idle" | "submitting" | "loading"`\n\n### Contextual Error\n\ncreate a contextual error message for the destroy route  \nuser now has more options than slamming refresh, they can continue to interact with the parts of the page that aren\'t having trouble\n\n### Index Route\n\nYou can think of index routes as the default child route to fill in that space.\n\n### Cancel Button (`useNavigate`)\n\n`const navigate = useNavigate();`  \n`<button type="button" onClick={() => {navigate(-1); }}>`\n\n- A `<button type="button">`, while seemingly redundant, is the HTML way of preventing a button from submitting its form  \n  when the user clicks "Cancel", they\'ll be sent back one entry in the browser\'s history\n\n## URL Search Params and GET Submissions\n\nAll interactive UI in this demo project so far have been either  \n - **links** that change the URL or  \n - **forms** that post data to actions  \nThe search field is a mix of both!\n\n- The search form does not have `<form method="post">`. The default `method` is `"get"`  \n  the browser\'s URL contains your query in the URL as [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)  \n  `http://127.0.0.1:5173/?q=ryan`\n- browsers can serialize forms by the `name` attribute of it\'s input elements\n- The name of this input is `q`, that\'s why the URL has `?q=`.  \n  Submitting a GET form is the same as clicking a link: only the URL changes. That\'s why the code we added for filtering is in the `loader`, not the `action` of this route\n\n### Synchronize URLs to Form State\n\n### Submitting the Search Form `onChange` (`useSubmit`)\n\nhave the filtering happen on every key stroke instead of when the form is explicitly submitted  \n`const submit = useSubmit()`\n\n```jsx\n<input onChange={(event) => {\n       submit(event.currentTarget.form);}}\n```\n\nThe `currentTarget` is the DOM node the event is attached to, and the `currentTarget.form` is the input\'s parent form node. The `submit` function will serialize and submit any form you pass to it.\n\n### Add Search Spinner\n\nThe `navigation.location` will show up when the app is navigating to a new URL and loading the data for it. It then goes away when there is no pending navigation anymore\n\n### Manage the History Stack (Throttle)\n\n*replacing* the current entry in the history stack with the next page, instead of pushing into it\n\n### Mutation without Navigation\n\n`useFetcher` allows us to communicate with loaders and actions without causing a navigation\n\n\n\n## Questions\n#### [在 history 模式中 push 和 replace 有什么区别？](https://github.com/haizlin/fe-interview/issues/778)\n\n#### [React-Router 的实现原理是什么？](https://github.com/haizlin/fe-interview/issues/774)\n\n#### [React-Router 怎么获取 URL 的参数？](https://github.com/haizlin/fe-interview/issues/921)\n\n#### [React-Router 怎么获取历史对象？](https://github.com/haizlin/fe-interview/issues/922)\n\n\n#### [React-Router 怎么设置重定向？](https://github.com/haizlin/fe-interview/issues/777)\n\n#### [路由切换时同一组件无法重新渲染的有什么方法可以解决？](https://github.com/haizlin/fe-interview/issues/833)\n\n#### [React-Router 的路由有几种模式？](https://github.com/haizlin/fe-interview/issues/772)\n\n#### [React-Router 的`<Link>`标签和`<a>`标签有什么区别？](https://github.com/haizlin/fe-interview/issues/770)\n\n#### [React-Router 4 中`<Router>`组件有几种类型？](https://github.com/haizlin/fe-interview/issues/776)\n\n#### [React-Router 3 和 React-Router 4 有什么变化？添加了什么好的特性？](https://github.com/haizlin/fe-interview/issues/775)\n\n#### [React-Router 4 的 switch 有什么用？](https://github.com/haizlin/fe-interview/issues/773)\n\n#### [React-Router 4 怎样在路由变化时重新渲染同一个组件？](https://github.com/haizlin/fe-interview/issues/771)\n\n\n#### [React 的路由和普通路由有什么区别？](https://github.com/haizlin/fe-interview/issues/728)\n\n#### [请你说说 React 的路由的优缺点？](https://github.com/haizlin/fe-interview/issues/727)\n\n#### [请你说说 React 的路由是什么？](https://github.com/haizlin/fe-interview/issues/726)\n\n\n\n\n\n\n\n\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"react-router-dom",text:"React Router DOM#"},{depth:2,slug:"why",text:"Why#"},{depth:3,slug:"what-is-client-side-routing--why",text:"What is Client Side Routing & Why?#"},{depth:2,slug:"routers",text:"Routers#"},{depth:3,slug:"-data-routers-v64",text:"✅ Data Routers (v6.4)#"},{depth:3,slug:"-old-router-components",text:"🟨 Old Router Components#"},{depth:2,slug:"route",text:"Route#"},{depth:2,slug:"components",text:"Components#"},{depth:2,slug:"hooks",text:"Hooks#"},{depth:2,slug:"fetch-utilities",text:"Fetch Utilities#"},{depth:2,slug:"utilities",text:"Utilities#"},{depth:2,slug:"use",text:"Use#"},{depth:3,slug:"main-route",text:"Main Route#"},{depth:3,slug:"nested-route",text:"Nested Route#"},{depth:4,slug:"deep-nested-routes",text:"Deep nested routes#"},{depth:3,slug:"handle-not-found-error",text:"Handle Not Found Error#"},{depth:4,slug:"errorpage",text:"ErrorPage#"},{depth:3,slug:"loading-data",text:"Loading Data#"},{depth:3,slug:"data-writes--html-forms",text:"Data Writes + HTML Forms#"},{depth:4,slug:"form-component",text:"Form component#"},{depth:4,slug:"url-params",text:"URL Params#"},{depth:3,slug:"update-with-formdata",text:"Update with FormData#"},{depth:3,slug:"active-link-styling",text:"Active Link Styling#"},{depth:3,slug:"global-pending-ui",text:"Global Pending UI#"},{depth:3,slug:"contextual-error",text:"Contextual Error#"},{depth:3,slug:"index-route",text:"Index Route#"},{depth:3,slug:"cancel-button-usenavigate",text:"Cancel Button (useNavigate)#"},{depth:2,slug:"url-search-params-and-get-submissions",text:"URL Search Params and GET Submissions#"},{depth:3,slug:"synchronize-urls-to-form-state",text:"Synchronize URLs to Form State#"},{depth:3,slug:"submitting-the-search-form-onchange-usesubmit",text:"Submitting the Search Form onChange (useSubmit)#"},{depth:3,slug:"add-search-spinner",text:"Add Search Spinner#"},{depth:3,slug:"manage-the-history-stack-throttle",text:"Manage the History Stack (Throttle)#"},{depth:3,slug:"mutation-without-navigation",text:"Mutation without Navigation#"},{depth:2,slug:"questions",text:"Questions#"},{depth:4,slug:"在-history-模式中-push-和-replace-有什么区别",text:"在 history 模式中 push 和 replace 有什么区别？#"},{depth:4,slug:"react-router-的实现原理是什么",text:"React-Router 的实现原理是什么？#"},{depth:4,slug:"react-router-怎么获取-url-的参数",text:"React-Router 怎么获取 URL 的参数？#"},{depth:4,slug:"react-router-怎么获取历史对象",text:"React-Router 怎么获取历史对象？#"},{depth:4,slug:"react-router-怎么设置重定向",text:"React-Router 怎么设置重定向？#"},{depth:4,slug:"路由切换时同一组件无法重新渲染的有什么方法可以解决",text:"路由切换时同一组件无法重新渲染的有什么方法可以解决？#"},{depth:4,slug:"react-router-的路由有几种模式",text:"React-Router 的路由有几种模式？#"},{depth:4,slug:"react-router-的link标签和a标签有什么区别",text:"React-Router 的<Link>标签和<a>标签有什么区别？#"},{depth:4,slug:"react-router-4-中router组件有几种类型",text:"React-Router 4 中<Router>组件有几种类型？#"},{depth:4,slug:"react-router-3-和-react-router-4-有什么变化添加了什么好的特性",text:"React-Router 3 和 React-Router 4 有什么变化？添加了什么好的特性？#"},{depth:4,slug:"react-router-4-的-switch-有什么用",text:"React-Router 4 的 switch 有什么用？#"},{depth:4,slug:"react-router-4-怎样在路由变化时重新渲染同一个组件",text:"React-Router 4 怎样在路由变化时重新渲染同一个组件？#"},{depth:4,slug:"react-的路由和普通路由有什么区别",text:"React 的路由和普通路由有什么区别？#"},{depth:4,slug:"请你说说-react-的路由的优缺点",text:"请你说说 React 的路由的优缺点？#"},{depth:4,slug:"请你说说-react-的路由是什么",text:"请你说说 React 的路由是什么？#"}]}const Content=createComponent(((e,t,n)=>{const{layout:a,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),reactRouter=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,reactRouter,slug};