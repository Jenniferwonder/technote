import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/hooks/component-update-组件更新与高级用法.md",collection="posts",slug="front-end-frameworks/react/hooks/component-update-组件更新与高级用法",body="\n# Component Update-组件更新与高级用法\n\n#### [怎样动态导入组件？](https://github.com/haizlin/fe-interview/issues/895)\n\n- 自己使用 import 和 async/await 实现的异步组件\n- [React.lazy](https://reactjs.org/docs/code-splitting.html#reactlazy)\n- 开源库 react-loadable 库/react-lazyload 库\n- babel 动态导入（Dynamic Import）\n\n#### [怎么定时更新一个组件？](https://github.com/haizlin/fe-interview/issues/883)\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\nexport default function TimerHooks() {\n\tconst [date, setDate] = useState(new Date());\n\tuseEffect(() => {\n\t\tlet timerId = setInterval(() => {\n\t\t\tsetDate(new Date());\n\t\t}, 1000);\n\t\treturn () => {\n\t\t\tclearInterval(timerId);\n\t\t};\n\t}, []);\n\treturn (\n\t\t<div>\n\t\t\t<p>时间: {date.toLocaleTimeString()}</p>\n\t\t</div>\n\t);\n}\n```\n\n#### [请说下 react 组件更新的机制是什么？](https://github.com/haizlin/fe-interview/issues/815)\n\n#### [shouldComponentUpdate 方法是做什么的？](https://github.com/haizlin/fe-interview/issues/693)\n\n#### [说说你对 windowing 的了解](https://github.com/haizlin/fe-interview/issues/935)\n\n- 'windowing' 的技术把大数据集分解为多个块，当它们滚动到视图中时可以即时加载。它也可以用于创建无限加载列表\n- 例如：react-virtualized，react-window 等都使用了“windowing”的技术\n- [https://react-window.now.sh/#/examples/list/fixed-size](https://react-window.now.sh/#/examples/list/fixed-size)\n- [https://bvaughn.github.io/react-virtualized/#/components/List](https://bvaughn.github.io/react-virtualized/#/components/List)\n\n\n\n\n\n",data={title:"Component Update-组件更新与高级用法",DateStarted:new Date(171288e7),draft:!0,tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/hooks/component-update-组件更新与高级用法.md",rawData:void 0},html='<h1 id="component-update-组件更新与高级用法">Component Update-组件更新与高级用法<a class="anchor" href="#component-update-组件更新与高级用法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h4 id="怎样动态导入组件"><a href="https://github.com/haizlin/fe-interview/issues/895">怎样动态导入组件？</a><a class="anchor" href="#怎样动态导入组件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>自己使用 import 和 async/await 实现的异步组件</li>\n<li><a href="https://reactjs.org/docs/code-splitting.html#reactlazy">React.lazy</a></li>\n<li>开源库 react-loadable 库/react-lazyload 库</li>\n<li>babel 动态导入（Dynamic Import）</li>\n</ul>\n<h4 id="怎么定时更新一个组件"><a href="https://github.com/haizlin/fe-interview/issues/883">怎么定时更新一个组件？</a><a class="anchor" href="#怎么定时更新一个组件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> React, { useState, useEffect } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "react"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> TimerHooks</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">date</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setDate</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">());</span></span>\n<span class="line"><span style="color:#B392F0">\tuseEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tlet</span><span style="color:#E1E4E8"> timerId </span><span style="color:#F97583">=</span><span style="color:#B392F0"> setInterval</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tsetDate</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">());</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tclearInterval</span><span style="color:#E1E4E8">(timerId);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t};</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, []);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t&#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>时间: {date.</span><span style="color:#B392F0">toLocaleTimeString</span><span style="color:#E1E4E8">()}&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="请说下-react-组件更新的机制是什么"><a href="https://github.com/haizlin/fe-interview/issues/815">请说下 react 组件更新的机制是什么？</a><a class="anchor" href="#请说下-react-组件更新的机制是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="shouldcomponentupdate-方法是做什么的"><a href="https://github.com/haizlin/fe-interview/issues/693">shouldComponentUpdate 方法是做什么的？</a><a class="anchor" href="#shouldcomponentupdate-方法是做什么的"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="说说你对-windowing-的了解"><a href="https://github.com/haizlin/fe-interview/issues/935">说说你对 windowing 的了解</a><a class="anchor" href="#说说你对-windowing-的了解"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>’windowing’ 的技术把大数据集分解为多个块，当它们滚动到视图中时可以即时加载。它也可以用于创建无限加载列表</li>\n<li>例如：react-virtualized，react-window 等都使用了“windowing”的技术</li>\n<li><a href="https://react-window.now.sh/#/examples/list/fixed-size">https://react-window.now.sh/#/examples/list/fixed-size</a></li>\n<li><a href="https://bvaughn.github.io/react-virtualized/#/components/List">https://bvaughn.github.io/react-virtualized/#/components/List</a></li>\n</ul>',frontmatter={aliases:["Component Update-组件更新与高级用法"],title:"Component Update-组件更新与高级用法",topic:["Component-Basics","Hooks"],type:"D",tags:["React"],DateStarted:"2024-04-12T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:"2024-04-12T00:00:00.000Z",reviewed:1,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"Component Update-组件更新与高级用法",category:"Front-End Frameworks",draft:!0,minutes:1,words:196},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/hooks/component-update-组件更新与高级用法.md",url=void 0;function rawContent(){return"\n# Component Update-组件更新与高级用法\n\n#### [怎样动态导入组件？](https://github.com/haizlin/fe-interview/issues/895)\n\n- 自己使用 import 和 async/await 实现的异步组件\n- [React.lazy](https://reactjs.org/docs/code-splitting.html#reactlazy)\n- 开源库 react-loadable 库/react-lazyload 库\n- babel 动态导入（Dynamic Import）\n\n#### [怎么定时更新一个组件？](https://github.com/haizlin/fe-interview/issues/883)\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\nexport default function TimerHooks() {\n\tconst [date, setDate] = useState(new Date());\n\tuseEffect(() => {\n\t\tlet timerId = setInterval(() => {\n\t\t\tsetDate(new Date());\n\t\t}, 1000);\n\t\treturn () => {\n\t\t\tclearInterval(timerId);\n\t\t};\n\t}, []);\n\treturn (\n\t\t<div>\n\t\t\t<p>时间: {date.toLocaleTimeString()}</p>\n\t\t</div>\n\t);\n}\n```\n\n#### [请说下 react 组件更新的机制是什么？](https://github.com/haizlin/fe-interview/issues/815)\n\n#### [shouldComponentUpdate 方法是做什么的？](https://github.com/haizlin/fe-interview/issues/693)\n\n#### [说说你对 windowing 的了解](https://github.com/haizlin/fe-interview/issues/935)\n\n- 'windowing' 的技术把大数据集分解为多个块，当它们滚动到视图中时可以即时加载。它也可以用于创建无限加载列表\n- 例如：react-virtualized，react-window 等都使用了“windowing”的技术\n- [https://react-window.now.sh/#/examples/list/fixed-size](https://react-window.now.sh/#/examples/list/fixed-size)\n- [https://bvaughn.github.io/react-virtualized/#/components/List](https://bvaughn.github.io/react-virtualized/#/components/List)\n\n\n\n\n\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"component-update-组件更新与高级用法",text:"Component Update-组件更新与高级用法#"},{depth:4,slug:"怎样动态导入组件",text:"怎样动态导入组件？#"},{depth:4,slug:"怎么定时更新一个组件",text:"怎么定时更新一个组件？#"},{depth:4,slug:"请说下-react-组件更新的机制是什么",text:"请说下 react 组件更新的机制是什么？#"},{depth:4,slug:"shouldcomponentupdate-方法是做什么的",text:"shouldComponentUpdate 方法是做什么的？#"},{depth:4,slug:"说说你对-windowing-的了解",text:"说说你对 windowing 的了解#"}]}const Content=createComponent(((t,n,e)=>{const{layout:s,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),componentUpdate__________=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,componentUpdate__________,data,id,slug};