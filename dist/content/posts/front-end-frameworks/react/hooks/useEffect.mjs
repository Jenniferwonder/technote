import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/hooks/useEffect.md",collection="posts",slug="front-end-frameworks/react/hooks/useeffect",body="\n# useEffect\n\n## Why\n\na React Hook that lets you [synchronize a component with an external system.](https://react.dev/learn/synchronizing-with-effects)  \n✅ For example, you might want to control a non-React component based on the React state, ==set up a server connection==, or ==send an analytics log== when a component appears on the screen. _Effects_ let you run some code after rendering so that you can synchronize your component with some system outside of React.  \n✅ _Effects_ let you specify side effects that are caused by rendering itself, rather than by a particular event like a click  \n❌ If your Effect only adjusts some state based on other state, [you might not need an Effect](https://react.dev/learn/you-might-not-need-an-effect)  \n❌ If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace `useEffect` with [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect)\n\n- Even if your Effect was caused by an interaction (like a click), **the browser may repaint the screen before processing the state updates inside your Effect.** Usually, that’s what you want. However, if you must block the browser from repainting the screen, you need to replace `useEffect` with [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect)\n\n## Basics\n\n`useEffect(setup, dependencies?)`  \n`useEffect` 是异步的\n\n### Parameters\n\n#### 1. A `setup` function with setup code\n\n- The function with your Effect's logic that connects to the external system, such as\n  - A timer managed with [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) and [`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval).\n  - An event subscription using [`window.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) and [`window.removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n  - A third-party animation library with an API like `animation.start()` and `animation.reset()`\n- It should return a *cleanup function* with cleanup code that disconnectHs from that system.\n- The cleanup function should stop or undo whatever the setup function was doing\n- **React calls your setup and cleanup functions whenever it's necessary, which may happen multiple times**\n  - Your setup code runs when your component is added to the page *(mounts)*\n  - After every re-render of your component where the dependencies have changed\n    - First, your cleanup code runs with the old props and state\n    - Then, your setup code runs with the new props and state.\n\n#### 2. A list of `dependencies` (optional)\n\n- The list of all reactive values referenced inside of the `setup` code, including ==props, state, and all the variables and functions== declared directly inside your component body\n- must have a constant number of items and be written inline like `[dep1, dep2, dep3]`\n- React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison\n- Every reactive value used by your Effect's code must be declared as a dependency\n\n##### Different types of dependencies\n\n- [See the difference between passing an array of dependencies, an empty array, and no dependencies at all.](https://react.dev/reference/react/useEffect#examples-dependencies)\n  - ✅empty dependency `[]` : your Effect doesn't re-run when any of your component's props or state change; It will only run **after the initial render**\n  - ❌If you omit this argument, your Effect will re-run after every re-render of the component\n\n###### Passing a dependency array\n\n```jsx\nuseEffect(() => {\n\t// ...\n}, [a, b]); // Runs again if a or b are different\n```\n\n### Returns\n\n`useEffect` returns `undefined`\n\n## Use Case\n\n#### [Connecting to an external system](https://react.dev/reference/react/useEffect#connecting-to-an-external-system)\n\n#### [Wrapping Effects in custom Hooks](https://react.dev/reference/react/useEffect#wrapping-effects-in-custom-hooks)\n\n#### [Controlling a non-React widget](https://react.dev/reference/react/useEffect#controlling-a-non-react-widget)\n\n#### [Fetching data with Effects](https://react.dev/reference/react/useEffect#fetching-data-with-effects)\n\n❌Writing data fetching directly in Effects gets repetitive and makes it difficult to add optimizations like caching and server rendering later\n\n- **Effects don't run on the server**\n- **Fetching directly in Effects makes it easy to create “network waterfalls”**\n- **Fetching directly in Effects usually means you don’t preload or cache data**\n- **It's not very ergonomic**: too much boilerplate code involved, error-prone  \n  ✅Modern React frameworks have integrated data fetching mechanisms that are efficient  \n  ✅using or building a client-side cache: solutions include [React Query](https://tanstack.com/query/latest/), [useSWR](https://swr.vercel.app/), and [React Router 6.4+](https://beta.reactrouter.com/en/main/start/overview)\n- use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes)\n\n#### [Updating state based on previous state from an Effect](https://react.dev/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect)\n\n❌ Don't do `setCount(count+1)` in `useEffect`  \n✅ use an **updater function** `c => c + 1` to update the state in `useEffect`\n\n#### [Removing unnecessary object dependencies](https://react.dev/reference/react/useEffect#removing-unnecessary-object-dependencies)\n\n❌ Avoid using an object created during rendering as a dependency.  \n✅ Instead, create the object inside the Effect\n\n#### [Removing unnecessary function dependencies](https://react.dev/reference/react/useEffect#removing-unnecessary-function-dependencies)\n\n#### [Reading the latest props and state from an Effect](https://react.dev/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect)\n\n##### `useEffectEvent()`\n\n```jsx\nfunction Page({ url, shoppingCart }) {\n\tconst onVisit = useEffectEvent((visitedUrl) => {\n\t\tlogVisit(visitedUrl, shoppingCart.length);\n\t});\n\tuseEffect(() => {\n\t\tonVisit(url);\n\t}, [url]); // ✅ All dependencies declared\n\t// ...\n}\n```\n\n#### [Displaying different content on the server and the client](https://react.dev/reference/react/useEffect#displaying-different-content-on-the-server-and-the-client)\n\nIn rare cases, you might need to display different content on the client. For example, if your app reads some data from [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), it can't possibly do that on the server.  \nIn many cases, you can avoid the need for this by conditionally showing different things with CSS\n\n```jsx\nfunction MyComponent() {\n\tconst [didMount, setDidMount] = useState(false);\n\tuseEffect(() => {\n\t\tsetDidMount(true);\n\t}, []);\n\tif (didMount) {\n\t\t// ... return client-only JSX ...\n\t} else {\n\t\t// ... return initial JSX ...\n\t}\n}\n```\n\n## Reference\n\n- [轻松学会 React 钩子：以 useEffect() 为例 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html)\n- [A complete guide to the useEffect React Hook - LogRocket Blog](https://blog.logrocket.com/useeffect-hook-complete-guide/)\n- [https://cloud.tencent.com/developer/article/1426847](https://cloud.tencent.com/developer/article/1426847)\n\n## Questions\n\n#### [请说说什么是 useEffect？](https://github.com/haizlin/fe-interview/issues/705)\n\n#### [useEffect 和 useLayoutEffect 有什么区别？](https://github.com/haizlin/fe-interview/issues/888)\n",data={title:"useEffect",DateStarted:new Date(17095968e5),tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/hooks/useEffect.md",rawData:void 0},html='<h1 id="useeffect">useEffect<a class="anchor" href="#useeffect"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="why">Why<a class="anchor" href="#why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>a React Hook that lets you <a href="https://react.dev/learn/synchronizing-with-effects">synchronize a component with an external system.</a><br>\n✅ For example, you might want to control a non-React component based on the React state, ==set up a server connection==, or ==send an analytics log== when a component appears on the screen. <em>Effects</em> let you run some code after rendering so that you can synchronize your component with some system outside of React.<br>\n✅ <em>Effects</em> let you specify side effects that are caused by rendering itself, rather than by a particular event like a click<br>\n❌ If your Effect only adjusts some state based on other state, <a href="https://react.dev/learn/you-might-not-need-an-effect">you might not need an Effect</a><br>\n❌ If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace <code>useEffect</code> with <a href="https://react.dev/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a></p>\n<ul>\n<li>Even if your Effect was caused by an interaction (like a click), <strong>the browser may repaint the screen before processing the state updates inside your Effect.</strong> Usually, that’s what you want. However, if you must block the browser from repainting the screen, you need to replace <code>useEffect</code> with <a href="https://react.dev/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a></li>\n</ul>\n<h2 id="basics">Basics<a class="anchor" href="#basics"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><code>useEffect(setup, dependencies?)</code><br>\n<code>useEffect</code> 是异步的</p>\n<h3 id="parameters">Parameters<a class="anchor" href="#parameters"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="1-a-setup-function-withsetup-code">1. A <code>setup</code> function with setup code<a class="anchor" href="#1-a-setup-function-withsetup-code"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>The function with your Effect’s logic that connects to the external system, such as\n<ul>\n<li>A timer managed with <a href="https://developer.mozilla.org/en-US/docs/Web/API/setInterval"><code>setInterval()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/clearInterval"><code>clearInterval()</code></a>.</li>\n<li>An event subscription using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><code>window.addEventListener()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"><code>window.removeEventListener()</code></a></li>\n<li>A third-party animation library with an API like <code>animation.start()</code> and <code>animation.reset()</code></li>\n</ul>\n</li>\n<li>It should return a <em>cleanup function</em> with cleanup code that disconnectHs from that system.</li>\n<li>The cleanup function should stop or undo whatever the setup function was doing</li>\n<li><strong>React calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times</strong>\n<ul>\n<li>Your setup code runs when your component is added to the page <em>(mounts)</em></li>\n<li>After every re-render of your component where the dependencies have changed\n<ul>\n<li>First, your cleanup code runs with the old props and state</li>\n<li>Then, your setup code runs with the new props and state.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id="2-alist-of-dependencies-optional">2. A list of <code>dependencies</code> (optional)<a class="anchor" href="#2-alist-of-dependencies-optional"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>The list of all reactive values referenced inside of the <code>setup</code> code, including ==props, state, and all the variables and functions== declared directly inside your component body</li>\n<li>must have a constant number of items and be written inline like <code>[dep1, dep2, dep3]</code></li>\n<li>React will compare each dependency with its previous value using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> comparison</li>\n<li>Every reactive value used by your Effect’s code must be declared as a dependency</li>\n</ul>\n<h5 id="different-types-of-dependencies">Different types of dependencies<a class="anchor" href="#different-types-of-dependencies"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<ul>\n<li><a href="https://react.dev/reference/react/useEffect#examples-dependencies">See the difference between passing an array of dependencies, an empty array, and no dependencies at all.</a>\n<ul>\n<li>✅empty dependency <code>[]</code> : your Effect doesn’t re-run when any of your component’s props or state change; It will only run <strong>after the initial render</strong></li>\n<li>❌If you omit this argument, your Effect will re-run after every re-render of the component</li>\n</ul>\n</li>\n</ul>\n<h6 id="passing-a-dependency-array">Passing a dependency array<a class="anchor" href="#passing-a-dependency-array"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h6>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">useEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t// ...</span></span>\n<span class="line"><span style="color:#E1E4E8">}, [a, b]); </span><span style="color:#6A737D">// Runs again if a or b are different</span></span>\n<span class="line"></span></code></pre>\n<h3 id="returns">Returns<a class="anchor" href="#returns"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>useEffect</code> returns <code>undefined</code></p>\n<h2 id="use-case">Use Case<a class="anchor" href="#use-case"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="connecting-to-an-external-system"><a href="https://react.dev/reference/react/useEffect#connecting-to-an-external-system">Connecting to an external system</a><a class="anchor" href="#connecting-to-an-external-system"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="wrapping-effects-in-custom-hooks"><a href="https://react.dev/reference/react/useEffect#wrapping-effects-in-custom-hooks">Wrapping Effects in custom Hooks</a><a class="anchor" href="#wrapping-effects-in-custom-hooks"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="controlling-a-non-react-widget"><a href="https://react.dev/reference/react/useEffect#controlling-a-non-react-widget">Controlling a non-React widget</a><a class="anchor" href="#controlling-a-non-react-widget"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="fetching-data-with-effects"><a href="https://react.dev/reference/react/useEffect#fetching-data-with-effects">Fetching data with Effects</a><a class="anchor" href="#fetching-data-with-effects"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>❌Writing data fetching directly in Effects gets repetitive and makes it difficult to add optimizations like caching and server rendering later</p>\n<ul>\n<li><strong>Effects don’t run on the server</strong></li>\n<li><strong>Fetching directly in Effects makes it easy to create “network waterfalls”</strong></li>\n<li><strong>Fetching directly in Effects usually means you don’t preload or cache data</strong></li>\n<li><strong>It’s not very ergonomic</strong>: too much boilerplate code involved, error-prone<br>\n✅Modern React frameworks have integrated data fetching mechanisms that are efficient<br>\n✅using or building a client-side cache: solutions include <a href="https://tanstack.com/query/latest/">React Query</a>, <a href="https://swr.vercel.app/">useSWR</a>, and <a href="https://beta.reactrouter.com/en/main/start/overview">React Router 6.4+</a></li>\n<li>use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes)</li>\n</ul>\n<h4 id="updating-state-based-on-previous-state-from-an-effect"><a href="https://react.dev/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect">Updating state based on previous state from an Effect</a><a class="anchor" href="#updating-state-based-on-previous-state-from-an-effect"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>❌ Don’t do <code>setCount(count+1)</code> in <code>useEffect</code><br>\n✅ use an <strong>updater function</strong> <code>c => c + 1</code> to update the state in <code>useEffect</code></p>\n<h4 id="removing-unnecessary-object-dependencies"><a href="https://react.dev/reference/react/useEffect#removing-unnecessary-object-dependencies">Removing unnecessary object dependencies</a><a class="anchor" href="#removing-unnecessary-object-dependencies"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>❌ Avoid using an object created during rendering as a dependency.<br>\n✅ Instead, create the object inside the Effect</p>\n<h4 id="removing-unnecessary-function-dependencies"><a href="https://react.dev/reference/react/useEffect#removing-unnecessary-function-dependencies">Removing unnecessary function dependencies</a><a class="anchor" href="#removing-unnecessary-function-dependencies"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="reading-the-latest-props-and-state-from-an-effect"><a href="https://react.dev/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect">Reading the latest props and state from an Effect</a><a class="anchor" href="#reading-the-latest-props-and-state-from-an-effect"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h5 id="useeffectevent"><code>useEffectEvent()</code><a class="anchor" href="#useeffectevent"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> Page</span><span style="color:#E1E4E8">({ </span><span style="color:#FFAB70">url</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">shoppingCart</span><span style="color:#E1E4E8"> }) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> onVisit</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useEffectEvent</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">visitedUrl</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tlogVisit</span><span style="color:#E1E4E8">(visitedUrl, shoppingCart.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#B392F0">\tuseEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tonVisit</span><span style="color:#E1E4E8">(url);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, [url]); </span><span style="color:#6A737D">// ✅ All dependencies declared</span></span>\n<span class="line"><span style="color:#6A737D">\t// ...</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="displaying-different-content-on-the-server-and-the-client"><a href="https://react.dev/reference/react/useEffect#displaying-different-content-on-the-server-and-the-client">Displaying different content on the server and the client</a><a class="anchor" href="#displaying-different-content-on-the-server-and-the-client"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>In rare cases, you might need to display different content on the client. For example, if your app reads some data from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"><code>localStorage</code></a>, it can’t possibly do that on the server.<br>\nIn many cases, you can avoid the need for this by conditionally showing different things with CSS</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> MyComponent</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">didMount</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setDidMount</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\tuseEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetDidMount</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, []);</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (didMount) {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// ... return client-only JSX ...</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// ... return initial JSX ...</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html">轻松学会 React 钩子：以 useEffect() 为例 - 阮一峰的网络日志</a></li>\n<li><a href="https://blog.logrocket.com/useeffect-hook-complete-guide/">A complete guide to the useEffect React Hook - LogRocket Blog</a></li>\n<li><a href="https://cloud.tencent.com/developer/article/1426847">https://cloud.tencent.com/developer/article/1426847</a></li>\n</ul>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="请说说什么是-useeffect"><a href="https://github.com/haizlin/fe-interview/issues/705">请说说什么是 useEffect？</a><a class="anchor" href="#请说说什么是-useeffect"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="useeffect-和-uselayouteffect-有什么区别"><a href="https://github.com/haizlin/fe-interview/issues/888">useEffect 和 useLayoutEffect 有什么区别？</a><a class="anchor" href="#useeffect-和-uselayouteffect-有什么区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={title:"useEffect",topic:["Hooks"],type:"D",tags:["React"],DateStarted:"2024-03-05T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,category:"Front-End Frameworks",minutes:4,words:763},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/hooks/useEffect.md",url=void 0;function rawContent(){return"\n# useEffect\n\n## Why\n\na React Hook that lets you [synchronize a component with an external system.](https://react.dev/learn/synchronizing-with-effects)  \n✅ For example, you might want to control a non-React component based on the React state, ==set up a server connection==, or ==send an analytics log== when a component appears on the screen. _Effects_ let you run some code after rendering so that you can synchronize your component with some system outside of React.  \n✅ _Effects_ let you specify side effects that are caused by rendering itself, rather than by a particular event like a click  \n❌ If your Effect only adjusts some state based on other state, [you might not need an Effect](https://react.dev/learn/you-might-not-need-an-effect)  \n❌ If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace `useEffect` with [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect)\n\n- Even if your Effect was caused by an interaction (like a click), **the browser may repaint the screen before processing the state updates inside your Effect.** Usually, that’s what you want. However, if you must block the browser from repainting the screen, you need to replace `useEffect` with [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect)\n\n## Basics\n\n`useEffect(setup, dependencies?)`  \n`useEffect` 是异步的\n\n### Parameters\n\n#### 1. A `setup` function with setup code\n\n- The function with your Effect's logic that connects to the external system, such as\n  - A timer managed with [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) and [`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval).\n  - An event subscription using [`window.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) and [`window.removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n  - A third-party animation library with an API like `animation.start()` and `animation.reset()`\n- It should return a *cleanup function* with cleanup code that disconnectHs from that system.\n- The cleanup function should stop or undo whatever the setup function was doing\n- **React calls your setup and cleanup functions whenever it's necessary, which may happen multiple times**\n  - Your setup code runs when your component is added to the page *(mounts)*\n  - After every re-render of your component where the dependencies have changed\n    - First, your cleanup code runs with the old props and state\n    - Then, your setup code runs with the new props and state.\n\n#### 2. A list of `dependencies` (optional)\n\n- The list of all reactive values referenced inside of the `setup` code, including ==props, state, and all the variables and functions== declared directly inside your component body\n- must have a constant number of items and be written inline like `[dep1, dep2, dep3]`\n- React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison\n- Every reactive value used by your Effect's code must be declared as a dependency\n\n##### Different types of dependencies\n\n- [See the difference between passing an array of dependencies, an empty array, and no dependencies at all.](https://react.dev/reference/react/useEffect#examples-dependencies)\n  - ✅empty dependency `[]` : your Effect doesn't re-run when any of your component's props or state change; It will only run **after the initial render**\n  - ❌If you omit this argument, your Effect will re-run after every re-render of the component\n\n###### Passing a dependency array\n\n```jsx\nuseEffect(() => {\n\t// ...\n}, [a, b]); // Runs again if a or b are different\n```\n\n### Returns\n\n`useEffect` returns `undefined`\n\n## Use Case\n\n#### [Connecting to an external system](https://react.dev/reference/react/useEffect#connecting-to-an-external-system)\n\n#### [Wrapping Effects in custom Hooks](https://react.dev/reference/react/useEffect#wrapping-effects-in-custom-hooks)\n\n#### [Controlling a non-React widget](https://react.dev/reference/react/useEffect#controlling-a-non-react-widget)\n\n#### [Fetching data with Effects](https://react.dev/reference/react/useEffect#fetching-data-with-effects)\n\n❌Writing data fetching directly in Effects gets repetitive and makes it difficult to add optimizations like caching and server rendering later\n\n- **Effects don't run on the server**\n- **Fetching directly in Effects makes it easy to create “network waterfalls”**\n- **Fetching directly in Effects usually means you don’t preload or cache data**\n- **It's not very ergonomic**: too much boilerplate code involved, error-prone  \n  ✅Modern React frameworks have integrated data fetching mechanisms that are efficient  \n  ✅using or building a client-side cache: solutions include [React Query](https://tanstack.com/query/latest/), [useSWR](https://swr.vercel.app/), and [React Router 6.4+](https://beta.reactrouter.com/en/main/start/overview)\n- use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes)\n\n#### [Updating state based on previous state from an Effect](https://react.dev/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect)\n\n❌ Don't do `setCount(count+1)` in `useEffect`  \n✅ use an **updater function** `c => c + 1` to update the state in `useEffect`\n\n#### [Removing unnecessary object dependencies](https://react.dev/reference/react/useEffect#removing-unnecessary-object-dependencies)\n\n❌ Avoid using an object created during rendering as a dependency.  \n✅ Instead, create the object inside the Effect\n\n#### [Removing unnecessary function dependencies](https://react.dev/reference/react/useEffect#removing-unnecessary-function-dependencies)\n\n#### [Reading the latest props and state from an Effect](https://react.dev/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect)\n\n##### `useEffectEvent()`\n\n```jsx\nfunction Page({ url, shoppingCart }) {\n\tconst onVisit = useEffectEvent((visitedUrl) => {\n\t\tlogVisit(visitedUrl, shoppingCart.length);\n\t});\n\tuseEffect(() => {\n\t\tonVisit(url);\n\t}, [url]); // ✅ All dependencies declared\n\t// ...\n}\n```\n\n#### [Displaying different content on the server and the client](https://react.dev/reference/react/useEffect#displaying-different-content-on-the-server-and-the-client)\n\nIn rare cases, you might need to display different content on the client. For example, if your app reads some data from [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), it can't possibly do that on the server.  \nIn many cases, you can avoid the need for this by conditionally showing different things with CSS\n\n```jsx\nfunction MyComponent() {\n\tconst [didMount, setDidMount] = useState(false);\n\tuseEffect(() => {\n\t\tsetDidMount(true);\n\t}, []);\n\tif (didMount) {\n\t\t// ... return client-only JSX ...\n\t} else {\n\t\t// ... return initial JSX ...\n\t}\n}\n```\n\n## Reference\n\n- [轻松学会 React 钩子：以 useEffect() 为例 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html)\n- [A complete guide to the useEffect React Hook - LogRocket Blog](https://blog.logrocket.com/useeffect-hook-complete-guide/)\n- [https://cloud.tencent.com/developer/article/1426847](https://cloud.tencent.com/developer/article/1426847)\n\n## Questions\n\n#### [请说说什么是 useEffect？](https://github.com/haizlin/fe-interview/issues/705)\n\n#### [useEffect 和 useLayoutEffect 有什么区别？](https://github.com/haizlin/fe-interview/issues/888)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"useeffect",text:"useEffect#"},{depth:2,slug:"why",text:"Why#"},{depth:2,slug:"basics",text:"Basics#"},{depth:3,slug:"parameters",text:"Parameters#"},{depth:4,slug:"1-a-setup-function-withsetup-code",text:"1. A setup function with setup code#"},{depth:4,slug:"2-alist-of-dependencies-optional",text:"2. A list of dependencies (optional)#"},{depth:5,slug:"different-types-of-dependencies",text:"Different types of dependencies#"},{depth:6,slug:"passing-a-dependency-array",text:"Passing a dependency array#"},{depth:3,slug:"returns",text:"Returns#"},{depth:2,slug:"use-case",text:"Use Case#"},{depth:4,slug:"connecting-to-an-external-system",text:"Connecting to an external system#"},{depth:4,slug:"wrapping-effects-in-custom-hooks",text:"Wrapping Effects in custom Hooks#"},{depth:4,slug:"controlling-a-non-react-widget",text:"Controlling a non-React widget#"},{depth:4,slug:"fetching-data-with-effects",text:"Fetching data with Effects#"},{depth:4,slug:"updating-state-based-on-previous-state-from-an-effect",text:"Updating state based on previous state from an Effect#"},{depth:4,slug:"removing-unnecessary-object-dependencies",text:"Removing unnecessary object dependencies#"},{depth:4,slug:"removing-unnecessary-function-dependencies",text:"Removing unnecessary function dependencies#"},{depth:4,slug:"reading-the-latest-props-and-state-from-an-effect",text:"Reading the latest props and state from an Effect#"},{depth:5,slug:"useeffectevent",text:"useEffectEvent()#"},{depth:4,slug:"displaying-different-content-on-the-server-and-the-client",text:"Displaying different content on the server and the client#"},{depth:2,slug:"reference",text:"Reference#"},{depth:2,slug:"questions",text:"Questions#"},{depth:4,slug:"请说说什么是-useeffect",text:"请说说什么是 useEffect？#"},{depth:4,slug:"useeffect-和-uselayouteffect-有什么区别",text:"useEffect 和 useLayoutEffect 有什么区别？#"}]}const Content=createComponent(((e,n,t)=>{const{layout:a,...s}=frontmatter;return s.file=file,s.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),useEffect=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,useEffect};