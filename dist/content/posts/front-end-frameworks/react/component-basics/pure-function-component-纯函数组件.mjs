import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-frameworks/react/component-basics/pure-function-component-纯函数组件.md",collection="posts",slug="front-end-frameworks/react/component-basics/pure-function-component-纯函数组件",body="\n# Pure-Function-Component-纯函数组件\n\n- [请描述你对纯函数的理解？](https://github.com/haizlin/fe-interview/issues/632)\n- [解释下 React 中 component 和 pureComponent 两者的区别是什么？](https://github.com/haizlin/fe-interview/issues/618)\n\n在 React 中，纯函数指的是给定相同的输入，始终返回相同的输出，而且没有副作用的函数。它们不会改变其输入，也不会影响到系统的任何其他部分，例如修改全局变量、修改传入的对象等。  \n在 React 中，纯函数特别重要，因为当父组件的状态或属性改变时，React 会重新渲染整个组件树。如果组件内部存在副作用，那么每次渲染时都会重新触发这些副作用，导致性能下降。而纯函数则不会有这个问题，它只会在必要的情况下被调用，从而优化了应用程序的性能。\n##### Pure Function\n\n> reference: [Keeping Components Pure – React](https://react.dev/learn/keeping-components-pure#where-you-_can_-cause-side-effects)\n\nReact is designed around the concept of functional programming, assuming that every component you write is a **pure function**. This means that React components you write must always return the same JSX given the same inputs\n\n- **It minds its own business.** It does not change any objects or variables that existed before it was called\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result  \n  📌 PureFun.jsx  \n  📌 ImpureFun.jsx\n\n##### Side Effects\n\n**Side effects**: updating the screen, starting an animation, changing the data, things that happen _on the side_, not during rendering  \nSide effects usually belong inside [event handlers](https://react.dev/learn/responding-to-events), which don't run _during_ rendering, so event handlers don't need to be pure.\n\n##### Benefits\n\n- Your components could run in a different environment—for example, on the server!\n- You can improve performance by [skipping rendering](https://react.dev/reference/react/memo) components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n- If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\n\n\n\n",data={title:"Pure-Function-Component-纯函数组件",DateStarted:new Date(171288e7),tags:["React"],category:"Front-End Frameworks"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/component-basics/pure-function-component-纯函数组件.md",rawData:void 0},html='<h1 id="pure-function-component-纯函数组件">Pure-Function-Component-纯函数组件<a class="anchor" href="#pure-function-component-纯函数组件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<ul>\n<li><a href="https://github.com/haizlin/fe-interview/issues/632">请描述你对纯函数的理解？</a></li>\n<li><a href="https://github.com/haizlin/fe-interview/issues/618">解释下 React 中 component 和 pureComponent 两者的区别是什么？</a></li>\n</ul>\n<p>在 React 中，纯函数指的是给定相同的输入，始终返回相同的输出，而且没有副作用的函数。它们不会改变其输入，也不会影响到系统的任何其他部分，例如修改全局变量、修改传入的对象等。<br>\n在 React 中，纯函数特别重要，因为当父组件的状态或属性改变时，React 会重新渲染整个组件树。如果组件内部存在副作用，那么每次渲染时都会重新触发这些副作用，导致性能下降。而纯函数则不会有这个问题，它只会在必要的情况下被调用，从而优化了应用程序的性能。</p>\n<h5 id="pure-function">Pure Function<a class="anchor" href="#pure-function"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<blockquote>\n<p>reference: <a href="https://react.dev/learn/keeping-components-pure#where-you-_can_-cause-side-effects">Keeping Components Pure – React</a></p>\n</blockquote>\n<p>React is designed around the concept of functional programming, assuming that every component you write is a <strong>pure function</strong>. This means that React components you write must always return the same JSX given the same inputs</p>\n<ul>\n<li><strong>It minds its own business.</strong> It does not change any objects or variables that existed before it was called</li>\n<li><strong>Same inputs, same output.</strong> Given the same inputs, a pure function should always return the same result<br>\n📌 PureFun.jsx<br>\n📌 ImpureFun.jsx</li>\n</ul>\n<h5 id="side-effects">Side Effects<a class="anchor" href="#side-effects"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<p><strong>Side effects</strong>: updating the screen, starting an animation, changing the data, things that happen <em>on the side</em>, not during rendering<br>\nSide effects usually belong inside <a href="https://react.dev/learn/responding-to-events">event handlers</a>, which don’t run <em>during</em> rendering, so event handlers don’t need to be pure.</p>\n<h5 id="benefits">Benefits<a class="anchor" href="#benefits"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<ul>\n<li>Your components could run in a different environment—for example, on the server!</li>\n<li>You can improve performance by <a href="https://react.dev/reference/react/memo">skipping rendering</a> components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.</li>\n<li>If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.</li>\n</ul>',frontmatter={aliases:["Pure-Function-Component-纯函数组件"],title:"Pure-Function-Component-纯函数组件",topic:["Component-Basics"],type:"D",tags:["React"],DateStarted:"2024-04-12T00:00:00.000Z",DateModified:"2024-06-16T00:00:00.000Z",Datereviewed:"2024-06-16T00:00:00.000Z",reviewed:2,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"Pure-Function-Component-纯函数组件",category:"Front-End Frameworks",minutes:2,words:403},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/react/component-basics/pure-function-component-纯函数组件.md",url=void 0;function rawContent(){return"\n# Pure-Function-Component-纯函数组件\n\n- [请描述你对纯函数的理解？](https://github.com/haizlin/fe-interview/issues/632)\n- [解释下 React 中 component 和 pureComponent 两者的区别是什么？](https://github.com/haizlin/fe-interview/issues/618)\n\n在 React 中，纯函数指的是给定相同的输入，始终返回相同的输出，而且没有副作用的函数。它们不会改变其输入，也不会影响到系统的任何其他部分，例如修改全局变量、修改传入的对象等。  \n在 React 中，纯函数特别重要，因为当父组件的状态或属性改变时，React 会重新渲染整个组件树。如果组件内部存在副作用，那么每次渲染时都会重新触发这些副作用，导致性能下降。而纯函数则不会有这个问题，它只会在必要的情况下被调用，从而优化了应用程序的性能。\n##### Pure Function\n\n> reference: [Keeping Components Pure – React](https://react.dev/learn/keeping-components-pure#where-you-_can_-cause-side-effects)\n\nReact is designed around the concept of functional programming, assuming that every component you write is a **pure function**. This means that React components you write must always return the same JSX given the same inputs\n\n- **It minds its own business.** It does not change any objects or variables that existed before it was called\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result  \n  📌 PureFun.jsx  \n  📌 ImpureFun.jsx\n\n##### Side Effects\n\n**Side effects**: updating the screen, starting an animation, changing the data, things that happen _on the side_, not during rendering  \nSide effects usually belong inside [event handlers](https://react.dev/learn/responding-to-events), which don't run _during_ rendering, so event handlers don't need to be pure.\n\n##### Benefits\n\n- Your components could run in a different environment—for example, on the server!\n- You can improve performance by [skipping rendering](https://react.dev/reference/react/memo) components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n- If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\n\n\n\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"pure-function-component-纯函数组件",text:"Pure-Function-Component-纯函数组件#"},{depth:5,slug:"pure-function",text:"Pure Function#"},{depth:5,slug:"side-effects",text:"Side Effects#"},{depth:5,slug:"benefits",text:"Benefits#"}]}const Content=createComponent(((e,n,t)=>{const{layout:o,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),pureFunctionComponent______=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,pureFunctionComponent______,slug};