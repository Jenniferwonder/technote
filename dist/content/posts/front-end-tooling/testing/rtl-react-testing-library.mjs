import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1718090302448/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-tooling/testing/rtl-react-testing-library.md",collection="posts",slug="front-end-tooling/testing/rtl-react-testing-library",body="# RTL-React Testing Library\n>render react component and simulating events \n\n## Reference\n- [React Testing Library | Testing Library (testing-library.com)](https://testing-library.com/docs/react-testing-library/intro/)\n- Tutorials\n\t- [React Testing Library Tutorial (robinwieruch.de)](https://www.robinwieruch.de/react-testing-library/)\n## Example component for testing\n\n```jsx\nimport * as React from 'react';\nfunction App() {\n  const [search, setSearch] = React.useState('');\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n  return (\n    <div>\n      <Search value={search} onChange={handleChange}>\n        Search:\n      </Search>\n      <p>Searches for {search ? search : '...'}</p>\n    </div>\n  );\n}\nfunction Search({ value, onChange, children }) {\n  return (\n    <div>\n      <label htmlFor=\"search\">{children}</label>\n      <input\n        id=\"search\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\nexport default App;\n```\n\n## `getBy` to Select Element \n`getBy` returns an element or an error. \n- It's a convenient side-effect of getBy that it returns an error, because it makes sure that we as developers notice early that there is something wrong in our test. \n- However, this makes it difficult to check for elements which shouldn't be there\n### screen.getByText()\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    // implicit assertion\n    // because getByText would throw error\n    // if element wouldn't be there\n    screen.getByText('Search:').toBeInTheDocument();\n    // explicit assertion\n    // recommended\n    // Use regex for partial match\n    // fails\n    expect(screen.getByText('Search')).toBeInTheDocument();\n    // succeeds\n    expect(screen.getByText('Search:')).toBeInTheDocument();\n    // succeeds\n    expect(screen.getByText(/Search/)).toBeInTheDocument();\n  });\n});\n```\n\n#### screen.getByRole()\n used to retrieve elements by [aria-label attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).  \n The neat thing about `getByRole`: it shows all the selectable roles if you provide a role that isn't available in the rendered component's HTML\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.getByRole('textbox')).toBeInTheDocument();\n  });\n});\n```\n\n### Other search types of `getBy`\n- **LabelText:** getByLabelText: `<label for=\"search\" />`\n- **PlaceholderText:** getByPlaceholderText: `<input placeholder=\"Search\" />`\n- **AltText:** getByAltText: `<img alt=\"profile\" />`\n- **DisplayValue:** getByDisplayValue: `<input value=\"JavaScript\" />`\n- **TestId** (the last resort): with `getByTestId` where one needs to assign `data-testid` attributes in the source code's HTML\n## `queryBy`\nIn order to assert elements which aren't there, we can exchange `getBy` with `queryBy`\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n  });\n});\n```\n\n#### _queryBy_ with all its search types\n- queryByText\n- queryByRole\n- queryByLabelText\n- queryByPlaceholderText\n- queryByAltText\n- queryByDisplayValue\n## `findBy`\nused for asynchronous elements which will be there eventually\n#### Example component (async)\n\n```jsx\nconst getUser = () => {\n  return Promise.resolve({ id: '1', name: 'Robin' });\n};\nfunction App() {\n  const [search, setSearch] = React.useState('');\n  const [user, setUser] = React.useState(null);\n  React.useEffect(() => {\n    const loadUser = async () => {\n      const user = await getUser();\n      setUser(user);\n    };\n    loadUser();\n  }, []);\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n  return (\n    <div>\n      {user ? <p>Signed in as {user.name}</p> : null}\n      <Search value={search} onChange={handleChange}>\n        Search:\n      </Search>\n      <p>Searches for {search ? search : '...'}</p>\n    </div>\n  );\n}\n...\n```\n\n#### use `findBy`\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async () => {\n    render(<App />);\n    expect(screen.queryByText(/Signed in as/)).toBeNull();\n    expect(await screen.findByText(/Signed in as/)).toBeInTheDocument();\n  });\n});\n```\n\n#### _findBy_ with all its search types:\n- findByText\n- findByRole\n- findByLabelText\n- findByPlaceholderText\n- findByAltText\n- findByDisplayValue\n## Select Multiple Elements\n- getAllBy\n- queryAllBy\n- findAllBy\n## Assertive Functions\n### toBe\n- toBeInTheDocument\n- toBeDisabled\n- toBeEnabled\n- toBeEmpty\n- toBeEmptyDOMElement\n- toBeInvalid\n- toBeRequired\n- toBeValid\n- toBeVisible\n- toBeChecked\n- toBePartiallyChecked\n### toContain\n- toContainElement\n- toContainHTML\n### toHave\n- toHaveAttribute\n- toHaveClass\n- toHaveFocus\n- toHaveFormValues\n- toHaveStyle\n- toHaveTextContent\n- toHaveValue\n- toHaveDisplayValue\n- toHaveDescription\n- toHaveBeenCalledTimes(1)\n## Fire Events\nuse RTL's `fireEvent` and `waitFor` functions to simulate interactions of an end user\n\n```js\nimport * as React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async() => {\n    render(<App />);\n    // wait for the user to resolve\n    await screen.findByText(/Signed in as/);\n    screen.debug(); // The debug function's output should show the HTML structure before and after the event;\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull(); // make the assertions from before and after the event\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' }, // The fireEvent function takes an element (here the input field by textbox role) and an event (here an event which has the value \"JavaScript\")\n    });\n    screen.debug();\n    expect(screen.getByText(/Searches for JavaScript/)).toBeInTheDocument();\n  });\n});\n```\n\n### waitFor (an alternative)\nto literally wait for an asynchronous update to happen\n\n```js\nimport * as React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' },\n    });\n    waitFor(() =>\n      expect(\n        screen.getByText(/Searches for JavaScript/)\n      ).toBeInTheDocument()\n    );\n  });\n});\n```\n\nused the `queryBy` search variant to check whether the element isn't there before the event and the `getBy` search variant to check whether it's there after the event\n## User Event\nRTL comes with an extended user event library which builds up on top of the fireEvent API, mimicking the actual browser behavior more closely than the fireEvent API.\n- a `fireEvent.change()` triggers only a `change` event whereas `userEvent.type` triggers a `change` event, but also `keyDown`, `keyPress`, and `keyUp` events.\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async () => {\n    render(<App />);\n    // wait for the user to resolve\n    await screen.findByText(/Signed in as/);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n    await userEvent.type(screen.getByRole('textbox'), 'JavaScript');\n    expect(\n      screen.getByText(/Searches for JavaScript/)\n    ).toBeInTheDocument();\n  });\n});\n```\n\nWhenever possible, use userEvent over fireEvent when using React Testing Library.\n## Test Callback Handlers\nwe are using a utility from Vitest (or Jest) to mock the `onChange` function which is passed to the component.  \nThen, after triggering the user interaction on the input field, we can assert that the `onChange` callback function has been called\n### use `fireEvent`\n\n```js\ndescribe('Search', () => {\n  it('calls the onChange callback handler', () => {\n    // Jest\n    // const onChange = jest.fn();\n    // Vitest\n    const onChange = vi.fn();\n    render(\n      <Search value=\"\" onChange={onChange}>\n        Search:\n      </Search>\n    );\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' },\n    });\n    expect(onChange).toHaveBeenCalledTimes(1);\n  });\n});\n```\n\n### use `userEvent`\nWhile `fireEvent` executes the change event by only calling the callback function once, `userEvent` triggers it for every key stroke\n\n```js\ndescribe('Search', () => {\n  it('calls the onChange callback handler', async () => {\n    // Jest\n    // const onChange = jest.fn();\n    // Vitest\n    const onChange = vi.fn();\n    render(\n      <Search value=\"\" onChange={onChange}>\n        Search:\n      </Search>\n    );\n    await userEvent.type(screen.getByRole('textbox'), 'JavaScript');\n    expect(onChange).toHaveBeenCalledTimes(10);\n  });\n});\n```\n\n#### Test Keyboard Event\n[javascript - How can I test \\`onKeyDown\\` prop in React with @testing-library/user-event version 14? - Stack Overflow](https://stackoverflow.com/questions/71954801/how-can-i-test-onkeydown-prop-in-react-with-testing-library-user-event-versio)\n\nSometimes **unit tests** (test React components in isolation) are needed. Often these components will not have any side-effects or state, but only input (props) and output (JSX, callback handlers)  \nReact Testing Library encourages you to test your React components not too much in isolation, but in integration (**integration test**) with other components. Only this way you can actually test whether **state changes** were applied in the DOM and whether **side-effects** took effect.\n## Test Data Fetching\n### Example Component for data fetching\n\n```jsx\nimport * as React from 'react';\nimport axios from 'axios';\nconst URL = 'http://hn.algolia.com/api/v1/search';\nfunction App() {\n  const [stories, setStories] = React.useState([]);\n  const [error, setError] = React.useState(null);\n  async function handleFetch(event) {\n    let result;\n    try {\n      result = await axios.get(`${URL}?query=React`);\n      setStories(result.data.hits);\n    } catch (error) {\n      setError(error);\n    }\n  }\n  return (\n    <div>\n      <button type=\"button\" onClick={handleFetch}>\n        Fetch Stories\n      </button>\n      {error && <span>Something went wrong ...</span>}\n      <ul>\n        {stories.map((story) => (\n          <li key={story.objectID}>\n            <a href={story.url}>{story.title}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n```\n\nOn button click, we are fetching a list of stories from the [Hacker News API](https://hn.algolia.com/api).\n### Test axios\nBefore we render the App component, we make sure that the API gets mocked.  \nIf you are using another library or the browser's native fetch API for data fetching, you would have to mock these\n\n```js\nimport * as React from 'react';\nimport axios from 'axios';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport App from './App';\n// Jest\n// jest.mock('axios');\n// Vitest\nvi.mock('axios');\ndescribe('App', () => {\n// ✅ Test successful fetching\n  it('fetches stories from an API and displays them', async () => {\n    const stories = [\n      { objectID: '1', title: 'Hello' },\n      { objectID: '2', title: 'React' },\n    ];\n    axios.get.mockImplementationOnce(() =>\n      Promise.resolve({ data: { hits: stories } })\n    );\n    render(<App />);\n    // After mocking the API and rendering the component, we use the userEvent API to click to the button which leads us to the API request\n    await userEvent.click(screen.getByRole('button'));\n    // Opt-1: Since the request is asynchronous, we have to wait for the component to update\n    const items = await screen.findAllByRole('listitem'); /\n    expect(items).toHaveLength(2);\n    // Opt-2: to await a promise in a more explicit way if you don't want to wait for a HTML to show up\n    waitFor(() => Promise.resolve({ data: { hits: stories } }));\n    expect(screen.getAllByRole('listitem')).toHaveLength(2);\n  });\n// ❌ Test failed fetching \n  it('fetches stories from an API and fails', async () => {\n    axios.get.mockImplementationOnce(() =>\n      Promise.reject(new Error())\n    );\n    render(<App />);\n    await userEvent.click(screen.getByRole('button'));\n    const message = await screen.findByText(/Something went wrong/);\n    expect(message).toBeInTheDocument();\n  });\n});\n```\n\n\n",data={title:"RTL-React Testing Library",DateStarted:new Date(17149536e5),draft:!0,tags:["Testing"],category:"Front-End Tooling"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/rtl-react-testing-library.md",rawData:void 0},html='<h1 id="rtl-react-testing-library">RTL-React Testing Library<a class="anchor" href="#rtl-react-testing-library"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p>render react component and simulating events</p>\n</blockquote>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://testing-library.com/docs/react-testing-library/intro/">React Testing Library | Testing Library (testing-library.com)</a></li>\n<li>Tutorials\n<ul>\n<li><a href="https://www.robinwieruch.de/react-testing-library/">React Testing Library Tutorial (robinwieruch.de)</a></li>\n</ul>\n</li>\n</ul>\n<h2 id="example-component-for-testing">Example component for testing<a class="anchor" href="#example-component-for-testing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> App</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">  const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">search</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setSearch</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> React.</span><span style="color:#B392F0">useState</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'\'</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">  function</span><span style="color:#B392F0"> handleChange</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">event</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">    setSearch</span><span style="color:#E1E4E8">(event.target.value);</span></span>\n<span class="line"><span style="color:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#79B8FF">Search</span><span style="color:#B392F0"> value</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{search} </span><span style="color:#B392F0">onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{handleChange}></span></span>\n<span class="line"><span style="color:#E1E4E8">        Search:</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#79B8FF">Search</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>Searches for {search </span><span style="color:#F97583">?</span><span style="color:#E1E4E8"> search </span><span style="color:#F97583">:</span><span style="color:#9ECBFF"> \'...\'</span><span style="color:#E1E4E8">}&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">  );</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> Search</span><span style="color:#E1E4E8">({ </span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">onChange</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">children</span><span style="color:#E1E4E8"> }) {</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">label</span><span style="color:#B392F0"> htmlFor</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"search"</span><span style="color:#E1E4E8">>{children}&#x3C;/</span><span style="color:#85E89D">label</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">input</span></span>\n<span class="line"><span style="color:#B392F0">        id</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"search"</span></span>\n<span class="line"><span style="color:#B392F0">        type</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"text"</span></span>\n<span class="line"><span style="color:#B392F0">        value</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{value}</span></span>\n<span class="line"><span style="color:#B392F0">        onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{onChange}</span></span>\n<span class="line"><span style="color:#E1E4E8">      /></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">  );</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#E1E4E8"> App;</span></span>\n<span class="line"></span></code></pre>\n<h2 id="getby-to-select-element"><code>getBy</code> to Select Element<a class="anchor" href="#getby-to-select-element"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><code>getBy</code> returns an element or an error.</p>\n<ul>\n<li>It’s a convenient side-effect of getBy that it returns an error, because it makes sure that we as developers notice early that there is something wrong in our test.</li>\n<li>However, this makes it difficult to check for elements which shouldn’t be there</li>\n</ul>\n<h3 id="screengetbytext">screen.getByText()<a class="anchor" href="#screengetbytext"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#6A737D">    // implicit assertion</span></span>\n<span class="line"><span style="color:#6A737D">    // because getByText would throw error</span></span>\n<span class="line"><span style="color:#6A737D">    // if element wouldn\'t be there</span></span>\n<span class="line"><span style="color:#E1E4E8">    screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'Search:\'</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#6A737D">    // explicit assertion</span></span>\n<span class="line"><span style="color:#6A737D">    // recommended</span></span>\n<span class="line"><span style="color:#6A737D">    // Use regex for partial match</span></span>\n<span class="line"><span style="color:#6A737D">    // fails</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'Search\'</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#6A737D">    // succeeds</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'Search:\'</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#6A737D">    // succeeds</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Search</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="screengetbyrole">screen.getByRole()<a class="anchor" href="#screengetbyrole"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p> used to retrieve elements by <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute">aria-label attributes</a>.<br>\n The neat thing about <code>getByRole</code>: it shows all the selectable roles if you provide a role that isn’t available in the rendered component’s HTML</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="other-search-types-of-getby">Other search types of <code>getBy</code><a class="anchor" href="#other-search-types-of-getby"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><strong>LabelText:</strong> getByLabelText: <code>&#x3C;label for="search" /></code></li>\n<li><strong>PlaceholderText:</strong> getByPlaceholderText: <code>&#x3C;input placeholder="Search" /></code></li>\n<li><strong>AltText:</strong> getByAltText: <code>&#x3C;img alt="profile" /></code></li>\n<li><strong>DisplayValue:</strong> getByDisplayValue: <code>&#x3C;input value="JavaScript" /></code></li>\n<li><strong>TestId</strong> (the last resort): with <code>getByTestId</code> where one needs to assign <code>data-testid</code> attributes in the source code’s HTML</li>\n</ul>\n<h2 id="queryby"><code>queryBy</code><a class="anchor" href="#queryby"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>In order to assert elements which aren’t there, we can exchange <code>getBy</code> with <code>queryBy</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">queryByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeNull</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="querybywith-all-its-search-types"><em>queryBy</em> with all its search types<a class="anchor" href="#querybywith-all-its-search-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>queryByText</li>\n<li>queryByRole</li>\n<li>queryByLabelText</li>\n<li>queryByPlaceholderText</li>\n<li>queryByAltText</li>\n<li>queryByDisplayValue</li>\n</ul>\n<h2 id="findby"><code>findBy</code><a class="anchor" href="#findby"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>used for asynchronous elements which will be there eventually</p>\n<h4 id="example-component-async">Example component (async)<a class="anchor" href="#example-component-async"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> getUser</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">({ id: </span><span style="color:#9ECBFF">\'1\'</span><span style="color:#E1E4E8">, name: </span><span style="color:#9ECBFF">\'Robin\'</span><span style="color:#E1E4E8"> });</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> App</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">  const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">search</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setSearch</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> React.</span><span style="color:#B392F0">useState</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'\'</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">  const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">user</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setUser</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> React.</span><span style="color:#B392F0">useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">null</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  React.</span><span style="color:#B392F0">useEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> loadUser</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">      const</span><span style="color:#79B8FF"> user</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getUser</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#B392F0">      setUser</span><span style="color:#E1E4E8">(user);</span></span>\n<span class="line"><span style="color:#E1E4E8">    };</span></span>\n<span class="line"><span style="color:#B392F0">    loadUser</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  }, []);</span></span>\n<span class="line"><span style="color:#F97583">  function</span><span style="color:#B392F0"> handleChange</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">event</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">    setSearch</span><span style="color:#E1E4E8">(event.target.value);</span></span>\n<span class="line"><span style="color:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      {user </span><span style="color:#F97583">?</span><span style="color:#E1E4E8"> &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>Signed in as {user.name}&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">> </span><span style="color:#F97583">:</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#79B8FF">Search</span><span style="color:#B392F0"> value</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{search} </span><span style="color:#B392F0">onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{handleChange}></span></span>\n<span class="line"><span style="color:#E1E4E8">        Search:</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#79B8FF">Search</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>Searches for {search </span><span style="color:#F97583">?</span><span style="color:#E1E4E8"> search </span><span style="color:#F97583">:</span><span style="color:#9ECBFF"> \'...\'</span><span style="color:#E1E4E8">}&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">  );</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">...</span></span>\n<span class="line"></span></code></pre>\n<h4 id="use-findby">use <code>findBy</code><a class="anchor" href="#use-findby"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">queryByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Signed in as</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeNull</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">await</span><span style="color:#E1E4E8"> screen.</span><span style="color:#B392F0">findByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Signed in as</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="findbywith-all-its-search-types"><em>findBy</em> with all its search types:<a class="anchor" href="#findbywith-all-its-search-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>findByText</li>\n<li>findByRole</li>\n<li>findByLabelText</li>\n<li>findByPlaceholderText</li>\n<li>findByAltText</li>\n<li>findByDisplayValue</li>\n</ul>\n<h2 id="select-multiple-elements">Select Multiple Elements<a class="anchor" href="#select-multiple-elements"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>getAllBy</li>\n<li>queryAllBy</li>\n<li>findAllBy</li>\n</ul>\n<h2 id="assertive-functions">Assertive Functions<a class="anchor" href="#assertive-functions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="tobe">toBe<a class="anchor" href="#tobe"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>toBeInTheDocument</li>\n<li>toBeDisabled</li>\n<li>toBeEnabled</li>\n<li>toBeEmpty</li>\n<li>toBeEmptyDOMElement</li>\n<li>toBeInvalid</li>\n<li>toBeRequired</li>\n<li>toBeValid</li>\n<li>toBeVisible</li>\n<li>toBeChecked</li>\n<li>toBePartiallyChecked</li>\n</ul>\n<h3 id="tocontain">toContain<a class="anchor" href="#tocontain"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>toContainElement</li>\n<li>toContainHTML</li>\n</ul>\n<h3 id="tohave">toHave<a class="anchor" href="#tohave"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>toHaveAttribute</li>\n<li>toHaveClass</li>\n<li>toHaveFocus</li>\n<li>toHaveFormValues</li>\n<li>toHaveStyle</li>\n<li>toHaveTextContent</li>\n<li>toHaveValue</li>\n<li>toHaveDisplayValue</li>\n<li>toHaveDescription</li>\n<li>toHaveBeenCalledTimes(1)</li>\n</ul>\n<h2 id="fire-events">Fire Events<a class="anchor" href="#fire-events"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>use RTL’s <code>fireEvent</code> and <code>waitFor</code> functions to simulate interactions of an end user</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen, fireEvent } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#6A737D">    // wait for the user to resolve</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> screen.</span><span style="color:#B392F0">findByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Signed in as</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">    screen.</span><span style="color:#B392F0">debug</span><span style="color:#E1E4E8">(); </span><span style="color:#6A737D">// The debug function\'s output should show the HTML structure before and after the event;</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">queryByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeNull</span><span style="color:#E1E4E8">(); </span><span style="color:#6A737D">// make the assertions from before and after the event</span></span>\n<span class="line"><span style="color:#E1E4E8">    fireEvent.</span><span style="color:#B392F0">change</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">), {</span></span>\n<span class="line"><span style="color:#E1E4E8">      target: { value: </span><span style="color:#9ECBFF">\'JavaScript\'</span><span style="color:#E1E4E8"> }, </span><span style="color:#6A737D">// The fireEvent function takes an element (here the input field by textbox role) and an event (here an event which has the value "JavaScript")</span></span>\n<span class="line"><span style="color:#E1E4E8">    });</span></span>\n<span class="line"><span style="color:#E1E4E8">    screen.</span><span style="color:#B392F0">debug</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="waitfor-an-alternative">waitFor (an alternative)<a class="anchor" href="#waitfor-an-alternative"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>to literally wait for an asynchronous update to happen</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen, fireEvent, waitFor } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">queryByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeNull</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">    fireEvent.</span><span style="color:#B392F0">change</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">), {</span></span>\n<span class="line"><span style="color:#E1E4E8">      target: { value: </span><span style="color:#9ECBFF">\'JavaScript\'</span><span style="color:#E1E4E8"> },</span></span>\n<span class="line"><span style="color:#E1E4E8">    });</span></span>\n<span class="line"><span style="color:#B392F0">    waitFor</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#B392F0">      expect</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">        screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">      ).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#E1E4E8">    );</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<p>used the <code>queryBy</code> search variant to check whether the element isn’t there before the event and the <code>getBy</code> search variant to check whether it’s there after the event</p>\n<h2 id="user-event">User Event<a class="anchor" href="#user-event"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>RTL comes with an extended user event library which builds up on top of the fireEvent API, mimicking the actual browser behavior more closely than the fireEvent API.</p>\n<ul>\n<li>a <code>fireEvent.change()</code> triggers only a <code>change</code> event whereas <code>userEvent.type</code> triggers a <code>change</code> event, but also <code>keyDown</code>, <code>keyPress</code>, and <code>keyUp</code> events.</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> userEvent </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/user-event\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders App component\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#6A737D">    // wait for the user to resolve</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> screen.</span><span style="color:#B392F0">findByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Signed in as</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">queryByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toBeNull</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> userEvent.</span><span style="color:#B392F0">type</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">), </span><span style="color:#9ECBFF">\'JavaScript\'</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">      screen.</span><span style="color:#B392F0">getByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Searches for JavaScript</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">    ).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<p>Whenever possible, use userEvent over fireEvent when using React Testing Library.</p>\n<h2 id="test-callback-handlers">Test Callback Handlers<a class="anchor" href="#test-callback-handlers"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>we are using a utility from Vitest (or Jest) to mock the <code>onChange</code> function which is passed to the component.<br>\nThen, after triggering the user interaction on the input field, we can assert that the <code>onChange</code> callback function has been called</p>\n<h3 id="use-fireevent">use <code>fireEvent</code><a class="anchor" href="#use-fireevent"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'Search\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'calls the onChange callback handler\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">    // Jest</span></span>\n<span class="line"><span style="color:#6A737D">    // const onChange = jest.fn();</span></span>\n<span class="line"><span style="color:#6A737D">    // Vitest</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> onChange</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> vi.</span><span style="color:#B392F0">fn</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#79B8FF">Search</span><span style="color:#B392F0"> value</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">""</span><span style="color:#B392F0"> onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{onChange}></span></span>\n<span class="line"><span style="color:#E1E4E8">        Search:</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#79B8FF">Search</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">    );</span></span>\n<span class="line"><span style="color:#E1E4E8">    fireEvent.</span><span style="color:#B392F0">change</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">), {</span></span>\n<span class="line"><span style="color:#E1E4E8">      target: { value: </span><span style="color:#9ECBFF">\'JavaScript\'</span><span style="color:#E1E4E8"> },</span></span>\n<span class="line"><span style="color:#E1E4E8">    });</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(onChange).</span><span style="color:#B392F0">toHaveBeenCalledTimes</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="use-userevent">use <code>userEvent</code><a class="anchor" href="#use-userevent"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>While <code>fireEvent</code> executes the change event by only calling the callback function once, <code>userEvent</code> triggers it for every key stroke</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'Search\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'calls the onChange callback handler\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">    // Jest</span></span>\n<span class="line"><span style="color:#6A737D">    // const onChange = jest.fn();</span></span>\n<span class="line"><span style="color:#6A737D">    // Vitest</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> onChange</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> vi.</span><span style="color:#B392F0">fn</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#79B8FF">Search</span><span style="color:#B392F0"> value</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">""</span><span style="color:#B392F0"> onChange</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{onChange}></span></span>\n<span class="line"><span style="color:#E1E4E8">        Search:</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#79B8FF">Search</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">    );</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> userEvent.</span><span style="color:#B392F0">type</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'textbox\'</span><span style="color:#E1E4E8">), </span><span style="color:#9ECBFF">\'JavaScript\'</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(onChange).</span><span style="color:#B392F0">toHaveBeenCalledTimes</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="test-keyboard-event">Test Keyboard Event<a class="anchor" href="#test-keyboard-event"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><a href="https://stackoverflow.com/questions/71954801/how-can-i-test-onkeydown-prop-in-react-with-testing-library-user-event-versio">javascript - How can I test `onKeyDown` prop in React with @testing-library/user-event version 14? - Stack Overflow</a></p>\n<p>Sometimes <strong>unit tests</strong> (test React components in isolation) are needed. Often these components will not have any side-effects or state, but only input (props) and output (JSX, callback handlers)<br>\nReact Testing Library encourages you to test your React components not too much in isolation, but in integration (<strong>integration test</strong>) with other components. Only this way you can actually test whether <strong>state changes</strong> were applied in the DOM and whether <strong>side-effects</strong> took effect.</p>\n<h2 id="test-data-fetching">Test Data Fetching<a class="anchor" href="#test-data-fetching"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="example-component-for-data-fetching">Example Component for data fetching<a class="anchor" href="#example-component-for-data-fetching"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> axios </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'axios\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> URL</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> \'http://hn.algolia.com/api/v1/search\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> App</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">  const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">stories</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setStories</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> React.</span><span style="color:#B392F0">useState</span><span style="color:#E1E4E8">([]);</span></span>\n<span class="line"><span style="color:#F97583">  const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">error</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setError</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> React.</span><span style="color:#B392F0">useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">null</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">  async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> handleFetch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">event</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">    let</span><span style="color:#E1E4E8"> result;</span></span>\n<span class="line"><span style="color:#F97583">    try</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">      result </span><span style="color:#F97583">=</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> axios.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#79B8FF">URL</span><span style="color:#9ECBFF">}?query=React`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">      setStories</span><span style="color:#E1E4E8">(result.data.hits);</span></span>\n<span class="line"><span style="color:#E1E4E8">    } </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (error) {</span></span>\n<span class="line"><span style="color:#B392F0">      setError</span><span style="color:#E1E4E8">(error);</span></span>\n<span class="line"><span style="color:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#F97583">  return</span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">button</span><span style="color:#B392F0"> type</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"button"</span><span style="color:#B392F0"> onClick</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{handleFetch}></span></span>\n<span class="line"><span style="color:#E1E4E8">        Fetch Stories</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#85E89D">button</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">      {error </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> &#x3C;</span><span style="color:#85E89D">span</span><span style="color:#E1E4E8">>Something went wrong ...&#x3C;/</span><span style="color:#85E89D">span</span><span style="color:#E1E4E8">>}</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#85E89D">ul</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">        {stories.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">story</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">          &#x3C;</span><span style="color:#85E89D">li</span><span style="color:#B392F0"> key</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{story.objectID}></span></span>\n<span class="line"><span style="color:#E1E4E8">            &#x3C;</span><span style="color:#85E89D">a</span><span style="color:#B392F0"> href</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{story.url}>{story.title}&#x3C;/</span><span style="color:#85E89D">a</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">          &#x3C;/</span><span style="color:#85E89D">li</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">        ))}</span></span>\n<span class="line"><span style="color:#E1E4E8">      &#x3C;/</span><span style="color:#85E89D">ul</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">  );</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#E1E4E8"> App;</span></span>\n<span class="line"></span></code></pre>\n<p>On button click, we are fetching a list of stories from the <a href="https://hn.algolia.com/api">Hacker News API</a>.</p>\n<h3 id="test-axios">Test axios<a class="anchor" href="#test-axios"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Before we render the App component, we make sure that the API gets mocked.<br>\nIf you are using another library or the browser’s native fetch API for data fetching, you would have to mock these</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> React </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> axios </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'axios\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { render, screen, waitFor } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> userEvent </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/user-event\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> App </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'./App\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">// Jest</span></span>\n<span class="line"><span style="color:#6A737D">// jest.mock(\'axios\');</span></span>\n<span class="line"><span style="color:#6A737D">// Vitest</span></span>\n<span class="line"><span style="color:#E1E4E8">vi.</span><span style="color:#B392F0">mock</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'axios\'</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'App\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">// ✅ Test successful fetching</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'fetches stories from an API and displays them\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> stories</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span></span>\n<span class="line"><span style="color:#E1E4E8">      { objectID: </span><span style="color:#9ECBFF">\'1\'</span><span style="color:#E1E4E8">, title: </span><span style="color:#9ECBFF">\'Hello\'</span><span style="color:#E1E4E8"> },</span></span>\n<span class="line"><span style="color:#E1E4E8">      { objectID: </span><span style="color:#9ECBFF">\'2\'</span><span style="color:#E1E4E8">, title: </span><span style="color:#9ECBFF">\'React\'</span><span style="color:#E1E4E8"> },</span></span>\n<span class="line"><span style="color:#E1E4E8">    ];</span></span>\n<span class="line"><span style="color:#E1E4E8">    axios.get.</span><span style="color:#B392F0">mockImplementationOnce</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#79B8FF">      Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">({ data: { hits: stories } })</span></span>\n<span class="line"><span style="color:#E1E4E8">    );</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#6A737D">    // After mocking the API and rendering the component, we use the userEvent API to click to the button which leads us to the API request</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> userEvent.</span><span style="color:#B392F0">click</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'button\'</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#6A737D">    // Opt-1: Since the request is asynchronous, we have to wait for the component to update</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> items</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> screen.</span><span style="color:#B392F0">findAllByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'listitem\'</span><span style="color:#E1E4E8">); </span><span style="color:#F97583">/</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(items).</span><span style="color:#B392F0">toHaveLength</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">    // Opt-2: to await a promise in a more explicit way if you don\'t want to wait for a HTML to show up</span></span>\n<span class="line"><span style="color:#B392F0">    waitFor</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">({ data: { hits: stories } }));</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getAllByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'listitem\'</span><span style="color:#E1E4E8">)).</span><span style="color:#B392F0">toHaveLength</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#6A737D">// ❌ Test failed fetching </span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'fetches stories from an API and fails\'</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">    axios.get.</span><span style="color:#B392F0">mockImplementationOnce</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#79B8FF">      Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">reject</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#E1E4E8">    );</span></span>\n<span class="line"><span style="color:#B392F0">    render</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">App</span><span style="color:#E1E4E8"> />);</span></span>\n<span class="line"><span style="color:#F97583">    await</span><span style="color:#E1E4E8"> userEvent.</span><span style="color:#B392F0">click</span><span style="color:#E1E4E8">(screen.</span><span style="color:#B392F0">getByRole</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'button\'</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> message</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> screen.</span><span style="color:#B392F0">findByText</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">/</span><span style="color:#DBEDFF">Something went wrong</span><span style="color:#9ECBFF">/</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(message).</span><span style="color:#B392F0">toBeInTheDocument</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>',frontmatter={title:"RTL-React Testing Library",topic:null,type:"D",tags:["Testing"],category:"Front-End Tooling",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["RTL-React Testing Library"],draft:!0,DateStarted:"2024-05-06T00:00:00.000Z",DateModified:"2024-06-11T00:00:00.000Z","linter-yaml-title-alias":"RTL-React Testing Library",minutes:7,words:1332},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/rtl-react-testing-library.md",url=void 0;function rawContent(){return"# RTL-React Testing Library\n>render react component and simulating events \n\n## Reference\n- [React Testing Library | Testing Library (testing-library.com)](https://testing-library.com/docs/react-testing-library/intro/)\n- Tutorials\n\t- [React Testing Library Tutorial (robinwieruch.de)](https://www.robinwieruch.de/react-testing-library/)\n## Example component for testing\n\n```jsx\nimport * as React from 'react';\nfunction App() {\n  const [search, setSearch] = React.useState('');\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n  return (\n    <div>\n      <Search value={search} onChange={handleChange}>\n        Search:\n      </Search>\n      <p>Searches for {search ? search : '...'}</p>\n    </div>\n  );\n}\nfunction Search({ value, onChange, children }) {\n  return (\n    <div>\n      <label htmlFor=\"search\">{children}</label>\n      <input\n        id=\"search\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\nexport default App;\n```\n\n## `getBy` to Select Element \n`getBy` returns an element or an error. \n- It's a convenient side-effect of getBy that it returns an error, because it makes sure that we as developers notice early that there is something wrong in our test. \n- However, this makes it difficult to check for elements which shouldn't be there\n### screen.getByText()\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    // implicit assertion\n    // because getByText would throw error\n    // if element wouldn't be there\n    screen.getByText('Search:').toBeInTheDocument();\n    // explicit assertion\n    // recommended\n    // Use regex for partial match\n    // fails\n    expect(screen.getByText('Search')).toBeInTheDocument();\n    // succeeds\n    expect(screen.getByText('Search:')).toBeInTheDocument();\n    // succeeds\n    expect(screen.getByText(/Search/)).toBeInTheDocument();\n  });\n});\n```\n\n#### screen.getByRole()\n used to retrieve elements by [aria-label attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).  \n The neat thing about `getByRole`: it shows all the selectable roles if you provide a role that isn't available in the rendered component's HTML\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.getByRole('textbox')).toBeInTheDocument();\n  });\n});\n```\n\n### Other search types of `getBy`\n- **LabelText:** getByLabelText: `<label for=\"search\" />`\n- **PlaceholderText:** getByPlaceholderText: `<input placeholder=\"Search\" />`\n- **AltText:** getByAltText: `<img alt=\"profile\" />`\n- **DisplayValue:** getByDisplayValue: `<input value=\"JavaScript\" />`\n- **TestId** (the last resort): with `getByTestId` where one needs to assign `data-testid` attributes in the source code's HTML\n## `queryBy`\nIn order to assert elements which aren't there, we can exchange `getBy` with `queryBy`\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n  });\n});\n```\n\n#### _queryBy_ with all its search types\n- queryByText\n- queryByRole\n- queryByLabelText\n- queryByPlaceholderText\n- queryByAltText\n- queryByDisplayValue\n## `findBy`\nused for asynchronous elements which will be there eventually\n#### Example component (async)\n\n```jsx\nconst getUser = () => {\n  return Promise.resolve({ id: '1', name: 'Robin' });\n};\nfunction App() {\n  const [search, setSearch] = React.useState('');\n  const [user, setUser] = React.useState(null);\n  React.useEffect(() => {\n    const loadUser = async () => {\n      const user = await getUser();\n      setUser(user);\n    };\n    loadUser();\n  }, []);\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n  return (\n    <div>\n      {user ? <p>Signed in as {user.name}</p> : null}\n      <Search value={search} onChange={handleChange}>\n        Search:\n      </Search>\n      <p>Searches for {search ? search : '...'}</p>\n    </div>\n  );\n}\n...\n```\n\n#### use `findBy`\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async () => {\n    render(<App />);\n    expect(screen.queryByText(/Signed in as/)).toBeNull();\n    expect(await screen.findByText(/Signed in as/)).toBeInTheDocument();\n  });\n});\n```\n\n#### _findBy_ with all its search types:\n- findByText\n- findByRole\n- findByLabelText\n- findByPlaceholderText\n- findByAltText\n- findByDisplayValue\n## Select Multiple Elements\n- getAllBy\n- queryAllBy\n- findAllBy\n## Assertive Functions\n### toBe\n- toBeInTheDocument\n- toBeDisabled\n- toBeEnabled\n- toBeEmpty\n- toBeEmptyDOMElement\n- toBeInvalid\n- toBeRequired\n- toBeValid\n- toBeVisible\n- toBeChecked\n- toBePartiallyChecked\n### toContain\n- toContainElement\n- toContainHTML\n### toHave\n- toHaveAttribute\n- toHaveClass\n- toHaveFocus\n- toHaveFormValues\n- toHaveStyle\n- toHaveTextContent\n- toHaveValue\n- toHaveDisplayValue\n- toHaveDescription\n- toHaveBeenCalledTimes(1)\n## Fire Events\nuse RTL's `fireEvent` and `waitFor` functions to simulate interactions of an end user\n\n```js\nimport * as React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async() => {\n    render(<App />);\n    // wait for the user to resolve\n    await screen.findByText(/Signed in as/);\n    screen.debug(); // The debug function's output should show the HTML structure before and after the event;\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull(); // make the assertions from before and after the event\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' }, // The fireEvent function takes an element (here the input field by textbox role) and an event (here an event which has the value \"JavaScript\")\n    });\n    screen.debug();\n    expect(screen.getByText(/Searches for JavaScript/)).toBeInTheDocument();\n  });\n});\n```\n\n### waitFor (an alternative)\nto literally wait for an asynchronous update to happen\n\n```js\nimport * as React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', () => {\n    render(<App />);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' },\n    });\n    waitFor(() =>\n      expect(\n        screen.getByText(/Searches for JavaScript/)\n      ).toBeInTheDocument()\n    );\n  });\n});\n```\n\nused the `queryBy` search variant to check whether the element isn't there before the event and the `getBy` search variant to check whether it's there after the event\n## User Event\nRTL comes with an extended user event library which builds up on top of the fireEvent API, mimicking the actual browser behavior more closely than the fireEvent API.\n- a `fireEvent.change()` triggers only a `change` event whereas `userEvent.type` triggers a `change` event, but also `keyDown`, `keyPress`, and `keyUp` events.\n\n```js\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport App from './App';\ndescribe('App', () => {\n  it('renders App component', async () => {\n    render(<App />);\n    // wait for the user to resolve\n    await screen.findByText(/Signed in as/);\n    expect(screen.queryByText(/Searches for JavaScript/)).toBeNull();\n    await userEvent.type(screen.getByRole('textbox'), 'JavaScript');\n    expect(\n      screen.getByText(/Searches for JavaScript/)\n    ).toBeInTheDocument();\n  });\n});\n```\n\nWhenever possible, use userEvent over fireEvent when using React Testing Library.\n## Test Callback Handlers\nwe are using a utility from Vitest (or Jest) to mock the `onChange` function which is passed to the component.  \nThen, after triggering the user interaction on the input field, we can assert that the `onChange` callback function has been called\n### use `fireEvent`\n\n```js\ndescribe('Search', () => {\n  it('calls the onChange callback handler', () => {\n    // Jest\n    // const onChange = jest.fn();\n    // Vitest\n    const onChange = vi.fn();\n    render(\n      <Search value=\"\" onChange={onChange}>\n        Search:\n      </Search>\n    );\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'JavaScript' },\n    });\n    expect(onChange).toHaveBeenCalledTimes(1);\n  });\n});\n```\n\n### use `userEvent`\nWhile `fireEvent` executes the change event by only calling the callback function once, `userEvent` triggers it for every key stroke\n\n```js\ndescribe('Search', () => {\n  it('calls the onChange callback handler', async () => {\n    // Jest\n    // const onChange = jest.fn();\n    // Vitest\n    const onChange = vi.fn();\n    render(\n      <Search value=\"\" onChange={onChange}>\n        Search:\n      </Search>\n    );\n    await userEvent.type(screen.getByRole('textbox'), 'JavaScript');\n    expect(onChange).toHaveBeenCalledTimes(10);\n  });\n});\n```\n\n#### Test Keyboard Event\n[javascript - How can I test \\`onKeyDown\\` prop in React with @testing-library/user-event version 14? - Stack Overflow](https://stackoverflow.com/questions/71954801/how-can-i-test-onkeydown-prop-in-react-with-testing-library-user-event-versio)\n\nSometimes **unit tests** (test React components in isolation) are needed. Often these components will not have any side-effects or state, but only input (props) and output (JSX, callback handlers)  \nReact Testing Library encourages you to test your React components not too much in isolation, but in integration (**integration test**) with other components. Only this way you can actually test whether **state changes** were applied in the DOM and whether **side-effects** took effect.\n## Test Data Fetching\n### Example Component for data fetching\n\n```jsx\nimport * as React from 'react';\nimport axios from 'axios';\nconst URL = 'http://hn.algolia.com/api/v1/search';\nfunction App() {\n  const [stories, setStories] = React.useState([]);\n  const [error, setError] = React.useState(null);\n  async function handleFetch(event) {\n    let result;\n    try {\n      result = await axios.get(`${URL}?query=React`);\n      setStories(result.data.hits);\n    } catch (error) {\n      setError(error);\n    }\n  }\n  return (\n    <div>\n      <button type=\"button\" onClick={handleFetch}>\n        Fetch Stories\n      </button>\n      {error && <span>Something went wrong ...</span>}\n      <ul>\n        {stories.map((story) => (\n          <li key={story.objectID}>\n            <a href={story.url}>{story.title}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nexport default App;\n```\n\nOn button click, we are fetching a list of stories from the [Hacker News API](https://hn.algolia.com/api).\n### Test axios\nBefore we render the App component, we make sure that the API gets mocked.  \nIf you are using another library or the browser's native fetch API for data fetching, you would have to mock these\n\n```js\nimport * as React from 'react';\nimport axios from 'axios';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport App from './App';\n// Jest\n// jest.mock('axios');\n// Vitest\nvi.mock('axios');\ndescribe('App', () => {\n// ✅ Test successful fetching\n  it('fetches stories from an API and displays them', async () => {\n    const stories = [\n      { objectID: '1', title: 'Hello' },\n      { objectID: '2', title: 'React' },\n    ];\n    axios.get.mockImplementationOnce(() =>\n      Promise.resolve({ data: { hits: stories } })\n    );\n    render(<App />);\n    // After mocking the API and rendering the component, we use the userEvent API to click to the button which leads us to the API request\n    await userEvent.click(screen.getByRole('button'));\n    // Opt-1: Since the request is asynchronous, we have to wait for the component to update\n    const items = await screen.findAllByRole('listitem'); /\n    expect(items).toHaveLength(2);\n    // Opt-2: to await a promise in a more explicit way if you don't want to wait for a HTML to show up\n    waitFor(() => Promise.resolve({ data: { hits: stories } }));\n    expect(screen.getAllByRole('listitem')).toHaveLength(2);\n  });\n// ❌ Test failed fetching \n  it('fetches stories from an API and fails', async () => {\n    axios.get.mockImplementationOnce(() =>\n      Promise.reject(new Error())\n    );\n    render(<App />);\n    await userEvent.click(screen.getByRole('button'));\n    const message = await screen.findByText(/Something went wrong/);\n    expect(message).toBeInTheDocument();\n  });\n});\n```\n\n\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"rtl-react-testing-library",text:"RTL-React Testing Library#"},{depth:2,slug:"reference",text:"Reference#"},{depth:2,slug:"example-component-for-testing",text:"Example component for testing#"},{depth:2,slug:"getby-to-select-element",text:"getBy to Select Element#"},{depth:3,slug:"screengetbytext",text:"screen.getByText()#"},{depth:4,slug:"screengetbyrole",text:"screen.getByRole()#"},{depth:3,slug:"other-search-types-of-getby",text:"Other search types of getBy#"},{depth:2,slug:"queryby",text:"queryBy#"},{depth:4,slug:"querybywith-all-its-search-types",text:"queryBy with all its search types#"},{depth:2,slug:"findby",text:"findBy#"},{depth:4,slug:"example-component-async",text:"Example component (async)#"},{depth:4,slug:"use-findby",text:"use findBy#"},{depth:4,slug:"findbywith-all-its-search-types",text:"findBy with all its search types:#"},{depth:2,slug:"select-multiple-elements",text:"Select Multiple Elements#"},{depth:2,slug:"assertive-functions",text:"Assertive Functions#"},{depth:3,slug:"tobe",text:"toBe#"},{depth:3,slug:"tocontain",text:"toContain#"},{depth:3,slug:"tohave",text:"toHave#"},{depth:2,slug:"fire-events",text:"Fire Events#"},{depth:3,slug:"waitfor-an-alternative",text:"waitFor (an alternative)#"},{depth:2,slug:"user-event",text:"User Event#"},{depth:2,slug:"test-callback-handlers",text:"Test Callback Handlers#"},{depth:3,slug:"use-fireevent",text:"use fireEvent#"},{depth:3,slug:"use-userevent",text:"use userEvent#"},{depth:4,slug:"test-keyboard-event",text:"Test Keyboard Event#"},{depth:2,slug:"test-data-fetching",text:"Test Data Fetching#"},{depth:3,slug:"example-component-for-data-fetching",text:"Example Component for data fetching#"},{depth:3,slug:"test-axios",text:"Test axios#"}]}const Content=createComponent(((n,s,e)=>{const{layout:a,...t}=frontmatter;return t.file=file,t.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),rtlReactTestingLibrary=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,rtlReactTestingLibrary,slug};