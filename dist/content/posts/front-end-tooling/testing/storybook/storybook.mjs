import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-tooling/testing/storybook/storybook.md",collection="posts",slug="front-end-tooling/testing/storybook/storybook",body="\n# Storybook\n\n## Reference\n\n- [Install Storybook • Storybook docs](https://storybook.js.org/docs/get-started/install)\n- Tutorials\n  - [Storybook 7 Crash Course - React Typescript (youtube.com)](https://www.youtube.com/watch?v=CuGZgYo6-XY)\n  - [01 Course presentation — Modern Component Library w/ React & Storybook - YouTube](https://www.youtube.com/watch?v=21iHNxVlfvw&list=PLKBvDYynKmlWa59k8pnw-EHac2_miPagh)\n\n## [Why Storybook](Why-Storybook)\n\n## [Install & Run Storybook](Install-&-Run-Storybook)\n\n## [Config Storybook](Storybook/Config-Storybook)\n\n### [Write Stories](Write-Stories)\n\n## Data\n\n### ❓To build simple data model\n\n- uses [Redux Toolkit](https://redux-toolkit.js.org/), the most effective toolset for developing applications for storing data with [Redux](https://redux.js.org/)\n- `npm i @reduxjs/toolkit react-redux`\n- in a file called `store.js` in the `src/lib`\n  - ❓construct a simple Redux store that responds to actions that change the task's state\n\n### In `TaskList.jsx`\n\n- update our `TaskList` component to connect to the Redux store\n  - ❓`import { useDispatch, useSelector } from \"react-redux\";`\n\n### In `TaskList.stories.jsx`\n\n- rely on a decorator\n- provide a mocked store\n- `excludeStories`\n  - prevents our mocked state to be treated as a story\n  - more about this field in the [Storybook documentation](https://storybook.js.org/docs/react/api/csf).\n\n## Screens\n\n### 💡combining components in a screen and developing that screen in Storybook\n\n### Goal\n\n- mply fetching data from a remote API\n- wrapping the `TaskList` component (which supplies its own data from Redux)\n- pulling a top-level `error` field out of Redux\n\n### ❓updating our Redux store (in `src/lib/store.js`) to connect to a remote API\n\n- handle the various states for our application (i.e., `error`, `succeeded`)\n\n### create our `InboxScreen.jsx` in the `src/components` directory\n\n- ❓`useEffect`\n\n### change our `App` component to render the `InboxScreen`\n\n- eventually, we would use a router to choose the correct screen\n\n### In `InboxScreen.stories.jsx`\n\n- ❌issue with the `error` story\n- Solutions\n  - provide a mocked version for each state\n  - or use API mocking library alongside a Storybook addon\n    - use [Mock Service Worker](https://mswjs.io/) and [Storybook's MSW addon](https://storybook.js.org/addons/msw-storybook-addon)\n    - relies on service workers to capture network requests\n    - provides mocked data in responses\n- How\n  - to generate a generic service worker inside your `public` folder\n    - `npm run init-msw`\n  - update our `.storybook/preview.js` and initialize them\n  - update the `InboxScreen` stories and include a [parameter](https://storybook.js.org/docs/react/writing-stories/parameters) that mocks the remote API calls\n  - another viable approach would be to pass data down the hierarchy\n    - especially when using [GraphQL](http://graphql.org/). It’s how we have built [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) alongside 800+ stories\n- Result\n  - ✅the `error` story is now working as intended\n  - MSW intercepted our remote API call and provided the appropriate response\n\n### Interaction tests\n\n- 💡test our component interactions automatically\n- Write an interaction test using the play function\n  - Storybook's [`play`](https://storybook.js.org/docs/react/writing-stories/play-function)\n    - A play function includes small snippets of code that run after the story renders\n    - uses framework-agnostic DOM APIs\n  - and [`@storybook/addon-interactions`](https://storybook.js.org/docs/react/writing-tests/interaction-testing)\n    - visualize our tests in Storybook\n    - providing a step-by-step flow\n    - offers a handy set of UI controls to pause, resume, rewind, and step through each interaction\n  - set up component interactions in `InboxScreen.stories.tsx`\n    - `@storybook/test` package replaces the `@storybook/jest` and `@storybook/testing-library` testing packages\n      - a smaller bundle size\n      - a more straightforward API based on the [Vitest](https://vitest.dev/) package.\n  - Merits\n    - to sidestep our problem, allowing us to interact with our UI\n    - quickly check how it responds if we update our tasks—keeping the UI consistent at no extra manual effort\n  - Downsides\n    - we'd still have to go through each story to run all checks if we make a change\n- Automate tests with the test runner\n  - Storybook's [test runner](https://storybook.js.org/docs/react/writing-tests/test-runner)\n    - a standalone utility—powered by [Playwright](https://playwright.dev/)—that runs all our interactions tests and catches broken stories\n- recommend reading the [official documentation](https://storybook.js.org/docs/react/writing-tests/interaction-testing) to learn more\n- For an even deeper dive into testing, check out the [Testing Handbook](https://storybook.js.org/tutorials/ui-testing-handbook)\n\n## Deploy\n\n## Visual Testing\n\n## Addons\n\n## Conclusion\n\n## Contribute\n",data={title:"Storybook",DateStarted:new Date(17044128e5),tags:["Testing","Storybook"],category:"Front-End Tooling"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/storybook/storybook.md",rawData:void 0},html='<h1 id="storybook">Storybook<a class="anchor" href="#storybook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://storybook.js.org/docs/get-started/install">Install Storybook • Storybook docs</a></li>\n<li>Tutorials\n<ul>\n<li><a href="https://www.youtube.com/watch?v=CuGZgYo6-XY">Storybook 7 Crash Course - React Typescript (youtube.com)</a></li>\n<li><a href="https://www.youtube.com/watch?v=21iHNxVlfvw&#x26;list=PLKBvDYynKmlWa59k8pnw-EHac2_miPagh">01 Course presentation — Modern Component Library w/ React &#x26; Storybook - YouTube</a></li>\n</ul>\n</li>\n</ul>\n<h2 id="why-storybook"><a href="Why-Storybook">Why Storybook</a><a class="anchor" href="#why-storybook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="install--run-storybook"><a href="Install-&#x26;-Run-Storybook">Install &#x26; Run Storybook</a><a class="anchor" href="#install--run-storybook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="config-storybook"><a href="Storybook/Config-Storybook">Config Storybook</a><a class="anchor" href="#config-storybook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="write-stories"><a href="Write-Stories">Write Stories</a><a class="anchor" href="#write-stories"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="data">Data<a class="anchor" href="#data"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="to-build-simple-data-model">❓To build simple data model<a class="anchor" href="#to-build-simple-data-model"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>uses <a href="https://redux-toolkit.js.org/">Redux Toolkit</a>, the most effective toolset for developing applications for storing data with <a href="https://redux.js.org/">Redux</a></li>\n<li><code>npm i @reduxjs/toolkit react-redux</code></li>\n<li>in a file called <code>store.js</code> in the <code>src/lib</code>\n<ul>\n<li>❓construct a simple Redux store that responds to actions that change the task’s state</li>\n</ul>\n</li>\n</ul>\n<h3 id="in-tasklistjsx">In <code>TaskList.jsx</code><a class="anchor" href="#in-tasklistjsx"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>update our <code>TaskList</code> component to connect to the Redux store\n<ul>\n<li>❓<code>import { useDispatch, useSelector } from "react-redux";</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="in-taskliststoriesjsx">In <code>TaskList.stories.jsx</code><a class="anchor" href="#in-taskliststoriesjsx"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>rely on a decorator</li>\n<li>provide a mocked store</li>\n<li><code>excludeStories</code>\n<ul>\n<li>prevents our mocked state to be treated as a story</li>\n<li>more about this field in the <a href="https://storybook.js.org/docs/react/api/csf">Storybook documentation</a>.</li>\n</ul>\n</li>\n</ul>\n<h2 id="screens">Screens<a class="anchor" href="#screens"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="combining-components-in-a-screen-and-developing-that-screen-in-storybook">💡combining components in a screen and developing that screen in Storybook<a class="anchor" href="#combining-components-in-a-screen-and-developing-that-screen-in-storybook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="goal">Goal<a class="anchor" href="#goal"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>mply fetching data from a remote API</li>\n<li>wrapping the <code>TaskList</code> component (which supplies its own data from Redux)</li>\n<li>pulling a top-level <code>error</code> field out of Redux</li>\n</ul>\n<h3 id="updating-our-redux-store-insrclibstorejs-to-connect-to-a-remote-api">❓updating our Redux store (in <code>src/lib/store.js</code>) to connect to a remote API<a class="anchor" href="#updating-our-redux-store-insrclibstorejs-to-connect-to-a-remote-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>handle the various states for our application (i.e., <code>error</code>, <code>succeeded</code>)</li>\n</ul>\n<h3 id="create-ourinboxscreenjsxin-thesrccomponentsdirectory">create our <code>InboxScreen.jsx</code> in the <code>src/components</code> directory<a class="anchor" href="#create-ourinboxscreenjsxin-thesrccomponentsdirectory"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>❓<code>useEffect</code></li>\n</ul>\n<h3 id="change-ourappcomponent-to-render-theinboxscreen">change our <code>App</code> component to render the <code>InboxScreen</code><a class="anchor" href="#change-ourappcomponent-to-render-theinboxscreen"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>eventually, we would use a router to choose the correct screen</li>\n</ul>\n<h3 id="in-inboxscreenstoriesjsx">In <code>InboxScreen.stories.jsx</code><a class="anchor" href="#in-inboxscreenstoriesjsx"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>❌issue with the <code>error</code> story</li>\n<li>Solutions\n<ul>\n<li>provide a mocked version for each state</li>\n<li>or use API mocking library alongside a Storybook addon\n<ul>\n<li>use <a href="https://mswjs.io/">Mock Service Worker</a> and <a href="https://storybook.js.org/addons/msw-storybook-addon">Storybook’s MSW addon</a></li>\n<li>relies on service workers to capture network requests</li>\n<li>provides mocked data in responses</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>How\n<ul>\n<li>to generate a generic service worker inside your <code>public</code> folder\n<ul>\n<li><code>npm run init-msw</code></li>\n</ul>\n</li>\n<li>update our <code>.storybook/preview.js</code> and initialize them</li>\n<li>update the <code>InboxScreen</code> stories and include a <a href="https://storybook.js.org/docs/react/writing-stories/parameters">parameter</a> that mocks the remote API calls</li>\n<li>another viable approach would be to pass data down the hierarchy\n<ul>\n<li>especially when using <a href="http://graphql.org/">GraphQL</a>. It’s how we have built <a href="https://www.chromatic.com/?utm_source=storybook_website&#x26;utm_medium=link&#x26;utm_campaign=storybook">Chromatic</a> alongside 800+ stories</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Result\n<ul>\n<li>✅the <code>error</code> story is now working as intended</li>\n<li>MSW intercepted our remote API call and provided the appropriate response</li>\n</ul>\n</li>\n</ul>\n<h3 id="interaction-tests">Interaction tests<a class="anchor" href="#interaction-tests"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>💡test our component interactions automatically</li>\n<li>Write an interaction test using the play function\n<ul>\n<li>Storybook’s <a href="https://storybook.js.org/docs/react/writing-stories/play-function"><code>play</code></a>\n<ul>\n<li>A play function includes small snippets of code that run after the story renders</li>\n<li>uses framework-agnostic DOM APIs</li>\n</ul>\n</li>\n<li>and <a href="https://storybook.js.org/docs/react/writing-tests/interaction-testing"><code>@storybook/addon-interactions</code></a>\n<ul>\n<li>visualize our tests in Storybook</li>\n<li>providing a step-by-step flow</li>\n<li>offers a handy set of UI controls to pause, resume, rewind, and step through each interaction</li>\n</ul>\n</li>\n<li>set up component interactions in <code>InboxScreen.stories.tsx</code>\n<ul>\n<li><code>@storybook/test</code> package replaces the <code>@storybook/jest</code> and <code>@storybook/testing-library</code> testing packages\n<ul>\n<li>a smaller bundle size</li>\n<li>a more straightforward API based on the <a href="https://vitest.dev/">Vitest</a> package.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Merits\n<ul>\n<li>to sidestep our problem, allowing us to interact with our UI</li>\n<li>quickly check how it responds if we update our tasks—keeping the UI consistent at no extra manual effort</li>\n</ul>\n</li>\n<li>Downsides\n<ul>\n<li>we’d still have to go through each story to run all checks if we make a change</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Automate tests with the test runner\n<ul>\n<li>Storybook’s <a href="https://storybook.js.org/docs/react/writing-tests/test-runner">test runner</a>\n<ul>\n<li>a standalone utility—powered by <a href="https://playwright.dev/">Playwright</a>—that runs all our interactions tests and catches broken stories</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>recommend reading the <a href="https://storybook.js.org/docs/react/writing-tests/interaction-testing">official documentation</a> to learn more</li>\n<li>For an even deeper dive into testing, check out the <a href="https://storybook.js.org/tutorials/ui-testing-handbook">Testing Handbook</a></li>\n</ul>\n<h2 id="deploy">Deploy<a class="anchor" href="#deploy"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="visual-testing">Visual Testing<a class="anchor" href="#visual-testing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="addons">Addons<a class="anchor" href="#addons"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="conclusion">Conclusion<a class="anchor" href="#conclusion"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="contribute">Contribute<a class="anchor" href="#contribute"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>',frontmatter={category:"Front-End Tooling",aliases:["Storybook"],title:"Storybook",topic:["Testing"],type:"D",tags:["Testing","Storybook"],difficulty:null,comment:null,reviewed:null,Datereviewed:null,DateStarted:"2024-01-05T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",status:null,"linter-yaml-title-alias":"Storybook",minutes:2,words:401},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/storybook/storybook.md",url=void 0;function rawContent(){return"\n# Storybook\n\n## Reference\n\n- [Install Storybook • Storybook docs](https://storybook.js.org/docs/get-started/install)\n- Tutorials\n  - [Storybook 7 Crash Course - React Typescript (youtube.com)](https://www.youtube.com/watch?v=CuGZgYo6-XY)\n  - [01 Course presentation — Modern Component Library w/ React & Storybook - YouTube](https://www.youtube.com/watch?v=21iHNxVlfvw&list=PLKBvDYynKmlWa59k8pnw-EHac2_miPagh)\n\n## [Why Storybook](Why-Storybook)\n\n## [Install & Run Storybook](Install-&-Run-Storybook)\n\n## [Config Storybook](Storybook/Config-Storybook)\n\n### [Write Stories](Write-Stories)\n\n## Data\n\n### ❓To build simple data model\n\n- uses [Redux Toolkit](https://redux-toolkit.js.org/), the most effective toolset for developing applications for storing data with [Redux](https://redux.js.org/)\n- `npm i @reduxjs/toolkit react-redux`\n- in a file called `store.js` in the `src/lib`\n  - ❓construct a simple Redux store that responds to actions that change the task's state\n\n### In `TaskList.jsx`\n\n- update our `TaskList` component to connect to the Redux store\n  - ❓`import { useDispatch, useSelector } from \"react-redux\";`\n\n### In `TaskList.stories.jsx`\n\n- rely on a decorator\n- provide a mocked store\n- `excludeStories`\n  - prevents our mocked state to be treated as a story\n  - more about this field in the [Storybook documentation](https://storybook.js.org/docs/react/api/csf).\n\n## Screens\n\n### 💡combining components in a screen and developing that screen in Storybook\n\n### Goal\n\n- mply fetching data from a remote API\n- wrapping the `TaskList` component (which supplies its own data from Redux)\n- pulling a top-level `error` field out of Redux\n\n### ❓updating our Redux store (in `src/lib/store.js`) to connect to a remote API\n\n- handle the various states for our application (i.e., `error`, `succeeded`)\n\n### create our `InboxScreen.jsx` in the `src/components` directory\n\n- ❓`useEffect`\n\n### change our `App` component to render the `InboxScreen`\n\n- eventually, we would use a router to choose the correct screen\n\n### In `InboxScreen.stories.jsx`\n\n- ❌issue with the `error` story\n- Solutions\n  - provide a mocked version for each state\n  - or use API mocking library alongside a Storybook addon\n    - use [Mock Service Worker](https://mswjs.io/) and [Storybook's MSW addon](https://storybook.js.org/addons/msw-storybook-addon)\n    - relies on service workers to capture network requests\n    - provides mocked data in responses\n- How\n  - to generate a generic service worker inside your `public` folder\n    - `npm run init-msw`\n  - update our `.storybook/preview.js` and initialize them\n  - update the `InboxScreen` stories and include a [parameter](https://storybook.js.org/docs/react/writing-stories/parameters) that mocks the remote API calls\n  - another viable approach would be to pass data down the hierarchy\n    - especially when using [GraphQL](http://graphql.org/). It’s how we have built [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) alongside 800+ stories\n- Result\n  - ✅the `error` story is now working as intended\n  - MSW intercepted our remote API call and provided the appropriate response\n\n### Interaction tests\n\n- 💡test our component interactions automatically\n- Write an interaction test using the play function\n  - Storybook's [`play`](https://storybook.js.org/docs/react/writing-stories/play-function)\n    - A play function includes small snippets of code that run after the story renders\n    - uses framework-agnostic DOM APIs\n  - and [`@storybook/addon-interactions`](https://storybook.js.org/docs/react/writing-tests/interaction-testing)\n    - visualize our tests in Storybook\n    - providing a step-by-step flow\n    - offers a handy set of UI controls to pause, resume, rewind, and step through each interaction\n  - set up component interactions in `InboxScreen.stories.tsx`\n    - `@storybook/test` package replaces the `@storybook/jest` and `@storybook/testing-library` testing packages\n      - a smaller bundle size\n      - a more straightforward API based on the [Vitest](https://vitest.dev/) package.\n  - Merits\n    - to sidestep our problem, allowing us to interact with our UI\n    - quickly check how it responds if we update our tasks—keeping the UI consistent at no extra manual effort\n  - Downsides\n    - we'd still have to go through each story to run all checks if we make a change\n- Automate tests with the test runner\n  - Storybook's [test runner](https://storybook.js.org/docs/react/writing-tests/test-runner)\n    - a standalone utility—powered by [Playwright](https://playwright.dev/)—that runs all our interactions tests and catches broken stories\n- recommend reading the [official documentation](https://storybook.js.org/docs/react/writing-tests/interaction-testing) to learn more\n- For an even deeper dive into testing, check out the [Testing Handbook](https://storybook.js.org/tutorials/ui-testing-handbook)\n\n## Deploy\n\n## Visual Testing\n\n## Addons\n\n## Conclusion\n\n## Contribute\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"storybook",text:"Storybook#"},{depth:2,slug:"reference",text:"Reference#"},{depth:2,slug:"why-storybook",text:"Why Storybook#"},{depth:2,slug:"install--run-storybook",text:"Install & Run Storybook#"},{depth:2,slug:"config-storybook",text:"Config Storybook#"},{depth:3,slug:"write-stories",text:"Write Stories#"},{depth:2,slug:"data",text:"Data#"},{depth:3,slug:"to-build-simple-data-model",text:"❓To build simple data model#"},{depth:3,slug:"in-tasklistjsx",text:"In TaskList.jsx#"},{depth:3,slug:"in-taskliststoriesjsx",text:"In TaskList.stories.jsx#"},{depth:2,slug:"screens",text:"Screens#"},{depth:3,slug:"combining-components-in-a-screen-and-developing-that-screen-in-storybook",text:"💡combining components in a screen and developing that screen in Storybook#"},{depth:3,slug:"goal",text:"Goal#"},{depth:3,slug:"updating-our-redux-store-insrclibstorejs-to-connect-to-a-remote-api",text:"❓updating our Redux store (in src/lib/store.js) to connect to a remote API#"},{depth:3,slug:"create-ourinboxscreenjsxin-thesrccomponentsdirectory",text:"create our InboxScreen.jsx in the src/components directory#"},{depth:3,slug:"change-ourappcomponent-to-render-theinboxscreen",text:"change our App component to render the InboxScreen#"},{depth:3,slug:"in-inboxscreenstoriesjsx",text:"In InboxScreen.stories.jsx#"},{depth:3,slug:"interaction-tests",text:"Interaction tests#"},{depth:2,slug:"deploy",text:"Deploy#"},{depth:2,slug:"visual-testing",text:"Visual Testing#"},{depth:2,slug:"addons",text:"Addons#"},{depth:2,slug:"conclusion",text:"Conclusion#"},{depth:2,slug:"contribute",text:"Contribute#"}]}const Content=createComponent(((o,e,t)=>{const{layout:n,...s}=frontmatter;return s.file=file,s.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),storybook=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,storybook};