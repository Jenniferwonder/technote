import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../../chunks/1726300354279/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="front-end-tooling/testing/storybook/write-stories.md",collection="posts",slug="front-end-tooling/testing/storybook/write-stories",body='\n# Write Stories\n\n> [How to write stories • Storybook docs](https://storybook.js.org/docs/writing-stories#default-export)\n\n## Write stories with TypeScript\n\n> [TypeScript • Storybook docs](https://storybook.js.org/docs/configure/typescript)\n\n`Meta`\n\n- to tell Storybook how to infer the **component\'s metadata**  \n   `StoryObj`  \n   - to infer the **type of the component\'s inputs (e.g., props)**\n\n这样在创建新 Story 时如果参数缺失会在编辑器获得报错提示\n\n## Simple Component\n\n#### Goal\n\n- ![|425](https://storybook.js.org/tutorials/intro-to-storybook/task-states-learnstorybook.png)\n\n#### Idea\n\n- first write our test states that correspond to the different types of tasks sketched above\n- use Storybook to create the component in isolation using mocked data.\n- manually test the component\'s appearance given each state as we go\n\n#### Set up\n\n- Baseline HTML implementation\n  - `./components/Task.jsx`\n- Build test states in storybook\n\n  - 2 levels of organization\n    - the component\n    - its child stories\n      - a permutation of a component\n  - `./components/Task.stories.jsx`\n\n    - default export\n\n      - To tell Storybook about the component we are documenting and testing\n      - Contains\n\n        - ```tsx\n          export default {\n          \tcomponent: Task,\n          \ttitle: "Task",\n          \ttags: ["autodocs"],\n          };\n          ```\n\n        - `component`\n        - `title`\n          - how to group or categorize the component in the Storybook sidebar\n        - `tags`\n          - to automatically generate documentation for our components\n\n    - test cases\n      - To define our stories, we\'ll use Component Story Format 3 (also known as [CSF3](https://storybook.js.org/docs/react/api/csf) )\n      - By exporting an object containing each component state, we can _define our tests_ more intuitively and author and _reuse stories_ more efficiently\n      - use a base `task` arg to build out the shape of the task the component expects\n        - Typically modeled from what the actual data looks like\n\n#### Build out the states\n\n- `./components/Task.jsx`\n  - label\n    - `htmlFor`\n    - `aria-label`\n  - input\n    - `type = "text"`\n      - value\n      - readOnly\n      - name\n      - placeholder\n    - `type = "checkbox"`\n      - disabled\n      - checked\n      - name\n      - id\n  - span\n    - `className = "checkbox-custom"`\n  - button\n    - `aria-label`\n    - `id`\n    - `key`\n\n#### Specify data requirements\n\n- use `propTypes` in React to specify the shape of data that a component expects\n  - self-documenting\n  - helps catch problems early\n- or use TypeScript\n\n## Composite Component\n\n#### Goal\n\n- TaskList\n  - ![](https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-1.png)\n- Loading state when disconnected and empty state when no tasks\n  - ![](https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-2.png)\n\n#### Test states\n\n- [Decorators](https://storybook.js.org/docs/react/writing-stories/decorators) are a way to provide arbitrary wrappers to stories\n  - to add some `padding` around the rendered component\n  - to wrap stories in “providers”-–i.e., library components that set React context\n- importing `TaskStories`, we were able to [compose](https://storybook.js.org/docs/react/writing-stories/args#args-composition) the arguments (args for short) in our stories with minimal effort\n\n- ```tsx\n  export default {\n  \tcomponent: TaskList,\n  \ttitle: "TaskList",\n  \tdecorators: [(story) => <div style={{ padding: "3rem" }}>{story()}</div>],\n  \ttags: ["autodocs"],\n  };\n  ```\n\n#### Build out states\n',data={title:"Write Stories",DateStarted:new Date(17091648e5),tags:["Testing","Storybook"],category:"Front-End Tooling"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/storybook/write-stories.md",rawData:void 0},html='<h1 id="write-stories">Write Stories<a class="anchor" href="#write-stories"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p><a href="https://storybook.js.org/docs/writing-stories#default-export">How to write stories • Storybook docs</a></p>\n</blockquote>\n<h2 id="write-stories-with-typescript">Write stories with TypeScript<a class="anchor" href="#write-stories-with-typescript"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p><a href="https://storybook.js.org/docs/configure/typescript">TypeScript • Storybook docs</a></p>\n</blockquote>\n<p><code>Meta</code></p>\n<ul>\n<li>to tell Storybook how to infer the <strong>component’s metadata</strong><br>\n <code>StoryObj</code><br>\n - to infer the <strong>type of the component’s inputs (e.g., props)</strong></li>\n</ul>\n<p>这样在创建新 Story 时如果参数缺失会在编辑器获得报错提示</p>\n<h2 id="simple-component">Simple Component<a class="anchor" href="#simple-component"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="goal">Goal<a class="anchor" href="#goal"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><img src="https://storybook.js.org/tutorials/intro-to-storybook/task-states-learnstorybook.png" alt="|425"></li>\n</ul>\n<h4 id="idea">Idea<a class="anchor" href="#idea"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>first write our test states that correspond to the different types of tasks sketched above</li>\n<li>use Storybook to create the component in isolation using mocked data.</li>\n<li>manually test the component’s appearance given each state as we go</li>\n</ul>\n<h4 id="set-up">Set up<a class="anchor" href="#set-up"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>\n<p>Baseline HTML implementation</p>\n<ul>\n<li><code>./components/Task.jsx</code></li>\n</ul>\n</li>\n<li>\n<p>Build test states in storybook</p>\n<ul>\n<li>\n<p>2 levels of organization</p>\n<ul>\n<li>the component</li>\n<li>its child stories\n<ul>\n<li>a permutation of a component</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>./components/Task.stories.jsx</code></p>\n<ul>\n<li>\n<p>default export</p>\n<ul>\n<li>\n<p>To tell Storybook about the component we are documenting and testing</p>\n</li>\n<li>\n<p>Contains</p>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tcomponent: Task,</span></span>\n<span class="line"><span style="color:#E1E4E8">\ttitle: </span><span style="color:#9ECBFF">"Task"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\ttags: [</span><span style="color:#9ECBFF">"autodocs"</span><span style="color:#E1E4E8">],</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p><code>component</code></p>\n</li>\n<li>\n<p><code>title</code></p>\n<ul>\n<li>how to group or categorize the component in the Storybook sidebar</li>\n</ul>\n</li>\n<li>\n<p><code>tags</code></p>\n<ul>\n<li>to automatically generate documentation for our components</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>test cases</p>\n<ul>\n<li>To define our stories, we’ll use Component Story Format 3 (also known as <a href="https://storybook.js.org/docs/react/api/csf">CSF3</a> )</li>\n<li>By exporting an object containing each component state, we can <em>define our tests</em> more intuitively and author and <em>reuse stories</em> more efficiently</li>\n<li>use a base <code>task</code> arg to build out the shape of the task the component expects\n<ul>\n<li>Typically modeled from what the actual data looks like</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id="build-out-the-states">Build out the states<a class="anchor" href="#build-out-the-states"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><code>./components/Task.jsx</code>\n<ul>\n<li>label\n<ul>\n<li><code>htmlFor</code></li>\n<li><code>aria-label</code></li>\n</ul>\n</li>\n<li>input\n<ul>\n<li><code>type = "text"</code>\n<ul>\n<li>value</li>\n<li>readOnly</li>\n<li>name</li>\n<li>placeholder</li>\n</ul>\n</li>\n<li><code>type = "checkbox"</code>\n<ul>\n<li>disabled</li>\n<li>checked</li>\n<li>name</li>\n<li>id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>span\n<ul>\n<li><code>className = "checkbox-custom"</code></li>\n</ul>\n</li>\n<li>button\n<ul>\n<li><code>aria-label</code></li>\n<li><code>id</code></li>\n<li><code>key</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id="specify-data-requirements">Specify data requirements<a class="anchor" href="#specify-data-requirements"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>use <code>propTypes</code> in React to specify the shape of data that a component expects\n<ul>\n<li>self-documenting</li>\n<li>helps catch problems early</li>\n</ul>\n</li>\n<li>or use TypeScript</li>\n</ul>\n<h2 id="composite-component">Composite Component<a class="anchor" href="#composite-component"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="goal-1">Goal<a class="anchor" href="#goal-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>TaskList\n<ul>\n<li><img src="https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-1.png" alt=""></li>\n</ul>\n</li>\n<li>Loading state when disconnected and empty state when no tasks\n<ul>\n<li><img src="https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-2.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h4 id="test-states">Test states<a class="anchor" href="#test-states"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>\n<p><a href="https://storybook.js.org/docs/react/writing-stories/decorators">Decorators</a> are a way to provide arbitrary wrappers to stories</p>\n<ul>\n<li>to add some <code>padding</code> around the rendered component</li>\n<li>to wrap stories in “providers”-–i.e., library components that set React context</li>\n</ul>\n</li>\n<li>\n<p>importing <code>TaskStories</code>, we were able to <a href="https://storybook.js.org/docs/react/writing-stories/args#args-composition">compose</a> the arguments (args for short) in our stories with minimal effort</p>\n</li>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tcomponent: TaskList,</span></span>\n<span class="line"><span style="color:#E1E4E8">\ttitle: </span><span style="color:#9ECBFF">"TaskList"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\tdecorators: [(</span><span style="color:#FFAB70">story</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> style</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{{ padding: </span><span style="color:#9ECBFF">"3rem"</span><span style="color:#E1E4E8"> }}>{</span><span style="color:#B392F0">story</span><span style="color:#E1E4E8">()}&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">>],</span></span>\n<span class="line"><span style="color:#E1E4E8">\ttags: [</span><span style="color:#9ECBFF">"autodocs"</span><span style="color:#E1E4E8">],</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n<h4 id="build-out-states">Build out states<a class="anchor" href="#build-out-states"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>',frontmatter={category:"Front-End Tooling",aliases:["Write Stories"],title:"Write Stories",topic:["Testing"],type:"D",tags:["Testing","Storybook"],DateStarted:"2024-02-29T00:00:00.000Z",DateModified:"2024-09-14T00:00:00.000Z",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"Write Stories",minutes:1,words:299},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/storybook/write-stories.md",url=void 0;function rawContent(){return'\n# Write Stories\n\n> [How to write stories • Storybook docs](https://storybook.js.org/docs/writing-stories#default-export)\n\n## Write stories with TypeScript\n\n> [TypeScript • Storybook docs](https://storybook.js.org/docs/configure/typescript)\n\n`Meta`\n\n- to tell Storybook how to infer the **component\'s metadata**  \n   `StoryObj`  \n   - to infer the **type of the component\'s inputs (e.g., props)**\n\n这样在创建新 Story 时如果参数缺失会在编辑器获得报错提示\n\n## Simple Component\n\n#### Goal\n\n- ![|425](https://storybook.js.org/tutorials/intro-to-storybook/task-states-learnstorybook.png)\n\n#### Idea\n\n- first write our test states that correspond to the different types of tasks sketched above\n- use Storybook to create the component in isolation using mocked data.\n- manually test the component\'s appearance given each state as we go\n\n#### Set up\n\n- Baseline HTML implementation\n  - `./components/Task.jsx`\n- Build test states in storybook\n\n  - 2 levels of organization\n    - the component\n    - its child stories\n      - a permutation of a component\n  - `./components/Task.stories.jsx`\n\n    - default export\n\n      - To tell Storybook about the component we are documenting and testing\n      - Contains\n\n        - ```tsx\n          export default {\n          \tcomponent: Task,\n          \ttitle: "Task",\n          \ttags: ["autodocs"],\n          };\n          ```\n\n        - `component`\n        - `title`\n          - how to group or categorize the component in the Storybook sidebar\n        - `tags`\n          - to automatically generate documentation for our components\n\n    - test cases\n      - To define our stories, we\'ll use Component Story Format 3 (also known as [CSF3](https://storybook.js.org/docs/react/api/csf) )\n      - By exporting an object containing each component state, we can _define our tests_ more intuitively and author and _reuse stories_ more efficiently\n      - use a base `task` arg to build out the shape of the task the component expects\n        - Typically modeled from what the actual data looks like\n\n#### Build out the states\n\n- `./components/Task.jsx`\n  - label\n    - `htmlFor`\n    - `aria-label`\n  - input\n    - `type = "text"`\n      - value\n      - readOnly\n      - name\n      - placeholder\n    - `type = "checkbox"`\n      - disabled\n      - checked\n      - name\n      - id\n  - span\n    - `className = "checkbox-custom"`\n  - button\n    - `aria-label`\n    - `id`\n    - `key`\n\n#### Specify data requirements\n\n- use `propTypes` in React to specify the shape of data that a component expects\n  - self-documenting\n  - helps catch problems early\n- or use TypeScript\n\n## Composite Component\n\n#### Goal\n\n- TaskList\n  - ![](https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-1.png)\n- Loading state when disconnected and empty state when no tasks\n  - ![](https://storybook.js.org/tutorials/intro-to-storybook/tasklist-states-2.png)\n\n#### Test states\n\n- [Decorators](https://storybook.js.org/docs/react/writing-stories/decorators) are a way to provide arbitrary wrappers to stories\n  - to add some `padding` around the rendered component\n  - to wrap stories in “providers”-–i.e., library components that set React context\n- importing `TaskStories`, we were able to [compose](https://storybook.js.org/docs/react/writing-stories/args#args-composition) the arguments (args for short) in our stories with minimal effort\n\n- ```tsx\n  export default {\n  \tcomponent: TaskList,\n  \ttitle: "TaskList",\n  \tdecorators: [(story) => <div style={{ padding: "3rem" }}>{story()}</div>],\n  \ttags: ["autodocs"],\n  };\n  ```\n\n#### Build out states\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"write-stories",text:"Write Stories#"},{depth:2,slug:"write-stories-with-typescript",text:"Write stories with TypeScript#"},{depth:2,slug:"simple-component",text:"Simple Component#"},{depth:4,slug:"goal",text:"Goal#"},{depth:4,slug:"idea",text:"Idea#"},{depth:4,slug:"set-up",text:"Set up#"},{depth:4,slug:"build-out-the-states",text:"Build out the states#"},{depth:4,slug:"specify-data-requirements",text:"Specify data requirements#"},{depth:2,slug:"composite-component",text:"Composite Component#"},{depth:4,slug:"goal-1",text:"Goal#"},{depth:4,slug:"test-states",text:"Test states#"},{depth:4,slug:"build-out-states",text:"Build out states#"}]}const Content=createComponent(((t,n,o)=>{const{layout:e,...s}=frontmatter;return s.file=file,s.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),writeStories=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,slug,writeStories};