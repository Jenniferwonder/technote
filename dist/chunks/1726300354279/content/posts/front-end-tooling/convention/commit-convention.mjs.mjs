import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="commit-convention">Commit Convention<a class="anchor" href="#commit-convention"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="tools">Tools<a class="anchor" href="#tools"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="https://commitizen.github.io/cz-cli/">Commitizen by commitizen</a>\n<code>git cz</code> instead of <code>git commit -m</code></p>\n<h2 id="convention">Convention<a class="anchor" href="#convention"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p><a href="https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/">How to Write Better Git Commit Messages – A Step-By-Step Guide</a></p>\n</blockquote>\n<ul>\n<li><code>feat</code> – a new feature is introduced with the changes</li>\n<li><code>fix</code> – a bug fix has occurred</li>\n<li><code>chore</code> – changes that do not relate to a fix or feature and don’t modify src or test files (for example updating dependencies)</li>\n<li><code>refactor</code> – refactored code that neither fixes a bug nor adds a feature</li>\n<li><code>docs</code> – updates to documentation such as a the README or other markdown files</li>\n<li><code>style</code> – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.</li>\n<li><code>test</code> – including new or correcting previous tests</li>\n<li><code>perf</code> – performance improvements</li>\n<li><code>ci</code> – continuous integration related</li>\n<li><code>build</code> – changes that affect the build system or external dependencies</li>\n<li><code>revert</code> – reverts a previous commit</li>\n</ul>',frontmatter={title:"Commit Convention",topic:null,type:null,tags:["DevPractice"],category:"Front-End Tooling",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["Commit Convention"],draft:!0,DateStarted:"2024-04-21T00:00:00.000Z",DateModified:"2024-06-11T00:00:00.000Z","linter-yaml-title-alias":"Commit Convention",minutes:1,words:125},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/convention/commit-convention.md",url=void 0;function rawContent(){return"# Commit Convention\n## Tools\n[Commitizen by commitizen](https://commitizen.github.io/cz-cli/)\n`git cz` instead of `git commit -m`\n## Convention\n>[How to Write Better Git Commit Messages – A Step-By-Step Guide](https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/)\n- `feat` – a new feature is introduced with the changes\n- `fix` – a bug fix has occurred\n- `chore` – changes that do not relate to a fix or feature and don't modify src or test files (for example updating dependencies)\n- `refactor` – refactored code that neither fixes a bug nor adds a feature\n- `docs` – updates to documentation such as a the README or other markdown files\n- `style` – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.\n- `test` – including new or correcting previous tests\n- `perf` – performance improvements\n- `ci` – continuous integration related\n- `build` – changes that affect the build system or external dependencies\n- `revert` – reverts a previous commit"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"commit-convention",text:"Commit Convention#"},{depth:2,slug:"tools",text:"Tools#"},{depth:2,slug:"convention",text:"Convention#"}]}const Content=createComponent(((e,t,o)=>{const{layout:n,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};