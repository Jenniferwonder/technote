import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="dom">DOM<a class="anchor" href="#dom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h3 id="selectors">Selectors<a class="anchor" href="#selectors"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>选中 <code>ul</code> 节点下所有 <code>li</code> 节点下的 <code>img</code> 元素，返回一个数组</p>\n<ul>\n<li><code>const imgNode = listNode.querySelectorAll(\'li > img\')</code></li>\n</ul>\n<h3 id="offsetwidthoffsetheightclientwidthclientheight-与-scrollwidthscrollheight-的区别">offsetWidth/offsetHeight，clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别<a class="anchor" href="#offsetwidthoffsetheightclientwidthclientheight-与-scrollwidthscrollheight-的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>offsetWidth/offsetHeight 是元素的可见宽度/高度加上 padding、border 和滚动条（如果存在）的宽度/高度。</p>\n<p>clientWidth/clientHeight 是元素的可见宽度/高度，不包括 padding 和滚动条。</p>\n<p>scrollWidth/scrollHeight 是元素内容的完整宽度/高度，包括溢出部分。如果元素没有溢出，则 scrollWidth/scrollHeight 等于 clientWidth/clientHeight。如果有溢出，则 scrollWidth/scrollHeight 大于 clientWidth/clientHeight。</p>\n<h3 id="mouseovermouseout-与-mouseentermouseleave-的区别与联系">mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系<a class="anchor" href="#mouseovermouseout-与-mouseentermouseleave-的区别与联系"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>mouseover 和 mouseout 是 HTML DOM 事件，它们会在鼠标移入或移出元素时触发。它们也会在鼠标指针进入或离开<strong>子元素</strong>时触发。这也就是说，如果在父元素上有 mouseover 事件，并且鼠标指针进入子元素，则该元素上仍然会触发 mouseover 事件。mouseout 同理。</p>\n<p>mouseenter 和 mouseleave 事件也是在鼠标进入或离开元素时触发。与 mouseover 和 mouseout 不同的是，mouseenter 和 mouseleave 事件<strong>不会传播到子元素</strong>。因此，如果鼠标指针进入或离开元素的子元素，则不会触发 mouseenter 和 mouseleave 事件。</p>\n<h3 id="eventstoppropagation与-eventstopimmediatepropagation-的区别">event.stopPropagation()与 event.stopImmediatePropagation 的区别<a class="anchor" href="#eventstoppropagation与-eventstopimmediatepropagation-的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>event.stopPropagation()可以阻止事件冒泡到父元素，但不阻止其他事件处理程序的执行。而 event.stopImmediatePropagation()可以立即阻止事件冒泡并取消同一元素上其他事件处理程序的执行。</p>\n<h3 id="dom-api">DOM API<a class="anchor" href="#dom-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="scroll">Scroll<a class="anchor" href="#scroll"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>.scrollIntoView()</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">imgNode.</span><span style="color:#B392F0">scrollIntoView</span><span style="color:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#E1E4E8">\tbehavior: </span><span style="color:#9ECBFF">"smooth"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\tblock: </span><span style="color:#9ECBFF">"nearest"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\tinline: </span><span style="color:#9ECBFF">"center"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="video">Video<a class="anchor" href="#video"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>.play()</code><br>\n<code>.pause()</code></p>\n<h2 id="intro-to-dom">Intro to DOM<a class="anchor" href="#intro-to-dom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="文档对象模型-document-object-model">文档对象模型 Document Object Model<a class="anchor" href="#文档对象模型-document-object-model"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>an application programming interface (API) for XML that was extended for use in HTML.</li>\n<li>DOM 表示 由多层节点构成的文档，通过它开发者可以添加、删除和修改页面的各个部分。\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-O-JS-C14-DOM.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h3 id="why-dom">Why DOM<a class="anchor" href="#why-dom"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<blockquote>\n<p>” World Wide Web Consortium (W 3 C) “</p>\n</blockquote>\n</li>\n</ul>\n<h3 id="dom-级别-c16-dom-level-2-and-3">DOM 级别 (<a href="js/dom/C16-DOM-Level-2-and-3">C16-DOM Level 2 and 3</a>)<a class="anchor" href="#dom-级别-c16-dom-level-2-and-3"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<blockquote>\n<p>” DOM Level 1 "</p>\n</blockquote>\n<ul>\n<li>\n<blockquote>\n<p>" the DOM Core "</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>" DOM HTML "</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>" DOM Level 2 "</p>\n</blockquote>\n<ul>\n<li>\n<blockquote>\n<p>" DOM views "</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>" DOM events "</p>\n</blockquote>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">guessSubmit.</span><span style="color:#B392F0">addEventListener</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"click"</span><span style="color:#E1E4E8">, checkGuess);</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>" DOM style "</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>" DOM traversal and range "</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>" DOM Level 3 "</p>\n</blockquote>\n<ul>\n<li>\n<blockquote>\n<p>" DOM Load and Save "</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>" DOM Living Standard “</p>\n</blockquote>\n</li>\n<li>\n<p>Reference</p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core">Using the W3C DOM Level 1 Core - Web APIs | MDN</a></li>\n</ul>\n</li>\n<li>\n<p>Overview</p>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20230310114615.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h3 id="other-doms-">Other DOMs "<a class="anchor" href="#other-doms-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<blockquote>\n<p>" The languages in the following list are XML-based, and each DOM adds methods and interfaces unique to a particular language "</p>\n</blockquote>\n<ul>\n<li>\n<blockquote>\n<p>" Scalable Vector Graphics (SVG) "</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>" Mathematical Markup Language (MathML) "</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>" Synchronized Multimedia Integration Language (SMIL) “</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="dom-support-in-web-browsers-">DOM Support in Web Browsers "<a class="anchor" href="#dom-support-in-web-browsers-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<blockquote>\n<p>" For web browsers, however, the DOM has been implemented using ECMAScript and now makes up a large part of the JavaScript language. “</p>\n</blockquote>\n</li>\n</ul>\n<h2 id="dom-节点层级">DOM 节点层级<a class="anchor" href="#dom-节点层级"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="12-种节点类型">12 种节点类型<a class="anchor" href="#12-种节点类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="node-type">Node Type<a class="anchor" href="#node-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>The nodeName and nodeValue Properties</li>\n<li>Node Relationships</li>\n<li>Manipulating Nodes</li>\n<li>Other Methods</li>\n</ul>\n<h3 id="document-type">Document Type<a class="anchor" href="#document-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Document Children</li>\n<li>Document Information</li>\n<li>Locating Elements “</li>\n<li>Special Collections “</li>\n<li>DOM Conformance Detection “</li>\n<li>Document Writing “</li>\n</ul>\n<h3 id="element-type">Element Type<a class="anchor" href="#element-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<p>HTML Elements “</p>\n</li>\n<li>\n<p>Selector</p>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> guessField</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> document.</span><span style="color:#B392F0">querySelector</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">".guessField"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Getting Attributes “</p>\n</li>\n<li>\n<p>Setting Attributes “</p>\n</li>\n<li>\n<p>ClassList</p>\n<ul>\n<li><code>document.classList.add/toggle/remove</code></li>\n</ul>\n</li>\n<li>\n<p>The attributes Property “</p>\n</li>\n<li>\n<p>Creating Elements “</p>\n</li>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">resetButton </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> document.</span><span style="color:#B392F0">createElement</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"button"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">resetButton.textContent </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> "Start new game"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>Element Children “</p>\n</li>\n<li>\n<p>appendChild</p>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">document.body.</span><span style="color:#B392F0">appendChild</span><span style="color:#E1E4E8">(resetButton);</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="text-type">Text Type<a class="anchor" href="#text-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Creating Text Nodes “</li>\n<li>Normalizing Text Nodes “</li>\n<li>Splitting Text Nodes “</li>\n</ul>\n<h3 id="comment-type">Comment Type<a class="anchor" href="#comment-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="cdatasection-type">CDATASection Type<a class="anchor" href="#cdatasection-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="documenttype-type">DocumentType Type<a class="anchor" href="#documenttype-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="documentfragment-type">DocumentFragment Type<a class="anchor" href="#documentfragment-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="attr-type">Attr Type<a class="anchor" href="#attr-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="dom-编程操作">DOM 编程/操作<a class="anchor" href="#dom-编程操作"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="dynamic-scripts-">Dynamic Scripts “<a class="anchor" href="#dynamic-scripts-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="dynamic-styles-">Dynamic Styles “<a class="anchor" href="#dynamic-styles-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="manipulating-tables-">Manipulating Tables “<a class="anchor" href="#manipulating-tables-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="using-nodelists-">Using NodeLists “<a class="anchor" href="#using-nodelists-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents">Manipulating documents - Learn web development | MDN (mozilla.org)</a></li>\n</ul>\n<h2 id="mutationobserver-接口">MutationObserver 接口<a class="anchor" href="#mutationobserver-接口"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="basic-usage-">Basic usage “<a class="anchor" href="#basic-usage-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>The observe() method “</li>\n<li>Working with Callbacks and MutationRecords “</li>\n<li>The disconnect() method “</li>\n<li>Multiplexing a MutationObserver “</li>\n<li>Reusing a MutationObserver “</li>\n</ul>\n<h3 id="controlling-the-observer-scope-with-mutationobserverinit-">Controlling the Observer scope with MutationObserverInit “<a class="anchor" href="#controlling-the-observer-scope-with-mutationobserverinit-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Observing attribute mutations “</li>\n<li>Observing character data mutations “</li>\n<li>Observing child mutations “</li>\n<li>Observing subtree mutations “</li>\n</ul>\n<h3 id="async-callbacks-and-the-record-queue-">Async Callbacks and the Record Queue “<a class="anchor" href="#async-callbacks-and-the-record-queue-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Behavior of the Record Queue “</li>\n<li>The takeRecords() method “</li>\n</ul>\n<h3 id="performance-memory-and-garbage-collection-">Performance, Memory, and Garbage Collection “<a class="anchor" href="#performance-memory-and-garbage-collection-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>MutationObserver References “</li>\n<li>MutationRecord References “</li>\n</ul>\n<h2 id="c15-dom-extensions">📌<a href="js/dom/C15-DOM-Extensions">C15-DOM Extensions</a><a class="anchor" href="#c15-dom-extensions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="selectors-api">Selectors API<a class="anchor" href="#selectors-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="元素遍历">元素遍历<a class="anchor" href="#元素遍历"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="html5">HTML5<a class="anchor" href="#html5"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="专有扩展">专有扩展<a class="anchor" href="#专有扩展"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>',frontmatter={type:"D",tags:["JavaScript"],category:"Programming",reviewed:null,difficulty:null,comment:null,draft:!0,DateStarted:"2023-07-14T00:00:00.000Z",Datereviewed:null,DateModified:"2024-04-25T00:00:00.000Z",status:["Capturing"],aliases:["DOM","C14"],pages:52,topic:["DOM"],title:"DOM","linter-yaml-title-alias":"DOM",minutes:4,words:723},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/dom/dom.md",url=void 0;function rawContent(){return'\n# DOM\n\n### Selectors\n\n选中 `ul` 节点下所有 `li` 节点下的 `img` 元素，返回一个数组\n\n- `const imgNode = listNode.querySelectorAll(\'li > img\')`\n\n### offsetWidth/offsetHeight，clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别\n\noffsetWidth/offsetHeight 是元素的可见宽度/高度加上 padding、border 和滚动条（如果存在）的宽度/高度。\n\nclientWidth/clientHeight 是元素的可见宽度/高度，不包括 padding 和滚动条。\n\nscrollWidth/scrollHeight 是元素内容的完整宽度/高度，包括溢出部分。如果元素没有溢出，则 scrollWidth/scrollHeight 等于 clientWidth/clientHeight。如果有溢出，则 scrollWidth/scrollHeight 大于 clientWidth/clientHeight。\n\n### mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系\n\nmouseover 和 mouseout 是 HTML DOM 事件，它们会在鼠标移入或移出元素时触发。它们也会在鼠标指针进入或离开**子元素**时触发。这也就是说，如果在父元素上有 mouseover 事件，并且鼠标指针进入子元素，则该元素上仍然会触发 mouseover 事件。mouseout 同理。\n\nmouseenter 和 mouseleave 事件也是在鼠标进入或离开元素时触发。与 mouseover 和 mouseout 不同的是，mouseenter 和 mouseleave 事件**不会传播到子元素**。因此，如果鼠标指针进入或离开元素的子元素，则不会触发 mouseenter 和 mouseleave 事件。\n\n### event.stopPropagation()与 event.stopImmediatePropagation 的区别\n\nevent.stopPropagation()可以阻止事件冒泡到父元素，但不阻止其他事件处理程序的执行。而 event.stopImmediatePropagation()可以立即阻止事件冒泡并取消同一元素上其他事件处理程序的执行。\n\n### DOM API\n\n#### Scroll\n\n`.scrollIntoView()`\n\n```js\nimgNode.scrollIntoView({\n\tbehavior: "smooth",\n\tblock: "nearest",\n\tinline: "center",\n});\n```\n\n#### Video\n\n`.play()`  \n`.pause()`\n\n## Intro to DOM\n\n### 文档对象模型 Document Object Model\n\n- an application programming interface (API) for XML that was extended for use in HTML.\n- DOM 表示 由多层节点构成的文档，通过它开发者可以添加、删除和修改页面的各个部分。\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-O-JS-C14-DOM.png)\n\n### Why DOM\n\n- > " World Wide Web Consortium (W 3 C) "\n\n### DOM 级别 ([C16-DOM Level 2 and 3](js/dom/C16-DOM-Level-2-and-3))\n\n- > " DOM Level 1 "\n  - > " the DOM Core "\n  - > " DOM HTML "\n- > " DOM Level 2 "\n\n  - > " DOM views "\n  - > " DOM events "\n\n    - ```js\n      guessSubmit.addEventListener("click", checkGuess);\n      ```\n\n  - > " DOM style "\n  - > " DOM traversal and range "\n\n- > " DOM Level 3 "\n  - > " DOM Load and Save "\n- > " DOM Living Standard "\n- Reference\n  - [Using the W3C DOM Level 1 Core - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core)\n- Overview\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20230310114615.png)\n\n### Other DOMs "\n\n- > " The languages in the following list are XML-based, and each DOM adds methods and interfaces unique to a particular language "\n  - > " Scalable Vector Graphics (SVG) "\n  - > " Mathematical Markup Language (MathML) "\n  - > " Synchronized Multimedia Integration Language (SMIL) "\n\n### DOM Support in Web Browsers "\n\n- > " For web browsers, however, the DOM has been implemented using ECMAScript and now makes up a large part of the JavaScript language. "\n\n## DOM 节点层级\n\n### 12 种节点类型\n\n### Node Type\n\n- The nodeName and nodeValue Properties\n- Node Relationships\n- Manipulating Nodes\n- Other Methods\n\n### Document Type\n\n- Document Children\n- Document Information\n- Locating Elements "\n- Special Collections "\n- DOM Conformance Detection "\n- Document Writing "\n\n### Element Type\n\n- HTML Elements "\n\n- Selector\n\n  - ```js\n    const guessField = document.querySelector(".guessField");\n    ```\n\n- Getting Attributes "\n- Setting Attributes "\n- ClassList\n  - `document.classList.add/toggle/remove`\n- The attributes Property "\n- Creating Elements "\n\n- ```js\n  resetButton = document.createElement("button");\n  resetButton.textContent = "Start new game";\n  ```\n\n- Element Children "\n- appendChild\n\n  - ```js\n    document.body.appendChild(resetButton);\n    ```\n\n### Text Type\n\n- Creating Text Nodes "\n- Normalizing Text Nodes "\n- Splitting Text Nodes "\n\n### Comment Type\n\n### CDATASection Type\n\n### DocumentType Type\n\n### DocumentFragment Type\n\n### Attr Type\n\n## DOM 编程/操作\n\n### Dynamic Scripts "\n\n### Dynamic Styles "\n\n### Manipulating Tables "\n\n### Using NodeLists "\n\n### Reference\n\n- [Manipulating documents - Learn web development | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents)\n\n## MutationObserver 接口\n\n### Basic usage "\n\n- The observe() method "\n- Working with Callbacks and MutationRecords "\n- The disconnect() method "\n- Multiplexing a MutationObserver "\n- Reusing a MutationObserver "\n\n### Controlling the Observer scope with MutationObserverInit "\n\n- Observing attribute mutations "\n- Observing character data mutations "\n- Observing child mutations "\n- Observing subtree mutations "\n\n### Async Callbacks and the Record Queue "\n\n- Behavior of the Record Queue "\n- The takeRecords() method "\n\n### Performance, Memory, and Garbage Collection "\n\n- MutationObserver References "\n- MutationRecord References "\n\n## 📌[C15-DOM Extensions](js/dom/C15-DOM-Extensions)\n\n### Selectors API\n\n### 元素遍历\n\n### HTML5\n\n### 专有扩展\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"dom",text:"DOM#"},{depth:3,slug:"selectors",text:"Selectors#"},{depth:3,slug:"offsetwidthoffsetheightclientwidthclientheight-与-scrollwidthscrollheight-的区别",text:"offsetWidth/offsetHeight，clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别#"},{depth:3,slug:"mouseovermouseout-与-mouseentermouseleave-的区别与联系",text:"mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系#"},{depth:3,slug:"eventstoppropagation与-eventstopimmediatepropagation-的区别",text:"event.stopPropagation()与 event.stopImmediatePropagation 的区别#"},{depth:3,slug:"dom-api",text:"DOM API#"},{depth:4,slug:"scroll",text:"Scroll#"},{depth:4,slug:"video",text:"Video#"},{depth:2,slug:"intro-to-dom",text:"Intro to DOM#"},{depth:3,slug:"文档对象模型-document-object-model",text:"文档对象模型 Document Object Model#"},{depth:3,slug:"why-dom",text:"Why DOM#"},{depth:3,slug:"dom-级别-c16-dom-level-2-and-3",text:"DOM 级别 (C16-DOM Level 2 and 3)#"},{depth:3,slug:"other-doms-",text:'Other DOMs "#'},{depth:3,slug:"dom-support-in-web-browsers-",text:'DOM Support in Web Browsers "#'},{depth:2,slug:"dom-节点层级",text:"DOM 节点层级#"},{depth:3,slug:"12-种节点类型",text:"12 种节点类型#"},{depth:3,slug:"node-type",text:"Node Type#"},{depth:3,slug:"document-type",text:"Document Type#"},{depth:3,slug:"element-type",text:"Element Type#"},{depth:3,slug:"text-type",text:"Text Type#"},{depth:3,slug:"comment-type",text:"Comment Type#"},{depth:3,slug:"cdatasection-type",text:"CDATASection Type#"},{depth:3,slug:"documenttype-type",text:"DocumentType Type#"},{depth:3,slug:"documentfragment-type",text:"DocumentFragment Type#"},{depth:3,slug:"attr-type",text:"Attr Type#"},{depth:2,slug:"dom-编程操作",text:"DOM 编程/操作#"},{depth:3,slug:"dynamic-scripts-",text:"Dynamic Scripts “#"},{depth:3,slug:"dynamic-styles-",text:"Dynamic Styles “#"},{depth:3,slug:"manipulating-tables-",text:"Manipulating Tables “#"},{depth:3,slug:"using-nodelists-",text:"Using NodeLists “#"},{depth:3,slug:"reference",text:"Reference#"},{depth:2,slug:"mutationobserver-接口",text:"MutationObserver 接口#"},{depth:3,slug:"basic-usage-",text:"Basic usage “#"},{depth:3,slug:"controlling-the-observer-scope-with-mutationobserverinit-",text:"Controlling the Observer scope with MutationObserverInit “#"},{depth:3,slug:"async-callbacks-and-the-record-queue-",text:"Async Callbacks and the Record Queue “#"},{depth:3,slug:"performance-memory-and-garbage-collection-",text:"Performance, Memory, and Garbage Collection “#"},{depth:2,slug:"c15-dom-extensions",text:"📌C15-DOM Extensions#"},{depth:3,slug:"selectors-api",text:"Selectors API#"},{depth:3,slug:"元素遍历",text:"元素遍历#"},{depth:3,slug:"html5",text:"HTML5#"},{depth:3,slug:"专有扩展",text:"专有扩展#"}]}const Content=createComponent(((e,n,t)=>{const{layout:a,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};