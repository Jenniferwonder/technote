import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="object-types-instanceof-标识对象类型">Object Types (instanceof)-标识对象类型<a class="anchor" href="#object-types-instanceof-标识对象类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<hr>\n<p>Basic</p>\n<h3 id="判断对象是否某该构造函数的实例标识对象类型">判断对象是否某该构造函数的实例（标识对象类型）<a class="anchor" href="#判断对象是否某该构造函数的实例标识对象类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>❌<code>constructor</code> 属性</li>\n<li>✅<code>instanceof</code> - To identify what type of object it is (更常用) - <img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C04VariablesScopeMemory-6-x62-y394.png" alt=""><br>\n🏷️: JS-Objects<br>\n📌: JS::JS-Objects</li>\n</ul>\n\x3c!--ID: 1706844449149--\x3e\n<hr>\n<h3 id="instanceof-特殊示例"><code>instanceof</code> 特殊示例<a class="anchor" href="#instanceof-特殊示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Object </span><span style="color:#F97583">instanceof</span><span style="color:#B392F0"> Object</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">//true</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Function </span><span style="color:#F97583">instanceof</span><span style="color:#B392F0"> Function</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">//true</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Function </span><span style="color:#F97583">instanceof</span><span style="color:#B392F0"> Object</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">//true</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> () {} </span><span style="color:#F97583">instanceof</span><span style="color:#B392F0"> Function</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">//true</span></span>\n<span class="line"></span></code></pre>\n<h4 id="手写-instanceof-方法">手写 instanceof 方法<a class="anchor" href="#手写-instanceof-方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> instanceOf</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">obj</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">fn</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> proto </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> obj.</span><span style="color:#79B8FF">__proto__</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (proto) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (proto </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> fn</span><span style="color:#E1E4E8">.</span><span style="color:#79B8FF">prototype</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#B392F0"> instanceOf</span><span style="color:#E1E4E8">(proto, fn);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> Dog</span><span style="color:#E1E4E8">() {}</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> dog </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Dog</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">instanceOf</span><span style="color:#E1E4E8">(dog, Dog), </span><span style="color:#B392F0">instanceOf</span><span style="color:#E1E4E8">(dog, Object)); </span><span style="color:#6A737D">// true true</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,aliases:["Object Types (instanceof)-标识对象类型"],title:"Object Types (instanceof)-标识对象类型",topic:["Objects"],type:"D",tags:["JavaScript"],DateStarted:"2024-01-29T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-02-02T00:00:00.000Z",reviewed:2,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"Object Types (instanceof)-标识对象类型",category:"Programming",minutes:1,words:129},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/object/object-types-instanceof-标识对象类型.md",url=void 0;function rawContent(){return"\n# Object Types (instanceof)-标识对象类型\n\n---\n\nBasic\n\n### 判断对象是否某该构造函数的实例（标识对象类型）\n\nBack:\n\n- ❌`constructor` 属性\n- ✅`instanceof` - To identify what type of object it is (更常用) - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C04VariablesScopeMemory-6-x62-y394.png)  \n🏷️: JS-Objects  \n📌: JS::JS-Objects\n\x3c!--ID: 1706844449149--\x3e\n\n---\n\n### `instanceof` 特殊示例\n\n```javascript\nconsole.log(Object instanceof Object); //true\nconsole.log(Function instanceof Function); //true\nconsole.log(Function instanceof Object); //true\nconsole.log(function () {} instanceof Function); //true\n```\n\n#### 手写 instanceof 方法\n\n```javascript\nfunction instanceOf(obj, fn) {\n\tlet proto = obj.__proto__;\n\tif (proto) {\n\t\tif (proto === fn.prototype) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn instanceOf(proto, fn);\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n// 测试\nfunction Dog() {}\nlet dog = new Dog();\nconsole.log(instanceOf(dog, Dog), instanceOf(dog, Object)); // true true\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"object-types-instanceof-标识对象类型",text:"Object Types (instanceof)-标识对象类型#"},{depth:3,slug:"判断对象是否某该构造函数的实例标识对象类型",text:"判断对象是否某该构造函数的实例（标识对象类型）#"},{depth:3,slug:"instanceof-特殊示例",text:"instanceof 特殊示例#"},{depth:4,slug:"手写-instanceof-方法",text:"手写 instanceof 方法#"}]}const Content=createComponent(((n,s,o)=>{const{layout:a,...e}=frontmatter;return e.file=file,e.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};