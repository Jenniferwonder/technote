import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="typescript">TypeScript<a class="anchor" href="#typescript"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="what-is-ts">What is TS<a class="anchor" href="#what-is-ts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="handbook">Handbook<a class="anchor" href="#handbook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/intro.html">https://www.typescriptlang.org/docs/handbook/intro.html</a></li>\n</ul>\n<h3 id="statically-typed-vs-dynamically-typed">Statically-typed vs. Dynamically-typed<a class="anchor" href="#statically-typed-vs-dynamically-typed"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="problem">Problem<a class="anchor" href="#problem"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>The only way in pure JavaScript to tell what <code>fn</code> does with a particular value is to call it and see what happens. This kind of behavior makes it hard to predict what the code will do before it runs, which means it’s harder to know what your code is going to do while you’re writing it.</li>\n</ul>\n<h3 id="js-with-type-checking">JS with type checking<a class="anchor" href="#js-with-type-checking"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Can catch bugs/error at compile time</li>\n<li>can build a type-system that accepts JavaScript code but has types</li>\n</ul>\n<h3 id="code-completion">Code completion<a class="anchor" href="#code-completion"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="refactoring">Refactoring<a class="anchor" href="#refactoring"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="shorthand-notations">Shorthand notations<a class="anchor" href="#shorthand-notations"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="features">Features<a class="anchor" href="#features"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Explicit types</li>\n<li>Erased types</li>\n<li>Downleveling</li>\n</ul>\n<h3 id="drawback">Drawback<a class="anchor" href="#drawback"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>compilation</li>\n<li>more code</li>\n</ul>\n<h2 id="set-up">Set up<a class="anchor" href="#set-up"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="npm-i--g-typescript"><code>npm i -g typescript</code><a class="anchor" href="#npm-i--g-typescript"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="tsc--v"><code>tsc -v</code><a class="anchor" href="#tsc--v"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to check TS compiler version</li>\n</ul>\n<h2 id="config">Config<a class="anchor" href="#config"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="tsconfigjson"><code>tsconfig.json</code><a class="anchor" href="#tsconfigjson"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript: Documentation - What is a tsconfig.json (typescriptlang.org)</a></li>\n<li><a href="https://www.typescriptlang.org/tsconfig">TypeScript: TSConfig Reference - Docs on every TSConfig option (typescriptlang.org)</a></li>\n</ul>\n<h3 id="strictness">Strictness<a class="anchor" href="#strictness"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>"strict": true</code></li>\n<li><code>"noImplicitAny":true</code>\n<ul>\n<li>to flag any implicit <code>any</code> as an error.</li>\n</ul>\n</li>\n<li><code>"strictNullChecks": true</code></li>\n</ul>\n<h3 id="tsc---init"><code>tsc --init</code><a class="anchor" href="#tsc---init"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>"target": "ES2016"</code>\n<ul>\n<li>By default TypeScript targets ES3, an extremely old version of ECMAScript.</li>\n</ul>\n</li>\n<li><code>"module":"commonjs"</code></li>\n<li><code>"rootDir":"./src"</code></li>\n<li><code>"outDir":"./dist"</code></li>\n<li><code>"removeComments":true</code></li>\n<li><code>"noEmitOnError":true</code>\n<ul>\n<li>Emitting with errors\n<ul>\n<li><code>tsc --noEmitOnError hello.ts</code>\n<ul>\n<li>If error is caught, no updates will be made to the emitted js file</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="debug-ts">Debug TS<a class="anchor" href="#debug-ts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>"sourceMap":true</code>\n<ul>\n<li>Produce <code>index.js.map</code>\n<ul>\n<li>for debugger to read</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>VS Code Debugger > create a <code>lauch.json</code> file\n<ul>\n<li>Add <code>"preLauchTask": "tsc: build - tsconfig.json"</code></li>\n</ul>\n</li>\n</ul>\n<h2 id="run-and-compile">Run and compile<a class="anchor" href="#run-and-compile"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="tsc"><code>tsc</code><a class="anchor" href="#tsc"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to compile all js files</li>\n</ul>\n<h2 id="types">Types<a class="anchor" href="#types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="built-in-types-primitives">Built-in Types (Primitives)<a class="anchor" href="#built-in-types-primitives"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>JS\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>object</li>\n</ul>\n</li>\n<li>TS\n<ul>\n<li>any</li>\n<li>unknown</li>\n<li>never</li>\n<li>enum</li>\n<li>tuple</li>\n</ul>\n</li>\n</ul>\n<h3 id="arrays">Arrays<a class="anchor" href="#arrays"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>let numbers: number[]/ Array&#x3C;number> = []</code></li>\n</ul>\n<h3 id="the-any-type">The <code>any</code> Type<a class="anchor" href="#the-any-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="type-annotations-on-variables">Type Annotations on Variables<a class="anchor" href="#type-annotations-on-variables"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Type annotations will always go <em>after</em> the thing being typed.</li>\n</ul>\n<h3 id="union-types">Union Types<a class="anchor" href="#union-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="type-aliases">Type Aliases<a class="anchor" href="#type-aliases"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="interface">Interface<a class="anchor" href="#interface"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="type-assertions">Type Assertions<a class="anchor" href="#type-assertions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;</code></li>\n<li><code>const myCanvas = &#x3C;HTMLCanvasElement>document.getElementById("main_canvas");</code></li>\n</ul>\n<h3 id="literal-types">Literal Types<a class="anchor" href="#literal-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="nullable-types">Nullable Types<a class="anchor" href="#nullable-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>strictNullChecks</code></li>\n</ul>\n<h3 id="enums">Enums<a class="anchor" href="#enums"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/enums.html">TypeScript: Handbook - Enums (typescriptlang.org)</a></li>\n<li>Numeric enums</li>\n<li>String enums</li>\n<li>Heterogeneous enums</li>\n<li>Computed and constant members</li>\n<li>Union enums and enum member types</li>\n<li>Enums at runtime</li>\n<li>Enums at compile time</li>\n</ul>\n<h3 id="less-common-primitives">Less Common Primitives<a class="anchor" href="#less-common-primitives"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>bigint</code></li>\n<li><code>symbol</code></li>\n</ul>\n<h2 id="functions">Functions<a class="anchor" href="#functions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="basics">Basics<a class="anchor" href="#basics"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>TypeScript allows you to specify the types of both the input and output values of functions.</li>\n<li>Parameter Type Annotations\n<ul>\n<li>go after the parameter name</li>\n</ul>\n</li>\n<li>Return type annotations\n<ul>\n<li>appear after the parameter list</li>\n</ul>\n</li>\n</ul>\n<h3 id="function-type-expressions-similar-to-arrow-function">Function Type Expressions (Similar to arrow function)<a class="anchor" href="#function-type-expressions-similar-to-arrow-function"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="call-signatures">❓Call Signatures<a class="anchor" href="#call-signatures"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="construct-signatures">❓Construct Signatures<a class="anchor" href="#construct-signatures"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="generic-functions">Generic Functions<a class="anchor" href="#generic-functions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> firstElement</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">Type</span><span style="color:#E1E4E8">>(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#B392F0"> Type</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#B392F0"> Type</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> undefined</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> arr[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n<h3 id="inference">Inference<a class="anchor" href="#inference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="constraints">Constraints<a class="anchor" href="#constraints"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="object-types">Object Types<a class="anchor" href="#object-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="narrowing">Narrowing<a class="anchor" href="#narrowing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="typeof-type-guards"><code>typeof</code> type guards<a class="anchor" href="#typeof-type-guards"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="truthiness-narrowing">Truthiness narrowing<a class="anchor" href="#truthiness-narrowing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="equality-narrowing">Equality narrowing<a class="anchor" href="#equality-narrowing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="the-in-operator-narrowing">The <code>in</code> operator narrowing<a class="anchor" href="#the-in-operator-narrowing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="instanceof-narrowing"><code>instanceof</code> narrowing<a class="anchor" href="#instanceof-narrowing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="assignments">Assignments<a class="anchor" href="#assignments"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="control-flow-analysis">Control flow analysis<a class="anchor" href="#control-flow-analysis"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="type-predicates">Type predicates<a class="anchor" href="#type-predicates"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> isFish</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">pet</span><span style="color:#F97583">:</span><span style="color:#B392F0"> Fish</span><span style="color:#F97583"> |</span><span style="color:#B392F0"> Bird</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#FFAB70"> pet</span><span style="color:#F97583"> is</span><span style="color:#B392F0"> Fish</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> (pet </span><span style="color:#F97583">as</span><span style="color:#B392F0"> Fish</span><span style="color:#E1E4E8">).swim </span><span style="color:#F97583">!==</span><span style="color:#79B8FF"> undefined</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p><code>parameterName is Type</code></p>\n</li>\n</ul>\n<h3 id="assertion-function">Assertion Function<a class="anchor" href="#assertion-function"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions</a></li>\n</ul>\n<h3 id="discriminated-unions">Discriminated unions<a class="anchor" href="#discriminated-unions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="never-type"><code>never</code> Type<a class="anchor" href="#never-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="type-manipuation">Type Manipuation<a class="anchor" href="#type-manipuation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="generics">Generics<a class="anchor" href="#generics"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="keyof-type-operator"><code>Keyof</code> Type Operator<a class="anchor" href="#keyof-type-operator"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="typeof-type-operator"><code>Typeof</code> Type Operator<a class="anchor" href="#typeof-type-operator"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="indexed-access-types">Indexed Access Types<a class="anchor" href="#indexed-access-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="conditional-types">Conditional Types<a class="anchor" href="#conditional-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="mapped-types">Mapped Types<a class="anchor" href="#mapped-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="template-literal-types">Template Literal Types<a class="anchor" href="#template-literal-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="classes">Classes<a class="anchor" href="#classes"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="modules">Modules<a class="anchor" href="#modules"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="tuples">Tuples<a class="anchor" href="#tuples"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="advanced-types">Advanced Types<a class="anchor" href="#advanced-types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="intersection-type">Intersection Type<a class="anchor" href="#intersection-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="optional-chaining">Optional Chaining<a class="anchor" href="#optional-chaining"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="questions">Questions<a class="anchor" href="#questions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="可以使用-typescript-写-react-应用吗怎么操作"><a href="https://github.com/haizlin/fe-interview/issues/899">可以使用 TypeScript 写 React 应用吗？怎么操作？</a><a class="anchor" href="#可以使用-typescript-写-react-应用吗怎么操作"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>',frontmatter={topic:null,type:null,category:"Front-End Tooling",Datereviewed:null,reviewed:null,difficulty:null,comment:null,aliases:["TypeScript"],title:"TypeScript",tags:["TypeScript"],DateStarted:"2022-11-29T00:00:00.000Z",DateModified:"2024-04-18T00:00:00.000Z",status:null,"linter-yaml-title-alias":"TypeScript",minutes:2,words:325},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/typescript/typescript.md",url=void 0;function rawContent(){return'\n# TypeScript\n\n## What is TS\n\n### Handbook\n\n- https://www.typescriptlang.org/docs/handbook/intro.html\n\n### Statically-typed vs. Dynamically-typed\n\n### Problem\n\n- The only way in pure JavaScript to tell what `fn` does with a particular value is to call it and see what happens. This kind of behavior makes it hard to predict what the code will do before it runs, which means it’s harder to know what your code is going to do while you’re writing it.\n\n### JS with type checking\n\n- Can catch bugs/error at compile time\n- can build a type-system that accepts JavaScript code but has types\n\n### Code completion\n\n### Refactoring\n\n### Shorthand notations\n\n### Features\n\n- Explicit types\n- Erased types\n- Downleveling\n\n### Drawback\n\n- compilation\n- more code\n\n## Set up\n\n### `npm i -g typescript`\n\n### `tsc -v`\n\n- to check TS compiler version\n\n## Config\n\n### `tsconfig.json`\n\n- [TypeScript: Documentation - What is a tsconfig.json (typescriptlang.org)](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html)\n- [TypeScript: TSConfig Reference - Docs on every TSConfig option (typescriptlang.org)](https://www.typescriptlang.org/tsconfig)\n\n### Strictness\n\n- `"strict": true`\n- `"noImplicitAny":true`\n  - to flag any implicit `any` as an error.\n- `"strictNullChecks": true`\n\n### `tsc --init`\n\n- `"target": "ES2016"`\n  - By default TypeScript targets ES3, an extremely old version of ECMAScript.\n- `"module":"commonjs"`\n- `"rootDir":"./src"`\n- `"outDir":"./dist"`\n- `"removeComments":true`\n- `"noEmitOnError":true`\n  - Emitting with errors\n    - `tsc --noEmitOnError hello.ts`\n      - If error is caught, no updates will be made to the emitted js file\n\n### Debug TS\n\n- `"sourceMap":true`\n  - Produce `index.js.map`\n    - for debugger to read\n- VS Code Debugger > create a `lauch.json` file\n  - Add `"preLauchTask": "tsc: build - tsconfig.json"`\n\n## Run and compile\n\n### `tsc`\n\n- to compile all js files\n\n## Types\n\n### Built-in Types (Primitives)\n\n- JS\n  - number\n  - string\n  - boolean\n  - null\n  - undefined\n  - object\n- TS\n  - any\n  - unknown\n  - never\n  - enum\n  - tuple\n\n### Arrays\n\n- `let numbers: number[]/ Array<number> = []`\n\n### The `any` Type\n\n### Type Annotations on Variables\n\n- Type annotations will always go *after* the thing being typed.\n\n### Union Types\n\n### Type Aliases\n\n### Interface\n\n### Type Assertions\n\n- `const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;`\n- `const myCanvas = <HTMLCanvasElement>document.getElementById("main_canvas");`\n\n### Literal Types\n\n### Nullable Types\n\n- `strictNullChecks`\n\n### Enums\n\n- [TypeScript: Handbook - Enums (typescriptlang.org)](https://www.typescriptlang.org/docs/handbook/enums.html)\n- Numeric enums\n- String enums\n- Heterogeneous enums\n- Computed and constant members\n- Union enums and enum member types\n- Enums at runtime\n- Enums at compile time\n\n### Less Common Primitives\n\n- `bigint`\n- `symbol`\n\n## Functions\n\n### Basics\n\n- TypeScript allows you to specify the types of both the input and output values of functions.\n- Parameter Type Annotations\n  - go after the parameter name\n- Return type annotations\n  - appear after the parameter list\n\n### Function Type Expressions (Similar to arrow function)\n\n### ❓Call Signatures\n\n### ❓Construct Signatures\n\n### Generic Functions\n\n- ```ts\n  function firstElement<Type>(arr: Type[]): Type | undefined {\n  \treturn arr[0];\n  }\n  ```\n\n### Inference\n\n### Constraints\n\n## Object Types\n\n## Narrowing\n\n### `typeof` type guards\n\n### Truthiness narrowing\n\n### Equality narrowing\n\n### The `in` operator narrowing\n\n### `instanceof` narrowing\n\n### Assignments\n\n### Control flow analysis\n\n### Type predicates\n\n- ```ts\n  function isFish(pet: Fish | Bird): pet is Fish {\n  \treturn (pet as Fish).swim !== undefined;\n  }\n  ```\n\n- `parameterName is Type`\n\n### Assertion Function\n\n- https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions\n\n### Discriminated unions\n\n### `never` Type\n\n## Type Manipuation\n\n### Generics\n\n### `Keyof` Type Operator\n\n### `Typeof` Type Operator\n\n### Indexed Access Types\n\n### Conditional Types\n\n### Mapped Types\n\n### Template Literal Types\n\n## Classes\n\n## Modules\n\n## Tuples\n\n## Advanced Types\n\n## Intersection Type\n\n## Optional Chaining\n\n## Questions\n\n### [可以使用 TypeScript 写 React 应用吗？怎么操作？](https://github.com/haizlin/fe-interview/issues/899)\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"typescript",text:"TypeScript#"},{depth:2,slug:"what-is-ts",text:"What is TS#"},{depth:3,slug:"handbook",text:"Handbook#"},{depth:3,slug:"statically-typed-vs-dynamically-typed",text:"Statically-typed vs. Dynamically-typed#"},{depth:3,slug:"problem",text:"Problem#"},{depth:3,slug:"js-with-type-checking",text:"JS with type checking#"},{depth:3,slug:"code-completion",text:"Code completion#"},{depth:3,slug:"refactoring",text:"Refactoring#"},{depth:3,slug:"shorthand-notations",text:"Shorthand notations#"},{depth:3,slug:"features",text:"Features#"},{depth:3,slug:"drawback",text:"Drawback#"},{depth:2,slug:"set-up",text:"Set up#"},{depth:3,slug:"npm-i--g-typescript",text:"npm i -g typescript#"},{depth:3,slug:"tsc--v",text:"tsc -v#"},{depth:2,slug:"config",text:"Config#"},{depth:3,slug:"tsconfigjson",text:"tsconfig.json#"},{depth:3,slug:"strictness",text:"Strictness#"},{depth:3,slug:"tsc---init",text:"tsc --init#"},{depth:3,slug:"debug-ts",text:"Debug TS#"},{depth:2,slug:"run-and-compile",text:"Run and compile#"},{depth:3,slug:"tsc",text:"tsc#"},{depth:2,slug:"types",text:"Types#"},{depth:3,slug:"built-in-types-primitives",text:"Built-in Types (Primitives)#"},{depth:3,slug:"arrays",text:"Arrays#"},{depth:3,slug:"the-any-type",text:"The any Type#"},{depth:3,slug:"type-annotations-on-variables",text:"Type Annotations on Variables#"},{depth:3,slug:"union-types",text:"Union Types#"},{depth:3,slug:"type-aliases",text:"Type Aliases#"},{depth:3,slug:"interface",text:"Interface#"},{depth:3,slug:"type-assertions",text:"Type Assertions#"},{depth:3,slug:"literal-types",text:"Literal Types#"},{depth:3,slug:"nullable-types",text:"Nullable Types#"},{depth:3,slug:"enums",text:"Enums#"},{depth:3,slug:"less-common-primitives",text:"Less Common Primitives#"},{depth:2,slug:"functions",text:"Functions#"},{depth:3,slug:"basics",text:"Basics#"},{depth:3,slug:"function-type-expressions-similar-to-arrow-function",text:"Function Type Expressions (Similar to arrow function)#"},{depth:3,slug:"call-signatures",text:"❓Call Signatures#"},{depth:3,slug:"construct-signatures",text:"❓Construct Signatures#"},{depth:3,slug:"generic-functions",text:"Generic Functions#"},{depth:3,slug:"inference",text:"Inference#"},{depth:3,slug:"constraints",text:"Constraints#"},{depth:2,slug:"object-types",text:"Object Types#"},{depth:2,slug:"narrowing",text:"Narrowing#"},{depth:3,slug:"typeof-type-guards",text:"typeof type guards#"},{depth:3,slug:"truthiness-narrowing",text:"Truthiness narrowing#"},{depth:3,slug:"equality-narrowing",text:"Equality narrowing#"},{depth:3,slug:"the-in-operator-narrowing",text:"The in operator narrowing#"},{depth:3,slug:"instanceof-narrowing",text:"instanceof narrowing#"},{depth:3,slug:"assignments",text:"Assignments#"},{depth:3,slug:"control-flow-analysis",text:"Control flow analysis#"},{depth:3,slug:"type-predicates",text:"Type predicates#"},{depth:3,slug:"assertion-function",text:"Assertion Function#"},{depth:3,slug:"discriminated-unions",text:"Discriminated unions#"},{depth:3,slug:"never-type",text:"never Type#"},{depth:2,slug:"type-manipuation",text:"Type Manipuation#"},{depth:3,slug:"generics",text:"Generics#"},{depth:3,slug:"keyof-type-operator",text:"Keyof Type Operator#"},{depth:3,slug:"typeof-type-operator",text:"Typeof Type Operator#"},{depth:3,slug:"indexed-access-types",text:"Indexed Access Types#"},{depth:3,slug:"conditional-types",text:"Conditional Types#"},{depth:3,slug:"mapped-types",text:"Mapped Types#"},{depth:3,slug:"template-literal-types",text:"Template Literal Types#"},{depth:2,slug:"classes",text:"Classes#"},{depth:2,slug:"modules",text:"Modules#"},{depth:2,slug:"tuples",text:"Tuples#"},{depth:2,slug:"advanced-types",text:"Advanced Types#"},{depth:2,slug:"intersection-type",text:"Intersection Type#"},{depth:2,slug:"optional-chaining",text:"Optional Chaining#"},{depth:2,slug:"questions",text:"Questions#"},{depth:3,slug:"可以使用-typescript-写-react-应用吗怎么操作",text:"可以使用 TypeScript 写 React 应用吗？怎么操作？#"}]}const Content=createComponent(((n,e,a)=>{const{layout:s,...t}=frontmatter;return t.file=file,t.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};