import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h3 id="深度优先遍历和广度优先遍历的区别是什么">深度优先遍历和广度优先遍历的区别是什么？<a class="anchor" href="#深度优先遍历和广度优先遍历的区别是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>深度优先遍历（Depth-First Search, DFS）和广度优先遍历（Breadth-First Search, BFS）都是用于遍历或搜索树或图的算法。这两种方法各有其优缺点：</p>\n<h3 id="深度优先遍历-dfs">深度优先遍历 (DFS)：<a class="anchor" href="#深度优先遍历-dfs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="优点">优点：<a class="anchor" href="#优点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ol>\n<li><strong>空间效率</strong>：在树的深度远小于广度时，DFS 通常更加空间效率。因为它只需要存储一个路径的信息，而不是存储整个层的信息。</li>\n<li><strong>寻找深度解</strong>：当问题需要找到深度解（例如求解迷宫的一条路径）时，DFS 是一个很好的选择。</li>\n<li><strong>实现相对简单</strong>：使用递归或堆栈，DFS 相对容易实现。</li>\n<li><strong>可以找到连通分量</strong>：对于图的分析，DFS 可以被用来识别图的连通分量。</li>\n</ol>\n<h4 id="缺点">缺点：<a class="anchor" href="#缺点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ol>\n<li><strong>可能不完整</strong>：在无限或非常大的搜索空间中，DFS 可能永远不会结束，或者可能会错过更优解。</li>\n<li><strong>可能找到非最优解</strong>：不同于 BFS，DFS 可能找到一个解，但并不是最优解。</li>\n<li><strong>使用递归可能导致栈溢出</strong>：如果搜索树非常深，递归实现可能会导致栈溢出。</li>\n</ol>\n<h3 id="广度优先遍历-bfs">广度优先遍历 (BFS)：<a class="anchor" href="#广度优先遍历-bfs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="优点-1">优点：<a class="anchor" href="#优点-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ol>\n<li><strong>找到最优解</strong>：如果存在多个解，BFS 会找到最少步骤的解，因为它首先检查所有的近邻节点。</li>\n<li><strong>完整性</strong>：即使在无限或非常大的搜索空间中，BFS 也可以保证找到解（如果存在）。</li>\n<li><strong>适用于广度大于深度的情况</strong>：如果树或图的广度远小于深度，BFS 可能更加高效。</li>\n</ol>\n<h4 id="缺点-1">缺点：<a class="anchor" href="#缺点-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ol>\n<li><strong>空间消耗</strong>：因为 BFS 需要存储所有扩展节点的信息，所以空间消耗可能非常大，特别是当广度远大于深度时。</li>\n<li><strong>可能较慢找到深度解</strong>：如果解在较深的层，BFS 可能需要更多时间来找到它，因为它需要逐层搜索。</li>\n</ol>\n<h3 id="总结">总结<a class="anchor" href="#总结"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>选择 DFS 还是 BFS 主要取决于问题的具体要求和搜索空间的结构。如果你需要找到最优解并且广度相对较小，BFS 可能是更好的选择。如果你只需要找到一个解，或者如果深度相对较小，DFS 可能更加适合。在实际应用中，深度优先搜索和广度优先搜索的选择可能还取决于其他许多因素，如问题的特殊性质和可用资源。</p>\n<h3 id="排序">排序<a class="anchor" href="#排序"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="快速排序quick-sort">快速排序（Quick Sort）<a class="anchor" href="#快速排序quick-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> quickSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">low</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">high</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (low </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> high) {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 获取分区索引</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> partitionIndex</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> partition</span><span style="color:#E1E4E8">(arr, low, high);</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 递归调用</span></span>\n<span class="line"><span style="color:#B392F0">\t\tquickSort</span><span style="color:#E1E4E8">(arr, low, partitionIndex </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\t\tquickSort</span><span style="color:#E1E4E8">(arr, partitionIndex </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">, high);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> partition</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">low</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">high</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t// 选择基准值</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> pivot</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr[high];</span></span>\n<span class="line"><span style="color:#6A737D">\t// 初始化分区索引</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> low </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将小于等于基准值的元素放到基准值的左侧</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> low; j </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> high; j</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[j] </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> pivot) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\ti</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t[arr[i], arr[j]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[j], arr[i]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 交换基准值和分区索引+1位置的元素</span></span>\n<span class="line"><span style="color:#E1E4E8">\t[arr[i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">], arr[high]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[high], arr[i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]];</span></span>\n<span class="line"><span style="color:#6A737D">\t// 返回分区索引+1作为新的基准值索引</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">quickSort</span><span style="color:#E1E4E8">(arr, </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">, arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="归并排序merge-sort">归并排序（Merge Sort）<a class="anchor" href="#归并排序merge-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> mergeSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> len</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (len </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> arr;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 分割数组</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> mid</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(len </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> left</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#B392F0">slice</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">, mid);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> right</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#B392F0">slice</span><span style="color:#E1E4E8">(mid);</span></span>\n<span class="line"><span style="color:#6A737D">\t// 递归调用并合并结果</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#B392F0"> merge</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">mergeSort</span><span style="color:#E1E4E8">(left), </span><span style="color:#B392F0">mergeSort</span><span style="color:#E1E4E8">(right));</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> merge</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">left</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">right</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> result</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [];</span></span>\n<span class="line"><span style="color:#6A737D">\t// 合并两个已排序的数组</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> &#x26;&#x26;</span><span style="color:#E1E4E8"> right.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (left[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> right[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tresult.</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(left.</span><span style="color:#B392F0">shift</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tresult.</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(right.</span><span style="color:#B392F0">shift</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将剩余的元素添加到结果数组</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> result.</span><span style="color:#B392F0">concat</span><span style="color:#E1E4E8">(left, right);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">mergeSort</span><span style="color:#E1E4E8">(arr)); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="堆排序heap-sort">堆排序（Heap Sort）<a class="anchor" href="#堆排序heap-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> heapSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">\t// 构建大顶堆</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(n </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">>=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\theapify</span><span style="color:#E1E4E8">(arr, n, i);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 逐个提取元素并调整堆结构</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t[arr[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">], arr[i]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[i], arr[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tn</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">\t\theapify</span><span style="color:#E1E4E8">(arr, n, </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> heapify</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">n</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">i</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> largest </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> i;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> left</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 2</span><span style="color:#F97583"> *</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> right</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 2</span><span style="color:#F97583"> *</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> arr[left] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> arr[largest]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tlargest </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> left;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (right </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> arr[right] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> arr[largest]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tlargest </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> right;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (largest </span><span style="color:#F97583">!==</span><span style="color:#E1E4E8"> i) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t[arr[i], arr[largest]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[largest], arr[i]];</span></span>\n<span class="line"><span style="color:#B392F0">\t\theapify</span><span style="color:#E1E4E8">(arr, n, largest);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">heapSort</span><span style="color:#E1E4E8">(arr);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="冒泡排序bubble-sort">冒泡排序（Bubble Sort）<a class="anchor" href="#冒泡排序bubble-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> bubbleSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> n</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> swapped;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tswapped </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; j </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; j</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (arr[j] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> arr[j </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t[arr[j], arr[j </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[j </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">], arr[j]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tswapped </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 如果没有发生交换，说明数组已经有序</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">swapped) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tbreak</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">bubbleSort</span><span style="color:#E1E4E8">(arr);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="选择排序selection-sort">选择排序（Selection Sort）<a class="anchor" href="#选择排序selection-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> selectionSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> n</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tlet</span><span style="color:#E1E4E8"> minIndex </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> i;</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 寻找最小元素的索引</span></span>\n<span class="line"><span style="color:#F97583">\t\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; j </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n; j</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (arr[j] </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr[minIndex]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tminIndex </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> j;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 交换最小元素与当前元素</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (minIndex </span><span style="color:#F97583">!==</span><span style="color:#E1E4E8"> i) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t[arr[i], arr[minIndex]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[minIndex], arr[i]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr1</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">selectionSort</span><span style="color:#E1E4E8">(arr1);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr1); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="插入排序insertion-sort">插入排序（Insertion Sort）<a class="anchor" href="#插入排序insertion-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> insertionSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> n</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> key</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr[i];</span></span>\n<span class="line"><span style="color:#F97583">\t\tlet</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 将大于 key 的元素向后移动</span></span>\n<span class="line"><span style="color:#F97583">\t\twhile</span><span style="color:#E1E4E8"> (j </span><span style="color:#F97583">>=</span><span style="color:#79B8FF"> 0</span><span style="color:#F97583"> &#x26;&#x26;</span><span style="color:#E1E4E8"> arr[j] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> key) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tarr[j </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr[j];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tj</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// 插入 key 到正确位置</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tarr[j </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> key;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr2</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">insertionSort</span><span style="color:#E1E4E8">(arr2);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr2); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="希尔排序shell-sort">希尔排序（Shell Sort）<a class="anchor" href="#希尔排序shell-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> shellSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> n</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> gap </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(n </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">); gap </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; gap </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(gap </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">)) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> gap; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tconst</span><span style="color:#79B8FF"> temp</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr[i];</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tlet</span><span style="color:#E1E4E8"> j;</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tfor</span><span style="color:#E1E4E8"> (j </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> i; j </span><span style="color:#F97583">>=</span><span style="color:#E1E4E8"> gap </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> arr[j </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> gap] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> temp; j </span><span style="color:#F97583">-=</span><span style="color:#E1E4E8"> gap) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tarr[j] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr[j </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> gap];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tarr[j] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> temp;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr3</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">shellSort</span><span style="color:#E1E4E8">(arr3);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr3); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="计数排序counting-sort">计数排序（Counting Sort）<a class="anchor" href="#计数排序counting-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> countingSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> min</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">min</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> max</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> range</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> max </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> count</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(range).</span><span style="color:#B392F0">fill</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> output</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">\t// 统计元素出现次数</span></span>\n<span class="line"><span style="color:#E1E4E8">\tarr.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[value </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min]</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#6A737D">\t// 累加计数</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> range; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[i] </span><span style="color:#F97583">+=</span><span style="color:#E1E4E8"> count[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 生成结果数组</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">>=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\toutput[count[arr[i] </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min] </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr[i];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[arr[i] </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min]</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> output;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr4</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">countingSort</span><span style="color:#E1E4E8">(arr4)); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="基数排序radix-sort">基数排序（Radix Sort）<a class="anchor" href="#基数排序radix-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> radixSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> max</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> exp </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(max </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> exp) </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tcountingSortForRadix</span><span style="color:#E1E4E8">(arr, exp);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\texp </span><span style="color:#F97583">*=</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> countingSortForRadix</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">exp</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> n</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> output</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(n).</span><span style="color:#B392F0">fill</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> count</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">fill</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">\t// 统计个位数字出现的次数</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(arr[i] </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> exp) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">]</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 累加计数</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[i] </span><span style="color:#F97583">+=</span><span style="color:#E1E4E8"> count[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 生成结果数组</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> n </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">>=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\toutput[count[Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(arr[i] </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> exp) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr[i];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcount[Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(arr[i] </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> exp) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 10</span><span style="color:#E1E4E8">]</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将结果复制回原数组</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> n; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tarr[i] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> output[i];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr5</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">radixSort</span><span style="color:#E1E4E8">(arr5);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr5); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="桶排序bucket-sort">桶排序（Bucket Sort）<a class="anchor" href="#桶排序bucket-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> bucketSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">bucketSize</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> min</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">min</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> max</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> bucketCount</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">((max </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min) </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> bucketSize) </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> buckets</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[][] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(bucketCount).</span><span style="color:#B392F0">fill</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> []);</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将元素分配到桶中</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> index</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">((arr[i] </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min) </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> bucketSize);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tbuckets[index].</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(arr[i]);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 对每个桶进行排序</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> buckets.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tbuckets[i].</span><span style="color:#B392F0">sort</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">a</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">b</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> a </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> b);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将桶中的元素合并到结果数组</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> ([] </span><span style="color:#F97583">as</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[]).</span><span style="color:#B392F0">concat</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">buckets);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr6</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">bucketSort</span><span style="color:#E1E4E8">(arr6)); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="二叉树排序binary-tree-sort">二叉树排序（Binary Tree Sort）<a class="anchor" href="#二叉树排序binary-tree-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>二叉树排序是指利用二叉搜索树（Binary Search Tree，BST）的特性进行排序的算法。二叉搜索树是一种特殊的二叉树，对于树中的每个节点，其左子树中的所有节点值均小于该节点值，其右子树中的所有节点值均大于该节点值。通过中序遍历二叉搜索树，可以得到一个有序的序列。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// 定义一个二叉搜索树节点类</span></span>\n<span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\tvalue</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#FFAB70">\tleft</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#FFAB70">\tright</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.value </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> value;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.right </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 定义一个二叉搜索树类，包含插入和中序遍历方法</span></span>\n<span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> BinarySearchTree</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\troot</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tinsert</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (node.left </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.left </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.left, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (node.right </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.right </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.right, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tinOrderTraversal</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> result</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [];</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_inOrderTraversalNode</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root, result);</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _inOrderTraversalNode</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">result</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (node </span><span style="color:#F97583">!==</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_inOrderTraversalNode</span><span style="color:#E1E4E8">(node.left, result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tresult.</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(node.value);</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_inOrderTraversalNode</span><span style="color:#E1E4E8">(node.right, result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> binaryTreeSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> bst</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> BinarySearchTree</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将数组中的值插入二叉搜索树</span></span>\n<span class="line"><span style="color:#E1E4E8">\tarr.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tbst.</span><span style="color:#B392F0">insert</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#6A737D">\t// 中序遍历二叉搜索树，得到排序后的数组</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> bst.</span><span style="color:#B392F0">inOrderTraversal</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr8</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">binaryTreeSort</span><span style="color:#E1E4E8">(arr8)); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<p>注意，二叉搜索树在极端情况下可能导致不平衡，这会影响排序性能。为了解决这个问题，可以使用平衡二叉搜索树（如 AVL 树或红黑树）进行排序。</p>\n<h4 id="鸽巢排序pigeonhole-sort">鸽巢排序（Pigeonhole Sort）<a class="anchor" href="#鸽巢排序pigeonhole-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> pigeonholeSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[] {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> min</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">min</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> max</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">arr);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> range</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> max </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> pigeonholes</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[][] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(range).</span><span style="color:#B392F0">fill</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> []);</span></span>\n<span class="line"><span style="color:#6A737D">\t// 将元素放入对应的鸽巢</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#79B8FF"> value</span><span style="color:#F97583"> of</span><span style="color:#E1E4E8"> arr) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tpigeonholes[value </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> min].</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#6A737D">\t// 从鸽巢中取出元素，拼接成排序后的数组</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> ([] </span><span style="color:#F97583">as</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[]).</span><span style="color:#B392F0">concat</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">pigeonholes);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr7</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">pigeonholeSort</span><span style="color:#E1E4E8">(arr7)); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="侏儒排序gnome-sort">侏儒排序（Gnome Sort）<a class="anchor" href="#侏儒排序gnome-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> gnomeSort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> arr[i]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\ti </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> j;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tj</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t[arr[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">], arr[i]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[i], arr[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\ti </span><span style="color:#F97583">-=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\ti </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> j;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tj</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr9</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">gnomeSort</span><span style="color:#E1E4E8">(arr9);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr9); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h4 id="猴子排序bogo-sort">猴子排序（Bogo Sort）<a class="anchor" href="#猴子排序bogo-sort"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> isSorted</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> boolean</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> arr[i]) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> shuffle</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> j</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(Math.</span><span style="color:#B392F0">random</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">*</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t[arr[i], arr[j]] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [arr[j], arr[i]];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> bogosort</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[])</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">!</span><span style="color:#B392F0">isSorted</span><span style="color:#E1E4E8">(arr)) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tshuffle</span><span style="color:#E1E4E8">(arr);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr11</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#B392F0">bogosort</span><span style="color:#E1E4E8">(arr11);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(arr11); </span><span style="color:#6A737D">// 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]</span></span>\n<span class="line"></span></code></pre>\n<h3 id="查找">查找<a class="anchor" href="#查找"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="二分查找binary-search">二分查找（Binary Search）<a class="anchor" href="#二分查找binary-search"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> binarySearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">target</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> right) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> mid</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">((left </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> right) </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[mid] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> mid;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[mid] </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mid </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tright </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mid </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> sortedArr</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">binarySearch</span><span style="color:#E1E4E8">(sortedArr, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：6</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">binarySearch</span><span style="color:#E1E4E8">(sortedArr, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：-1</span></span>\n<span class="line"></span></code></pre>\n<h4 id="插值查找interpolation-search">插值查找（Interpolation Search）<a class="anchor" href="#插值查找interpolation-search"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> interpolationSearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">target</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> right </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> target </span><span style="color:#F97583">>=</span><span style="color:#E1E4E8"> arr[left] </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> target </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> arr[right]) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> right) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> arr[left] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target </span><span style="color:#F97583">?</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">:</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> position</span><span style="color:#F97583"> =</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft </span><span style="color:#F97583">+</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tMath.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t((target </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> arr[left]) </span><span style="color:#F97583">*</span><span style="color:#E1E4E8"> (right </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> left)) </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> (arr[right] </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> arr[left])</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[position] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> position;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[position] </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> position </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tright </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> position </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> sortedArr3</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">interpolationSearch</span><span style="color:#E1E4E8">(sortedArr3, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：6</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">interpolationSearch</span><span style="color:#E1E4E8">(sortedArr3, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：-1</span></span>\n<span class="line"></span></code></pre>\n<h4 id="斐波那契查找fibonacci-search">斐波那契查找（Fibonacci Search）<a class="anchor" href="#斐波那契查找fibonacci-search"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> fibonacciSearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">target</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> fib</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tfib.</span><span style="color:#B392F0">push</span><span style="color:#E1E4E8">(fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">]);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> offset </span><span style="color:#F97583">=</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> index</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">min</span><span style="color:#E1E4E8">(offset </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">], arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (target </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> arr[index]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tfib.</span><span style="color:#B392F0">pop</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\toffset </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> index;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8"> (target </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr[index]) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tfib.</span><span style="color:#B392F0">pop</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tfib.</span><span style="color:#B392F0">pop</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> index;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (fib[fib.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> arr[offset </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> offset </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> sortedArr4</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">fibonacciSearch</span><span style="color:#E1E4E8">(sortedArr4, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：6</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">fibonacciSearch</span><span style="color:#E1E4E8">(sortedArr4, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：-1</span></span>\n<span class="line"></span></code></pre>\n<h4 id="指数查找exponential-search">指数查找（Exponential Search）<a class="anchor" href="#指数查找exponential-search"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> exponentialSearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">target</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> (arr[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> &#x26;&#x26;</span><span style="color:#E1E4E8"> arr[i] </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ti </span><span style="color:#F97583">*=</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#B392F0"> binarySearch</span><span style="color:#E1E4E8">(arr.</span><span style="color:#B392F0">slice</span><span style="color:#E1E4E8">(i </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">, Math.</span><span style="color:#B392F0">min</span><span style="color:#E1E4E8">(i, arr.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">)), target);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> binarySearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">arr</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">[], </span><span style="color:#FFAB70">target</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> arr.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> -</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\twhile</span><span style="color:#E1E4E8"> (left </span><span style="color:#F97583">&#x3C;=</span><span style="color:#E1E4E8"> right) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> mid</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">floor</span><span style="color:#E1E4E8">((left </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> right) </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[mid] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> mid;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (arr[mid] </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> target) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tleft </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mid </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tright </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> mid </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> sortedArr5</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">exponentialSearch</span><span style="color:#E1E4E8">(sortedArr5, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：6</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">exponentialSearch</span><span style="color:#E1E4E8">(sortedArr5, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：-1</span></span>\n<span class="line"></span></code></pre>\n<h4 id="哈希查找hashing">哈希查找（Hashing）<a class="anchor" href="#哈希查找hashing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> HashTable</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\tstorage</span><span style="color:#F97583">:</span><span style="color:#B392F0"> Map</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">number</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">number</span><span style="color:#E1E4E8">>;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.storage </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Map</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">number</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">number</span><span style="color:#E1E4E8">>();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tinsert</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">key</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.storage.</span><span style="color:#B392F0">set</span><span style="color:#E1E4E8">(key, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tsearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">key</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.storage.</span><span style="color:#B392F0">has</span><span style="color:#E1E4E8">(key) </span><span style="color:#F97583">?</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.storage.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(key) </span><span style="color:#F97583">:</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> hashTable</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> HashTable</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr6</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#6A737D">// 将数组中的值作为键，索引作为值存储到哈希表中</span></span>\n<span class="line"><span style="color:#E1E4E8">arr6.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">index</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\thashTable.</span><span style="color:#B392F0">insert</span><span style="color:#E1E4E8">(value, index);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(hashTable.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：8</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(hashTable.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：null</span></span>\n<span class="line"></span></code></pre>\n<h4 id="二叉查找树binary-search-tree">二叉查找树（Binary Search Tree）<a class="anchor" href="#二叉查找树binary-search-tree"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\tvalue</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#FFAB70">\tleft</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#FFAB70">\tright</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.value </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> value;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.right </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> BinarySearchTree</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\troot</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tinsert</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (node.left </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.left </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.left, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (node.right </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.right </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tthis</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.right, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tsearch</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> boolean</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_searchNode</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _searchNode</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> boolean</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (node </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_searchNode</span><span style="color:#E1E4E8">(node.left, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_searchNode</span><span style="color:#E1E4E8">(node.right, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> bst</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> BinarySearchTree</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr7</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#6A737D">// 向二叉查找树中插入数组中的值</span></span>\n<span class="line"><span style="color:#E1E4E8">arr7.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tbst.</span><span style="color:#B392F0">insert</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(bst.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：true</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(bst.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：false</span></span>\n<span class="line"></span></code></pre>\n<h4 id="平衡二叉查找树balanced-binary-search-tree如-avl-树红黑树">平衡二叉查找树（Balanced Binary Search Tree），如 AVL 树、红黑树<a class="anchor" href="#平衡二叉查找树balanced-binary-search-tree如-avl-树红黑树"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#F97583"> extends</span><span style="color:#B392F0"> TreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#FFAB70">\theight</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tconstructor</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tsuper</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.height </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> AVLTree</span><span style="color:#F97583"> extends</span><span style="color:#B392F0"> BinarySearchTree</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tinsert</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> void</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\tthis</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.root </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _insertNode</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (node </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tnode.left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.left </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> node.value) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tnode.right </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_insertNode</span><span style="color:#E1E4E8">(node.right </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">, value);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> node;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tnode.height </span><span style="color:#F97583">=</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(node.left), </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(node.right));</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> balance</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_getBalance</span><span style="color:#E1E4E8">(node);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (balance </span><span style="color:#F97583">></span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> (node.left </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">).value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateRight</span><span style="color:#E1E4E8">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateLeft</span><span style="color:#E1E4E8">(node.left </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateRight</span><span style="color:#E1E4E8">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (balance </span><span style="color:#F97583">&#x3C;</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\tif</span><span style="color:#E1E4E8"> (value </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> (node.right </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">).value) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateLeft</span><span style="color:#E1E4E8">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tnode.right </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateRight</span><span style="color:#E1E4E8">(node.right </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\t\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_rotateLeft</span><span style="color:#E1E4E8">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> node;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _height</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> TreeNode</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (node </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> (node </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">).height;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _getBalance</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">node</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(node.left) </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(node.right);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _rotateLeft</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">z</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> y</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> z.right </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> T2</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> y.left;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ty.left </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> z;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tz.right </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> T2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tz.height </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(z.left), </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(z.right));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ty.height </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(y.left), </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(y.right));</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> y;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\tprivate</span><span style="color:#B392F0"> _rotateRight</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">y</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> x</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> y.left </span><span style="color:#F97583">as</span><span style="color:#B392F0"> AVLTreeNode</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> T2</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> x.right;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tx.right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> y;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ty.left </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> T2</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ty.height </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(y.left), </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(y.right));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tx.height </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> Math.</span><span style="color:#B392F0">max</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(x.left), </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">_height</span><span style="color:#E1E4E8">(x.right));</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> x;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> avl</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> AVLTree</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> arr8</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">9</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">7</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">11</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">12</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">14</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">6</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#6A737D">// 向平衡二叉查找树中插入数组中的值</span></span>\n<span class="line"><span style="color:#E1E4E8">arr8.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">value</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tavl.</span><span style="color:#B392F0">insert</span><span style="color:#E1E4E8">(value);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D">// 测试用例</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(avl.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：true</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(avl.</span><span style="color:#B392F0">search</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// 输出：false</span></span>\n<span class="line"></span></code></pre>',frontmatter={title:"algo-interview",topic:null,type:null,tags:["Algo"],category:"Programming",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,draft:!0,DateStarted:"2024-04-25T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",minutes:20,words:3981},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/algo-interview.md",url=void 0;function rawContent(){return"### 深度优先遍历和广度优先遍历的区别是什么？\n深度优先遍历（Depth-First Search, DFS）和广度优先遍历（Breadth-First Search, BFS）都是用于遍历或搜索树或图的算法。这两种方法各有其优缺点：\n### 深度优先遍历 (DFS)：\n#### 优点：\n1. **空间效率**：在树的深度远小于广度时，DFS 通常更加空间效率。因为它只需要存储一个路径的信息，而不是存储整个层的信息。\n2. **寻找深度解**：当问题需要找到深度解（例如求解迷宫的一条路径）时，DFS 是一个很好的选择。\n3. **实现相对简单**：使用递归或堆栈，DFS 相对容易实现。\n4. **可以找到连通分量**：对于图的分析，DFS 可以被用来识别图的连通分量。\n#### 缺点：\n1. **可能不完整**：在无限或非常大的搜索空间中，DFS 可能永远不会结束，或者可能会错过更优解。\n2. **可能找到非最优解**：不同于 BFS，DFS 可能找到一个解，但并不是最优解。\n3. **使用递归可能导致栈溢出**：如果搜索树非常深，递归实现可能会导致栈溢出。\n### 广度优先遍历 (BFS)：\n#### 优点：\n1. **找到最优解**：如果存在多个解，BFS 会找到最少步骤的解，因为它首先检查所有的近邻节点。\n2. **完整性**：即使在无限或非常大的搜索空间中，BFS 也可以保证找到解（如果存在）。\n3. **适用于广度大于深度的情况**：如果树或图的广度远小于深度，BFS 可能更加高效。\n#### 缺点：\n1. **空间消耗**：因为 BFS 需要存储所有扩展节点的信息，所以空间消耗可能非常大，特别是当广度远大于深度时。\n2. **可能较慢找到深度解**：如果解在较深的层，BFS 可能需要更多时间来找到它，因为它需要逐层搜索。\n### 总结\n选择 DFS 还是 BFS 主要取决于问题的具体要求和搜索空间的结构。如果你需要找到最优解并且广度相对较小，BFS 可能是更好的选择。如果你只需要找到一个解，或者如果深度相对较小，DFS 可能更加适合。在实际应用中，深度优先搜索和广度优先搜索的选择可能还取决于其他许多因素，如问题的特殊性质和可用资源。\n### 排序\n#### 快速排序（Quick Sort）\n\n```typescript\nfunction quickSort(arr: number[], low: number, high: number): void {\n\tif (low < high) {\n\t\t// 获取分区索引\n\t\tconst partitionIndex = partition(arr, low, high);\n\t\t// 递归调用\n\t\tquickSort(arr, low, partitionIndex - 1);\n\t\tquickSort(arr, partitionIndex + 1, high);\n\t}\n}\nfunction partition(arr: number[], low: number, high: number): number {\n\t// 选择基准值\n\tconst pivot = arr[high];\n\t// 初始化分区索引\n\tlet i = low - 1;\n\t// 将小于等于基准值的元素放到基准值的左侧\n\tfor (let j = low; j < high; j++) {\n\t\tif (arr[j] <= pivot) {\n\t\t\ti++;\n\t\t\t[arr[i], arr[j]] = [arr[j], arr[i]];\n\t\t}\n\t}\n\t// 交换基准值和分区索引+1位置的元素\n\t[arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n\t// 返回分区索引+1作为新的基准值索引\n\treturn i + 1;\n}\n// 测试用例\nconst arr = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nquickSort(arr, 0, arr.length - 1);\nconsole.log(arr); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 归并排序（Merge Sort）\n\n```typescript\nfunction mergeSort(arr: number[]): number[] {\n\tconst len = arr.length;\n\tif (len < 2) {\n\t\treturn arr;\n\t}\n\t// 分割数组\n\tconst mid = Math.floor(len / 2);\n\tconst left = arr.slice(0, mid);\n\tconst right = arr.slice(mid);\n\t// 递归调用并合并结果\n\treturn merge(mergeSort(left), mergeSort(right));\n}\nfunction merge(left: number[], right: number[]): number[] {\n\tconst result: number[] = [];\n\t// 合并两个已排序的数组\n\twhile (left.length && right.length) {\n\t\tif (left[0] <= right[0]) {\n\t\t\tresult.push(left.shift()!);\n\t\t} else {\n\t\t\tresult.push(right.shift()!);\n\t\t}\n\t}\n\t// 将剩余的元素添加到结果数组\n\treturn result.concat(left, right);\n}\n// 测试用例\nconst arr = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nconsole.log(mergeSort(arr)); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 堆排序（Heap Sort）\n\n```typescript\nfunction heapSort(arr: number[]): void {\n\tlet n = arr.length;\n\t// 构建大顶堆\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, n, i);\n\t}\n\t// 逐个提取元素并调整堆结构\n\tfor (let i = n - 1; i > 0; i--) {\n\t\t[arr[0], arr[i]] = [arr[i], arr[0]];\n\t\tn--;\n\t\theapify(arr, n, 0);\n\t}\n}\nfunction heapify(arr: number[], n: number, i: number): void {\n\tlet largest = i;\n\tconst left = 2 * i + 1;\n\tconst right = 2 * i + 2;\n\tif (left < n && arr[left] > arr[largest]) {\n\t\tlargest = left;\n\t}\n\tif (right < n && arr[right] > arr[largest]) {\n\t\tlargest = right;\n\t}\n\tif (largest !== i) {\n\t\t[arr[i], arr[largest]] = [arr[largest], arr[i]];\n\t\theapify(arr, n, largest);\n\t}\n}\n// 测试用例\nconst arr = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nheapSort(arr);\nconsole.log(arr); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 冒泡排序（Bubble Sort）\n\n```typescript\nfunction bubbleSort(arr: number[]): void {\n\tconst n = arr.length;\n\tlet swapped;\n\tfor (let i = 0; i < n - 1; i++) {\n\t\tswapped = false;\n\t\tfor (let j = 0; j < n - i - 1; j++) {\n\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\t\t\t\tswapped = true;\n\t\t\t}\n\t\t}\n\t\t// 如果没有发生交换，说明数组已经有序\n\t\tif (!swapped) {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n// 测试用例\nconst arr = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nbubbleSort(arr);\nconsole.log(arr); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 选择排序（Selection Sort）\n\n```typescript\nfunction selectionSort(arr: number[]): void {\n\tconst n = arr.length;\n\tfor (let i = 0; i < n - 1; i++) {\n\t\tlet minIndex = i;\n\t\t// 寻找最小元素的索引\n\t\tfor (let j = i + 1; j < n; j++) {\n\t\t\tif (arr[j] < arr[minIndex]) {\n\t\t\t\tminIndex = j;\n\t\t\t}\n\t\t}\n\t\t// 交换最小元素与当前元素\n\t\tif (minIndex !== i) {\n\t\t\t[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\t\t}\n\t}\n}\n// 测试用例\nconst arr1 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nselectionSort(arr1);\nconsole.log(arr1); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 插入排序（Insertion Sort）\n\n```typescript\nfunction insertionSort(arr: number[]): void {\n\tconst n = arr.length;\n\tfor (let i = 1; i < n; i++) {\n\t\tconst key = arr[i];\n\t\tlet j = i - 1;\n\t\t// 将大于 key 的元素向后移动\n\t\twhile (j >= 0 && arr[j] > key) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\t// 插入 key 到正确位置\n\t\tarr[j + 1] = key;\n\t}\n}\n// 测试用例\nconst arr2 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\ninsertionSort(arr2);\nconsole.log(arr2); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 希尔排序（Shell Sort）\n\n```typescript\nfunction shellSort(arr: number[]): void {\n\tconst n = arr.length;\n\tfor (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n\t\tfor (let i = gap; i < n; i++) {\n\t\t\tconst temp = arr[i];\n\t\t\tlet j;\n\t\t\tfor (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n\t\t\t\tarr[j] = arr[j - gap];\n\t\t\t}\n\t\t\tarr[j] = temp;\n\t\t}\n\t}\n}\n// 测试用例\nconst arr3 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nshellSort(arr3);\nconsole.log(arr3); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 计数排序（Counting Sort）\n\n```typescript\nfunction countingSort(arr: number[]): number[] {\n\tconst min = Math.min(...arr);\n\tconst max = Math.max(...arr);\n\tconst range = max - min + 1;\n\tconst count: number[] = new Array(range).fill(0);\n\tconst output: number[] = new Array(arr.length);\n\t// 统计元素出现次数\n\tarr.forEach((value) => {\n\t\tcount[value - min]++;\n\t});\n\t// 累加计数\n\tfor (let i = 1; i < range; i++) {\n\t\tcount[i] += count[i - 1];\n\t}\n\t// 生成结果数组\n\tfor (let i = arr.length - 1; i >= 0; i--) {\n\t\toutput[count[arr[i] - min] - 1] = arr[i];\n\t\tcount[arr[i] - min]--;\n\t}\n\treturn output;\n}\n// 测试用例\nconst arr4 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nconsole.log(countingSort(arr4)); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 基数排序（Radix Sort）\n\n```typescript\nfunction radixSort(arr: number[]): void {\n\tconst max = Math.max(...arr);\n\tlet exp = 1;\n\twhile (Math.floor(max / exp) > 0) {\n\t\tcountingSortForRadix(arr, exp);\n\t\texp *= 10;\n\t}\n}\nfunction countingSortForRadix(arr: number[], exp: number): void {\n\tconst n = arr.length;\n\tconst output: number[] = new Array(n).fill(0);\n\tconst count: number[] = new Array(10).fill(0);\n\t// 统计个位数字出现的次数\n\tfor (let i = 0; i < n; i++) {\n\t\tcount[Math.floor(arr[i] / exp) % 10]++;\n\t}\n\t// 累加计数\n\tfor (let i = 1; i < 10; i++) {\n\t\tcount[i] += count[i - 1];\n\t}\n\t// 生成结果数组\n\tfor (let i = n - 1; i >= 0; i--) {\n\t\toutput[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\n\t\tcount[Math.floor(arr[i] / exp) % 10]--;\n\t}\n\t// 将结果复制回原数组\n\tfor (let i = 0; i < n; i++) {\n\t\tarr[i] = output[i];\n\t}\n}\n// 测试用例\nconst arr5 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nradixSort(arr5);\nconsole.log(arr5); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 桶排序（Bucket Sort）\n\n```typescript\nfunction bucketSort(arr: number[], bucketSize = 5): number[] {\n\tconst min = Math.min(...arr);\n\tconst max = Math.max(...arr);\n\tconst bucketCount = Math.floor((max - min) / bucketSize) + 1;\n\tconst buckets: number[][] = new Array(bucketCount).fill(0).map(() => []);\n\t// 将元素分配到桶中\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst index = Math.floor((arr[i] - min) / bucketSize);\n\t\tbuckets[index].push(arr[i]);\n\t}\n\t// 对每个桶进行排序\n\tfor (let i = 0; i < buckets.length; i++) {\n\t\tbuckets[i].sort((a, b) => a - b);\n\t}\n\t// 将桶中的元素合并到结果数组\n\treturn ([] as number[]).concat(...buckets);\n}\n// 测试用例\nconst arr6 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nconsole.log(bucketSort(arr6)); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 二叉树排序（Binary Tree Sort）\n二叉树排序是指利用二叉搜索树（Binary Search Tree，BST）的特性进行排序的算法。二叉搜索树是一种特殊的二叉树，对于树中的每个节点，其左子树中的所有节点值均小于该节点值，其右子树中的所有节点值均大于该节点值。通过中序遍历二叉搜索树，可以得到一个有序的序列。\n\n```typescript\n// 定义一个二叉搜索树节点类\nclass TreeNode {\n\tvalue: number;\n\tleft: TreeNode | null;\n\tright: TreeNode | null;\n\tconstructor(value: number) {\n\t\tthis.value = value;\n\t\tthis.left = null;\n\t\tthis.right = null;\n\t}\n}\n// 定义一个二叉搜索树类，包含插入和中序遍历方法\nclass BinarySearchTree {\n\troot: TreeNode | null;\n\tconstructor() {\n\t\tthis.root = null;\n\t}\n\tinsert(value: number): void {\n\t\tif (this.root === null) {\n\t\t\tthis.root = new TreeNode(value);\n\t\t} else {\n\t\t\tthis._insertNode(this.root, value);\n\t\t}\n\t}\n\tprivate _insertNode(node: TreeNode, value: number): void {\n\t\tif (value < node.value) {\n\t\t\tif (node.left === null) {\n\t\t\t\tnode.left = new TreeNode(value);\n\t\t\t} else {\n\t\t\t\tthis._insertNode(node.left, value);\n\t\t\t}\n\t\t} else {\n\t\t\tif (node.right === null) {\n\t\t\t\tnode.right = new TreeNode(value);\n\t\t\t} else {\n\t\t\t\tthis._insertNode(node.right, value);\n\t\t\t}\n\t\t}\n\t}\n\tinOrderTraversal(): number[] {\n\t\tconst result: number[] = [];\n\t\tthis._inOrderTraversalNode(this.root, result);\n\t\treturn result;\n\t}\n\tprivate _inOrderTraversalNode(node: TreeNode | null, result: number[]): void {\n\t\tif (node !== null) {\n\t\t\tthis._inOrderTraversalNode(node.left, result);\n\t\t\tresult.push(node.value);\n\t\t\tthis._inOrderTraversalNode(node.right, result);\n\t\t}\n\t}\n}\nfunction binaryTreeSort(arr: number[]): number[] {\n\tconst bst = new BinarySearchTree();\n\t// 将数组中的值插入二叉搜索树\n\tarr.forEach((value) => {\n\t\tbst.insert(value);\n\t});\n\t// 中序遍历二叉搜索树，得到排序后的数组\n\treturn bst.inOrderTraversal();\n}\n// 测试用例\nconst arr8 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nconsole.log(binaryTreeSort(arr8)); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n注意，二叉搜索树在极端情况下可能导致不平衡，这会影响排序性能。为了解决这个问题，可以使用平衡二叉搜索树（如 AVL 树或红黑树）进行排序。\n#### 鸽巢排序（Pigeonhole Sort）\n\n```typescript\nfunction pigeonholeSort(arr: number[]): number[] {\n\tconst min = Math.min(...arr);\n\tconst max = Math.max(...arr);\n\tconst range = max - min + 1;\n\tconst pigeonholes: number[][] = new Array(range).fill(0).map(() => []);\n\t// 将元素放入对应的鸽巢\n\tfor (const value of arr) {\n\t\tpigeonholes[value - min].push(value);\n\t}\n\t// 从鸽巢中取出元素，拼接成排序后的数组\n\treturn ([] as number[]).concat(...pigeonholes);\n}\n// 测试用例\nconst arr7 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nconsole.log(pigeonholeSort(arr7)); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 侏儒排序（Gnome Sort）\n\n```typescript\nfunction gnomeSort(arr: number[]): void {\n\tlet i = 1;\n\tlet j = 2;\n\twhile (i < arr.length) {\n\t\tif (arr[i - 1] <= arr[i]) {\n\t\t\ti = j;\n\t\t\tj++;\n\t\t} else {\n\t\t\t[arr[i - 1], arr[i]] = [arr[i], arr[i - 1]];\n\t\t\ti -= 1;\n\t\t\tif (i === 0) {\n\t\t\t\ti = j;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n}\n// 测试用例\nconst arr9 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\ngnomeSort(arr9);\nconsole.log(arr9); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n#### 猴子排序（Bogo Sort）\n\n```typescript\nfunction isSorted(arr: number[]): boolean {\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i - 1] > arr[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nfunction shuffle(arr: number[]): void {\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[arr[i], arr[j]] = [arr[j], arr[i]];\n\t}\n}\nfunction bogosort(arr: number[]): void {\n\twhile (!isSorted(arr)) {\n\t\tshuffle(arr);\n\t}\n}\n// 测试用例\nconst arr11 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\nbogosort(arr11);\nconsole.log(arr11); // 输出：[2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n```\n\n### 查找\n#### 二分查找（Binary Search）\n\n```typescript\nfunction binarySearch(arr: number[], target: number): number {\n\tlet left = 0;\n\tlet right = arr.length - 1;\n\twhile (left <= right) {\n\t\tconst mid = Math.floor((left + right) / 2);\n\t\tif (arr[mid] === target) {\n\t\t\treturn mid;\n\t\t}\n\t\tif (arr[mid] < target) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\n// 测试用例\nconst sortedArr = [2, 3, 5, 6, 7, 9, 10, 11, 12, 14];\nconsole.log(binarySearch(sortedArr, 10)); // 输出：6\nconsole.log(binarySearch(sortedArr, 4)); // 输出：-1\n```\n\n#### 插值查找（Interpolation Search）\n\n```typescript\nfunction interpolationSearch(arr: number[], target: number): number {\n\tlet left = 0;\n\tlet right = arr.length - 1;\n\twhile (left <= right && target >= arr[left] && target <= arr[right]) {\n\t\tif (left === right) {\n\t\t\treturn arr[left] === target ? left : -1;\n\t\t}\n\t\tconst position =\n\t\t\tleft +\n\t\t\tMath.floor(\n\t\t\t\t((target - arr[left]) * (right - left)) / (arr[right] - arr[left])\n\t\t\t);\n\t\tif (arr[position] === target) {\n\t\t\treturn position;\n\t\t}\n\t\tif (arr[position] < target) {\n\t\t\tleft = position + 1;\n\t\t} else {\n\t\t\tright = position - 1;\n\t\t}\n\t}\n\treturn -1;\n}\n// 测试用例\nconst sortedArr3 = [2, 3, 5, 6, 7, 9, 10, 11, 12, 14];\nconsole.log(interpolationSearch(sortedArr3, 10)); // 输出：6\nconsole.log(interpolationSearch(sortedArr3, 4)); // 输出：-1\n```\n\n#### 斐波那契查找（Fibonacci Search）\n\n```typescript\nfunction fibonacciSearch(arr: number[], target: number): number {\n\tconst fib = [0, 1];\n\twhile (fib[fib.length - 1] < arr.length) {\n\t\tfib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n\t}\n\tlet offset = -1;\n\twhile (fib[fib.length - 1] > 1) {\n\t\tconst index = Math.min(offset + fib[fib.length - 2], arr.length - 1);\n\t\tif (target > arr[index]) {\n\t\t\tfib.pop();\n\t\t\toffset = index;\n\t\t} else if (target < arr[index]) {\n\t\t\tfib.pop();\n\t\t\tfib.pop();\n\t\t} else {\n\t\t\treturn index;\n\t\t}\n\t}\n\tif (fib[fib.length - 1] && arr[offset + 1] === target) {\n\t\treturn offset + 1;\n\t}\n\treturn -1;\n}\n// 测试用例\nconst sortedArr4 = [2, 3, 5, 6, 7, 9, 10, 11, 12, 14];\nconsole.log(fibonacciSearch(sortedArr4, 10)); // 输出：6\nconsole.log(fibonacciSearch(sortedArr4, 4)); // 输出：-1\n```\n\n#### 指数查找（Exponential Search）\n\n```typescript\nfunction exponentialSearch(arr: number[], target: number): number {\n\tif (arr[0] === target) {\n\t\treturn 0;\n\t}\n\tlet i = 1;\n\twhile (i < arr.length && arr[i] <= target) {\n\t\ti *= 2;\n\t}\n\treturn binarySearch(arr.slice(i / 2, Math.min(i, arr.length)), target);\n}\nfunction binarySearch(arr: number[], target: number): number {\n\tlet left = 0;\n\tlet right = arr.length - 1;\n\twhile (left <= right) {\n\t\tconst mid = Math.floor((left + right) / 2);\n\t\tif (arr[mid] === target) {\n\t\t\treturn mid;\n\t\t}\n\t\tif (arr[mid] < target) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\n// 测试用例\nconst sortedArr5 = [2, 3, 5, 6, 7, 9, 10, 11, 12, 14];\nconsole.log(exponentialSearch(sortedArr5, 10)); // 输出：6\nconsole.log(exponentialSearch(sortedArr5, 4)); // 输出：-1\n```\n\n#### 哈希查找（Hashing）\n\n```typescript\nclass HashTable {\n\tstorage: Map<number, number>;\n\tconstructor() {\n\t\tthis.storage = new Map<number, number>();\n\t}\n\tinsert(key: number, value: number): void {\n\t\tthis.storage.set(key, value);\n\t}\n\tsearch(key: number): number | null {\n\t\treturn this.storage.has(key) ? this.storage.get(key) : null;\n\t}\n}\nconst hashTable = new HashTable();\nconst arr6 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\n// 将数组中的值作为键，索引作为值存储到哈希表中\narr6.forEach((value, index) => {\n\thashTable.insert(value, index);\n});\n// 测试用例\nconsole.log(hashTable.search(10)); // 输出：8\nconsole.log(hashTable.search(4)); // 输出：null\n```\n\n#### 二叉查找树（Binary Search Tree）\n\n```typescript\nclass TreeNode {\n\tvalue: number;\n\tleft: TreeNode | null;\n\tright: TreeNode | null;\n\tconstructor(value: number) {\n\t\tthis.value = value;\n\t\tthis.left = null;\n\t\tthis.right = null;\n\t}\n}\nclass BinarySearchTree {\n\troot: TreeNode | null;\n\tconstructor() {\n\t\tthis.root = null;\n\t}\n\tinsert(value: number): void {\n\t\tif (this.root === null) {\n\t\t\tthis.root = new TreeNode(value);\n\t\t} else {\n\t\t\tthis._insertNode(this.root, value);\n\t\t}\n\t}\n\tprivate _insertNode(node: TreeNode, value: number): void {\n\t\tif (value < node.value) {\n\t\t\tif (node.left === null) {\n\t\t\t\tnode.left = new TreeNode(value);\n\t\t\t} else {\n\t\t\t\tthis._insertNode(node.left, value);\n\t\t\t}\n\t\t} else {\n\t\t\tif (node.right === null) {\n\t\t\t\tnode.right = new TreeNode(value);\n\t\t\t} else {\n\t\t\t\tthis._insertNode(node.right, value);\n\t\t\t}\n\t\t}\n\t}\n\tsearch(value: number): boolean {\n\t\treturn this._searchNode(this.root, value);\n\t}\n\tprivate _searchNode(node: TreeNode | null, value: number): boolean {\n\t\tif (node === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (value < node.value) {\n\t\t\treturn this._searchNode(node.left, value);\n\t\t} else if (value > node.value) {\n\t\t\treturn this._searchNode(node.right, value);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n}\nconst bst = new BinarySearchTree();\nconst arr7 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\n// 向二叉查找树中插入数组中的值\narr7.forEach((value) => {\n\tbst.insert(value);\n});\n// 测试用例\nconsole.log(bst.search(10)); // 输出：true\nconsole.log(bst.search(4)); // 输出：false\n```\n\n#### 平衡二叉查找树（Balanced Binary Search Tree），如 AVL 树、红黑树\n\n```typescript\nclass AVLTreeNode extends TreeNode {\n\theight: number;\n\tconstructor(value: number) {\n\t\tsuper(value);\n\t\tthis.height = 1;\n\t}\n}\nclass AVLTree extends BinarySearchTree {\n\tinsert(value: number): void {\n\t\tthis.root = this._insertNode(this.root as AVLTreeNode, value);\n\t}\n\tprivate _insertNode(node: AVLTreeNode | null, value: number): AVLTreeNode {\n\t\tif (node === null) {\n\t\t\treturn new AVLTreeNode(value);\n\t\t}\n\t\tif (value < node.value) {\n\t\t\tnode.left = this._insertNode(node.left as AVLTreeNode, value);\n\t\t} else if (value > node.value) {\n\t\t\tnode.right = this._insertNode(node.right as AVLTreeNode, value);\n\t\t} else {\n\t\t\treturn node;\n\t\t}\n\t\tnode.height =\n\t\t\t1 + Math.max(this._height(node.left), this._height(node.right));\n\t\tconst balance = this._getBalance(node);\n\t\tif (balance > 1) {\n\t\t\tif (value < (node.left as AVLTreeNode).value) {\n\t\t\t\treturn this._rotateRight(node);\n\t\t\t} else {\n\t\t\t\tnode.left = this._rotateLeft(node.left as AVLTreeNode);\n\t\t\t\treturn this._rotateRight(node);\n\t\t\t}\n\t\t}\n\t\tif (balance < -1) {\n\t\t\tif (value > (node.right as AVLTreeNode).value) {\n\t\t\t\treturn this._rotateLeft(node);\n\t\t\t} else {\n\t\t\t\tnode.right = this._rotateRight(node.right as AVLTreeNode);\n\t\t\t\treturn this._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\tprivate _height(node: TreeNode | null): number {\n\t\tif (node === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn (node as AVLTreeNode).height;\n\t}\n\tprivate _getBalance(node: AVLTreeNode): number {\n\t\treturn this._height(node.left) - this._height(node.right);\n\t}\n\tprivate _rotateLeft(z: AVLTreeNode): AVLTreeNode {\n\t\tconst y = z.right as AVLTreeNode;\n\t\tconst T2 = y.left;\n\t\ty.left = z;\n\t\tz.right = T2;\n\t\tz.height = 1 + Math.max(this._height(z.left), this._height(z.right));\n\t\ty.height = 1 + Math.max(this._height(y.left), this._height(y.right));\n\t\treturn y;\n\t}\n\tprivate _rotateRight(y: AVLTreeNode): AVLTreeNode {\n\t\tconst x = y.left as AVLTreeNode;\n\t\tconst T2 = x.right;\n\t\tx.right = y;\n\t\ty.left = T2;\n\t\ty.height = 1 + Math.max(this._height(y.left), this._height(y.right));\n\t\tx.height = 1 + Math.max(this._height(x.left), this._height(x.right));\n\t\treturn x;\n\t}\n}\nconst avl = new AVLTree();\nconst arr8 = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];\n// 向平衡二叉查找树中插入数组中的值\narr8.forEach((value) => {\n\tavl.insert(value);\n});\n// 测试用例\nconsole.log(avl.search(10)); // 输出：true\nconsole.log(avl.search(4)); // 输出：false\n```"}function compiledContent(){return html}function getHeadings(){return[{depth:3,slug:"深度优先遍历和广度优先遍历的区别是什么",text:"深度优先遍历和广度优先遍历的区别是什么？#"},{depth:3,slug:"深度优先遍历-dfs",text:"深度优先遍历 (DFS)：#"},{depth:4,slug:"优点",text:"优点：#"},{depth:4,slug:"缺点",text:"缺点：#"},{depth:3,slug:"广度优先遍历-bfs",text:"广度优先遍历 (BFS)：#"},{depth:4,slug:"优点-1",text:"优点：#"},{depth:4,slug:"缺点-1",text:"缺点：#"},{depth:3,slug:"总结",text:"总结#"},{depth:3,slug:"排序",text:"排序#"},{depth:4,slug:"快速排序quick-sort",text:"快速排序（Quick Sort）#"},{depth:4,slug:"归并排序merge-sort",text:"归并排序（Merge Sort）#"},{depth:4,slug:"堆排序heap-sort",text:"堆排序（Heap Sort）#"},{depth:4,slug:"冒泡排序bubble-sort",text:"冒泡排序（Bubble Sort）#"},{depth:4,slug:"选择排序selection-sort",text:"选择排序（Selection Sort）#"},{depth:4,slug:"插入排序insertion-sort",text:"插入排序（Insertion Sort）#"},{depth:4,slug:"希尔排序shell-sort",text:"希尔排序（Shell Sort）#"},{depth:4,slug:"计数排序counting-sort",text:"计数排序（Counting Sort）#"},{depth:4,slug:"基数排序radix-sort",text:"基数排序（Radix Sort）#"},{depth:4,slug:"桶排序bucket-sort",text:"桶排序（Bucket Sort）#"},{depth:4,slug:"二叉树排序binary-tree-sort",text:"二叉树排序（Binary Tree Sort）#"},{depth:4,slug:"鸽巢排序pigeonhole-sort",text:"鸽巢排序（Pigeonhole Sort）#"},{depth:4,slug:"侏儒排序gnome-sort",text:"侏儒排序（Gnome Sort）#"},{depth:4,slug:"猴子排序bogo-sort",text:"猴子排序（Bogo Sort）#"},{depth:3,slug:"查找",text:"查找#"},{depth:4,slug:"二分查找binary-search",text:"二分查找（Binary Search）#"},{depth:4,slug:"插值查找interpolation-search",text:"插值查找（Interpolation Search）#"},{depth:4,slug:"斐波那契查找fibonacci-search",text:"斐波那契查找（Fibonacci Search）#"},{depth:4,slug:"指数查找exponential-search",text:"指数查找（Exponential Search）#"},{depth:4,slug:"哈希查找hashing",text:"哈希查找（Hashing）#"},{depth:4,slug:"二叉查找树binary-search-tree",text:"二叉查找树（Binary Search Tree）#"},{depth:4,slug:"平衡二叉查找树balanced-binary-search-tree如-avl-树红黑树",text:"平衡二叉查找树（Balanced Binary Search Tree），如 AVL 树、红黑树#"}]}const Content=createComponent(((s,n,a)=>{const{layout:l,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};