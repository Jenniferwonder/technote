import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="promise-chaining-链式调用">Promise Chaining-链式调用<a class="anchor" href="#promise-chaining-链式调用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h3 id="promiseprototypethen"><code>Promise.prototype.then()</code><a class="anchor" href="#promiseprototypethen"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>接收两个回调函数作为参数，均为可选参数</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">onFulfilled</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{}, </span><span style="color:#B392F0">onReject</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{})</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseprototypecatch"><code>Promise.prototype.catch()</code><a class="anchor" href="#promiseprototypecatch"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="错误捕获条件">错误捕获条件<a class="anchor" href="#错误捕获条件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>❌ 在<code>then</code>或<code>catch</code>中 <code>return</code> 一个 <code>new Error</code> 对象不会被捕获：<br>\n<code>return new Error(Error!)</code><br>\n✅ 必须使用以下任一一种语法：</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">return</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">reject</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(error</span><span style="color:#F97583">!!!</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#F97583">throw</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(error</span><span style="color:#F97583">!!!</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="级联错误">级联错误<a class="anchor" href="#级联错误"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>如果在  <code>catch()</code>  内部引发错误，则可以附加第二个  <code>catch()</code>来处理，依此类推</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(错误);</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(错误);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseprototypefinally"><code>Promise.prototype.finally()</code><a class="anchor" href="#promiseprototypefinally"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的\n<ul>\n<li>避免了同样的语句需要在<code>then()</code>和<code>catch()</code>中各写一次的情况。</li>\n</ul>\n</li>\n</ul>\n<h3 id="example-consume-promise-">Example (Consume Promise )<a class="anchor" href="#example-consume-promise-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="example-promise-chain">Example (Promise chain)<a class="anchor" href="#example-promise-chain"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// import fetch from node-fetch;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//jsonplaceholder.typicode.com/todos/1);</span></span>\n<span class="line"><span style="color:#E1E4E8">promise</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">res</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> res.</span><span style="color:#B392F0">json</span><span style="color:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">todo</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(uh oh);</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> todo;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">todo</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(😛, todo.title)) </span><span style="color:#6A737D">// This line will be bypasses</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(😭, err));</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(🥪 Synchronous);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="example-ice-cream-shop">Example (Ice-cream Shop)<a class="anchor" href="#example-ice-cream-shop"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><a href="https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&#x26;vd_source=be278a4cfd00a5f72dcf153eaca79333">[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp</a></li>\n<li><a href="https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/">FreeCodeCamp-Blog</a></li>\n</ul>\n<h5 id="relationship-between-time-and-work">Relationship between time and work<a class="anchor" href="#relationship-between-time-and-work"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> is_shop_open </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#B392F0"> order</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">time</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">work</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (is_shop_open) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t\t\t// work is 👇 getting done here</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\tresolve</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">work</span><span style="color:#E1E4E8">());</span></span>\n<span class="line"><span style="color:#6A737D">\t\t\t\t// Setting 👇 time here for 1 work</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}, time);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\treject</span><span style="color:#E1E4E8">(console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Our shop is closed));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h5 id="promise-chaining">Promise chaining<a class="anchor" href="#promise-chaining"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// step 1</span></span>\n<span class="line"><span style="color:#B392F0">order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">Fruits</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} was selected`</span><span style="color:#E1E4E8">))</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 2</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(production has started)))</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 3</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Fruit has been chopped));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 4</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} and ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} added`</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 5</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(start the machine));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 6</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`ice cream placed on ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">holder</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 7</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">toppings</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} as toppings`</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// Step 8</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Serve Ice Cream));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>\n<h5 id="error-handling">Error handling<a class="anchor" href="#error-handling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> is_shop_open </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">// Add Error handling at the end of the Promise chain</span></span>\n<span class="line"><span style="color:#E1E4E8">.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">(()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#E1E4E8">  console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Customer left)</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D">// Output:</span></span>\n<span class="line"><span style="color:#6A737D">// Our shop is closed -- from reject</span></span>\n<span class="line"><span style="color:#6A737D">// Customer left -- from catch</span></span>\n<span class="line"></span></code></pre>\n<h5 id="thefinallyhandler">The <code>.finally</code> handler<a class="anchor" href="#thefinallyhandler"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<p>The <code>finally</code> handler which works regardless of whether our promise was resolved or rejected.</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// Whether we serve no customers or 100 customers, our shop will close at the end of the day. Optional - Add `finally` at the very bottom of the chain</span></span>\n<span class="line"><span style="color:#E1E4E8">.</span><span style="color:#B392F0">finally</span><span style="color:#E1E4E8">(()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#E1E4E8">  console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(end </span><span style="color:#F97583">of</span><span style="color:#E1E4E8"> day)</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"></span></code></pre>\n<h4 id="avoid-mistakes">Avoid Mistakes<a class="anchor" href="#avoid-mistakes"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">doSomething</span><span style="color:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">result</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// If using a full function expression: return the promise</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> doSomethingElse</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// If using arrow functions: omit the braces and implicitly return the result</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">newResult</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> doThirdThing</span><span style="color:#E1E4E8">(newResult))</span></span>\n<span class="line"><span style="color:#6A737D">\t// Even if the previous chained promise returns a result, the next one</span></span>\n<span class="line"><span style="color:#6A737D">\t// doesn\'t necessarily have to use it. You can pass a handler that doesn\'t</span></span>\n<span class="line"><span style="color:#6A737D">\t// consume any result.</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#6A737D">/* result ignored */</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> doFourthThing</span><span style="color:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#6A737D">\t// Always end the promise chain with a catch handler to avoid any</span></span>\n<span class="line"><span style="color:#6A737D">\t// unhandled rejections!</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">error</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(error));</span></span>\n<span class="line"></span></code></pre>',frontmatter={title:"Promise Chaining-链式调用",topic:null,type:"D",tags:["JavaScript"],category:"Programming",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["Promise Chaining-链式调用"],draft:!1,DateStarted:"2024-04-25T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z","linter-yaml-title-alias":"Promise Chaining-链式调用",minutes:3,words:566},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/data-fetching/promise-chaining-链式调用.md",url=void 0;function rawContent(){return"# Promise Chaining-链式调用\n### `Promise.prototype.then()`\n\n接收两个回调函数作为参数，均为可选参数\n\n```js\nPromise.resolve().then(onFulfilled()=>{}, onReject()={})\n```\n\n### `Promise.prototype.catch()`\n\n#### 错误捕获条件\n\n❌ 在`then`或`catch`中 `return` 一个 `new Error` 对象不会被捕获：  \n`return new Error(Error!)`  \n✅ 必须使用以下任一一种语法：\n\n```js\nreturn Promise.reject(new Error(error!!!));\nthrow new Error(error!!!);\n```\n\n#### 级联错误\n\n- 如果在  `catch()`  内部引发错误，则可以附加第二个  `catch()`来处理，依此类推\n\n```js\nnew Promise((resolve, reject) => {\n\tthrow new Error(错误);\n})\n\t.catch((err) => {\n\t\tthrow new Error(错误);\n\t})\n\t.catch((err) => {\n\t\tconsole.error(err);\n\t});\n```\n\n### `Promise.prototype.finally()`\n\n- 用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的\n  - 避免了同样的语句需要在`then()`和`catch()`中各写一次的情况。\n\n### Example (Consume Promise )\n\n#### Example (Promise chain)\n\n```js\n// import fetch from node-fetch;\nconst promise = fetch(https://jsonplaceholder.typicode.com/todos/1);\npromise\n\t.then((res) => res.json())\n\t.then((todo) => {\n\t\tthrow new Error(uh oh);\n\t\treturn todo;\n\t})\n\t.then((todo) => console.log(😛, todo.title)) // This line will be bypasses\n\t.catch((err) => console.error(😭, err));\nconsole.log(🥪 Synchronous);\n```\n\n#### Example (Ice-cream Shop)\n\n- [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)\n- [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\n##### Relationship between time and work\n\n```javascript\nlet is_shop_open = true;\nlet order = (time, work) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (is_shop_open) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// work is 👇 getting done here\n\t\t\t\tresolve(work());\n\t\t\t\t// Setting 👇 time here for 1 work\n\t\t\t}, time);\n\t\t} else {\n\t\t\treject(console.log(Our shop is closed));\n\t\t}\n\t});\n};\n```\n\n##### Promise chaining\n\n```js\n// step 1\norder(2000, () => console.log(`${stocks.Fruits[0]} was selected`))\n\t// step 2\n\t.then(() => order(0000, () => console.log(production has started)))\n\t// step 3\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Fruit has been chopped));\n\t})\n\t// step 4\n\t.then(() => {\n\t\treturn order(1000, () =>\n\t\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)\n\t\t);\n\t})\n\t// step 5\n\t.then(() => {\n\t\treturn order(1000, () => console.log(start the machine));\n\t})\n\t// step 6\n\t.then(() => {\n\t\treturn order(2000, () =>\n\t\t\tconsole.log(`ice cream placed on ${stocks.holder[1]}`)\n\t\t);\n\t})\n\t// step 7\n\t.then(() => {\n\t\treturn order(3000, () => console.log(`${stocks.toppings[0]} as toppings`));\n\t})\n\t// Step 8\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Serve Ice Cream));\n\t});\n```\n\n##### Error handling\n\n```javascript\nlet is_shop_open = false;\n// Add Error handling at the end of the Promise chain\n.catch(()=>{\n  console.log(Customer left)\n})\n// Output:\n// Our shop is closed -- from reject\n// Customer left -- from catch\n```\n\n##### The `.finally` handler\n\nThe `finally` handler which works regardless of whether our promise was resolved or rejected.\n\n```javascript\n// Whether we serve no customers or 100 customers, our shop will close at the end of the day. Optional - Add `finally` at the very bottom of the chain\n.finally(()=>{\n  console.log(end of day)\n})\n```\n\n#### Avoid Mistakes\n\n```js\ndoSomething()\n\t.then(function (result) {\n\t\t// If using a full function expression: return the promise\n\t\treturn doSomethingElse(result);\n\t})\n\t// If using arrow functions: omit the braces and implicitly return the result\n\t.then((newResult) => doThirdThing(newResult))\n\t// Even if the previous chained promise returns a result, the next one\n\t// doesn't necessarily have to use it. You can pass a handler that doesn't\n\t// consume any result.\n\t.then((/* result ignored */) => doFourthThing())\n\t// Always end the promise chain with a catch handler to avoid any\n\t// unhandled rejections!\n\t.catch((error) => console.error(error));\n```"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"promise-chaining-链式调用",text:"Promise Chaining-链式调用#"},{depth:3,slug:"promiseprototypethen",text:"Promise.prototype.then()#"},{depth:3,slug:"promiseprototypecatch",text:"Promise.prototype.catch()#"},{depth:4,slug:"错误捕获条件",text:"错误捕获条件#"},{depth:4,slug:"级联错误",text:"级联错误#"},{depth:3,slug:"promiseprototypefinally",text:"Promise.prototype.finally()#"},{depth:3,slug:"example-consume-promise-",text:"Example (Consume Promise )#"},{depth:4,slug:"example-promise-chain",text:"Example (Promise chain)#"},{depth:4,slug:"example-ice-cream-shop",text:"Example (Ice-cream Shop)#"},{depth:5,slug:"relationship-between-time-and-work",text:"Relationship between time and work#"},{depth:5,slug:"promise-chaining",text:"Promise chaining#"},{depth:5,slug:"error-handling",text:"Error handling#"},{depth:5,slug:"thefinallyhandler",text:"The .finally handler#"},{depth:4,slug:"avoid-mistakes",text:"Avoid Mistakes#"}]}const Content=createComponent(((s,n,a)=>{const{layout:o,...e}=frontmatter;return e.file=file,e.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};