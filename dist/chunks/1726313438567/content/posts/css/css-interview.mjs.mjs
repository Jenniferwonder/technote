import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h3 id="css-属性是否区分大小写">CSS 属性是否区分大小写？<a class="anchor" href="#css-属性是否区分大小写"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>CSS 属性名和属性值在大多数情况下是不区分大小写的，但也有少数例外情况，如 font-variant 和 text-decoration 等属性与其值中的某些字母是区分大小写的。建议在编写 CSS 代码时还是严格遵守大小写以避免不必要的错误。</p>\n<h3 id="css-的盒模型">CSS 的盒模型?<a class="anchor" href="#css-的盒模型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>CSS 盒模型包括标准盒模型和 IE 盒模型。其中标准盒模型（box-sizing: content-box;）的宽度和高度只包括内容的宽度和高度；而 IE 盒模型（box-sizing: border-box;）的宽度和高度则包括了内容、内边距和边框的宽度和高度。这两种盒模型的主要区别在于计算元素宽度和高度时所涉及的内容不同。</p>\n<h3 id="link-与import-的区别">link 与@import 的区别<a class="anchor" href="#link-与import-的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>&#x3C;link></code>和<code>@import</code>都可以用来引入外部资源，如 CSS 文件，但是它们之间有以下区别：</p>\n<ol>\n<li>引入方式：<code>&#x3C;link></code>是 HTML 标签，<code>@import</code>是 CSS 提供的一种方式。</li>\n<li>加载顺序和性能：<code>&#x3C;link></code>在页面载入时同时加载，<code>@import</code>在页面载入完成后加载。</li>\n<li>定义方式：<code>&#x3C;link></code>可以在文档头部定义，也可以在文档中任何地方定义，<code>@import</code>只能在样式表中定义。</li>\n<li>加载方式：<code>&#x3C;link></code>可以同时加载多个外部样式表，而<code>@import</code>必须一条一条地执行。</li>\n<li>附加功能：<code>link</code>标签支持添加一些额外属性，如<code>media</code>、<code>title</code>等，用于指定媒体类型或提供样式表的描述。<code>@import</code>不支持这些附加功能。</li>\n<li>可控性：<code>&#x3C;link></code>支持动态插入，而<code>@import</code>不支持。</li>\n</ol>\n<h3 id="元素垂直居中的方式有哪些">元素垂直居中的方式有哪些？<a class="anchor" href="#元素垂直居中的方式有哪些"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>使用 flexbox 布局，通过设置父元素的 align-items 属性为 center 实现元素垂直居中。</li>\n<li>使用 grid 布局，可以通过设置网格项的 align-self 属性为 center 实现元素垂直居中。</li>\n<li>使用 position 和 transform 属性，设置元素的 top 和 left 属性为 50%，并使用 transform 属性的 translate()函数将元素向上和左移动自身高度和宽度的一半，就可以实现元素垂直居中。</li>\n<li>使用表格布局，将元素放入一个单元格中，并设置单元格的 vertical-align 属性为 middle 实现元素垂直居中。</li>\n</ol>\n<h3 id="文本垂直居中的方式有哪些">文本垂直居中的方式有哪些？<a class="anchor" href="#文本垂直居中的方式有哪些"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>使用行高（line-height）属性，将行高设置为等于容器的高度减去文本行高，再将文本的行高设置为容器高度。</li>\n<li>使用弹性盒子（flexbox）布局，在容器上设置 display:flex 和 align-items:center 属性。</li>\n<li>使用网格布局（grid）将文本放置在居中单元格中。</li>\n<li>使用绝对定位（absolute positioning）属性，并将文本的 top 和 bottom 都设置为 0，再设置 margin:auto 来水平居中</li>\n</ol>\n<h3 id="css-选择器的优先级是如何计算的">CSS 选择器的优先级是如何计算的？<a class="anchor" href="#css-选择器的优先级是如何计算的"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>!important 优先级最高</li>\n<li>标签内样式：即在 HTML 标签内部使用 style 属性设置的样式，优先级第二高。</li>\n<li>ID 选择器：以 # 符号开头，指定某个元素的唯一标识符，比如 #header，优先级第三高。</li>\n<li>类选择器、属性选择器和伪类选择器：包括 .class、[attr]、:hover 等，优先级第四高。</li>\n<li>元素选择器和伪元素选择器：包括 div、span、:before 等，优先级最低。</li>\n</ol>\n<p>在比较优先级时，遵循“从左到右，从高到低”的原则，也就是选择器中每增加一项就会降低一级别的优先级。如果两个选择器的优先级相同，则后面的选择器优先级更高。</p>\n<h3 id="请阐述块格式化上下文block-formatting-context工作原理以及形成条件">请阐述块格式化上下文（Block Formatting Context）、工作原理以及形成条件？<a class="anchor" href="#请阐述块格式化上下文block-formatting-context工作原理以及形成条件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>块格式化上下文（Block Formatting Context，BFC）是一个独立的渲染区域，在这个区域内，元素的布局和外部元素互不影响。BFC 是 Web 页面布局中的一种重要机制，主要用于控制块级元素的布局及其内部元素的排列方式。</p>\n<p>BFC 的工作原理：</p>\n<ol>\n<li>内部的块级盒子会在垂直方向一个接一个放置。</li>\n<li>块级盒子的垂直间距（margin）会发生折叠。相邻的块级盒子的上下外边距会取最大值，而非相加。</li>\n<li>BFC 的区域不会与浮动盒子重叠。在计算布局时，BFC 会考虑浮动元素的占用空间，从而避免与浮动元素重叠。</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算。</li>\n<li>BFC 是一个独立的容器，外部元素对其内部元素布局没有影响；同样，BFC 内部元素的布局也不会影响外部元素。</li>\n</ol>\n<p>形成 BFC 的条件：\n要创建一个 BFC，需要满足以下条件之一：</p>\n<ol>\n<li>根元素（<code>&#x3C;html></code>）。</li>\n<li>浮动元素（<code>float</code>属性为<code>left</code>或<code>right</code>）。</li>\n<li>绝对定位元素（<code>position</code>属性为<code>absolute</code>或<code>fixed</code>）。</li>\n<li>内联块（<code>display</code>属性为<code>inline-block</code>）。</li>\n<li>表格单元格（<code>display</code>属性为<code>table-cell</code>）。</li>\n<li>表格标题（<code>display</code>属性为<code>table-caption</code>）。</li>\n<li>匿名表格单元格（<code>display</code>属性为<code>table</code>、<code>table-row</code>、<code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>、<code>table-column</code>、<code>table-column-group</code>）。</li>\n<li>元素的<code>overflow</code>属性值不为<code>visible</code>（例如，<code>auto</code>、<code>scroll</code>、<code>hidden</code>）。</li>\n<li>弹性盒子（<code>display</code>属性为<code>flex</code>或<code>inline-flex</code>）。</li>\n<li>网格容器（<code>display</code>属性为<code>grid</code>或<code>inline-grid</code>）。</li>\n<li>多列容器（<code>column-count</code>或<code>column-width</code>属性不为<code>auto</code>）。</li>\n<li><code>contain</code>属性值为<code>layout</code>、<code>paint</code>或<code>strict</code>。</li>\n</ol>\n<p>通过满足以上条件之一，可以创建 BFC，实现独立渲染区域。在实际应用中，BFC 有助于解决外边距折叠、浮动元素引起的布局问题等。</p>\n<h3 id="请阐述-z-index-属性并说明如何形成层叠上下文stacking-context">请阐述 z-index 属性，并说明如何形成层叠上下文（stacking context）<a class="anchor" href="#请阐述-z-index-属性并说明如何形成层叠上下文stacking-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>z-index</code>属性是 CSS 中用于控制元素在页面中的堆叠顺序（即在 z 轴上的顺序）的属性。具有较高<code>z-index</code>值的元素会覆盖较低<code>z-index</code>值的元素。需要注意的是，<code>z-index</code>属性只适用于具有定位属性（<code>position</code>属性值为<code>relative</code>、<code>absolute</code>或<code>fixed</code>）的元素。</p>\n<p>层叠上下文（Stacking Context）是一个抽象概念，它定义了一个元素在 z 轴上的层次。在同一个层叠上下文中，元素的堆叠顺序由<code>z-index</code>属性控制。层叠上下文可以嵌套，形成一个层叠上下文树。层叠上下文解决了多个元素重叠时的优先级显示。</p>\n<p>形成层叠上下文的条件：</p>\n<ol>\n<li>根元素（<code>&#x3C;html></code>）。</li>\n<li><code>z-index</code>值不为<code>auto</code>的定位元素（<code>position</code>属性值为<code>relative</code>、<code>absolute</code>或<code>fixed</code>）。</li>\n<li><code>z-index</code>值不为<code>auto</code>的弹性盒子（<code>display</code>属性值为<code>flex</code>或<code>inline-flex</code>）的直接子元素。</li>\n<li><code>z-index</code>值不为<code>auto</code>的网格容器（<code>display</code>属性值为<code>grid</code>或<code>inline-grid</code>）的直接子元素。</li>\n<li><code>opacity</code>属性值小于 1 的元素。</li>\n<li><code>transform</code>属性值不为<code>none</code>的元素。</li>\n<li><code>filter</code>属性值不为<code>none</code>的元素。</li>\n<li><code>perspective</code>属性值不为<code>none</code>的元素。</li>\n<li><code>will-change</code>属性值指定了任意形成层叠上下文的属性的元素。</li>\n<li><code>contain</code>属性值为<code>paint</code>或<code>strict</code>的元素。</li>\n<li><code>mix-blend-mode</code>属性值不为<code>normal</code>的元素。</li>\n<li><code>isolation</code>属性值为<code>isolate</code>的元素。</li>\n</ol>\n<p>满足以上任意条件之一的元素都会创建一个新的层叠上下文。在层叠上下文中，元素会根据其<code>z-index</code>值和其他因素进行堆叠。层叠上下文有助于更好地控制元素的堆叠顺序，解决元素覆盖和遮挡的问题。</p>\n<h3 id="css-有哪些继承属性">CSS 有哪些继承属性？<a class="anchor" href="#css-有哪些继承属性"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>文本和字体相关属性：\n<ul>\n<li><code>color</code></li>\n<li><code>font-family</code></li>\n<li><code>font-size</code></li>\n<li><code>font-weight</code></li>\n<li><code>font-style</code></li>\n<li><code>font-variant</code></li>\n<li><code>letter-spacing</code></li>\n<li><code>line-height</code></li>\n<li><code>text-align</code></li>\n<li><code>text-indent</code></li>\n<li><code>text-transform</code></li>\n<li><code>white-space</code></li>\n<li><code>word-spacing</code></li>\n</ul>\n</li>\n<li>列表样式相关属性：\n<ul>\n<li><code>list-style-type</code></li>\n<li><code>list-style-position</code></li>\n<li><code>list-style-image</code></li>\n</ul>\n</li>\n<li>表格布局相关属性：\n<ul>\n<li><code>border-collapse</code></li>\n<li><code>border-spacing</code></li>\n<li><code>caption-side</code></li>\n<li><code>empty-cells</code></li>\n<li><code>table-layout</code></li>\n</ul>\n</li>\n<li>其他可继承属性：\n<ul>\n<li><code>visibility</code></li>\n<li><code>cursor</code></li>\n<li><code>quotes</code></li>\n<li><code>text-decoration</code></li>\n<li><code>text-shadow</code></li>\n<li><code>word-break</code></li>\n<li><code>word-wrap</code></li>\n<li><code>writing-mode</code></li>\n<li><code>direction</code></li>\n</ul>\n</li>\n</ol>\n<h3 id="有哪些清除浮动的技术都适用哪些情况">有哪些清除浮动的技术，都适用哪些情况？<a class="anchor" href="#有哪些清除浮动的技术都适用哪些情况"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>\n<p>使用<code>clear</code>属性： 在浮动元素后添加一个空元素，然后使用 CSS 的<code>clear</code>属性来清除浮动。适用于简单布局和较早的浏览器版本。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8"> style="float: left;"</span><span style="color:#F97583">></span><span style="color:#E1E4E8">..</span><span style="color:#FDAEB7;font-style:italic">.&#x3C;/div</span><span style="color:#F97583">></span></span>\n<span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8"> style="clear: both;"</span><span style="color:#F97583">></span><span style="color:#E1E4E8">&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#F97583">></span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>父元素使用<code>overflow</code>属性： 为父元素添加<code>overflow: auto</code>或<code>overflow: hidden</code>属性。此方法可以使父元素自动计算其高度，包括浮动元素。适用于不需要显示滚动条的布局。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.container</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\toverflow</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">auto</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>使用伪元素<code>::after</code>： 为父元素添加<code>::after</code>伪元素，并设置<code>clear: both</code>。这种方法不需要额外的 HTML 元素。适用于现代浏览器和简洁的 HTML 结构。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.container::after</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tcontent</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tdisplay</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">table</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tclear</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">both</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>使用 Flexbox 布局： 将父元素的<code>display</code>属性设置为<code>flex</code>。这会使所有子元素成为弹性项，并且不再需要清除浮动。适用于现代浏览器和需要使用弹性布局的场景。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.container</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tdisplay</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">flex</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>使用 Grid 布局： 将父元素的<code>display</code>属性设置为<code>grid</code>。这会使所有子元素成为网格项，并且不再需要清除浮动。适用于现代浏览器和需要使用网格布局的场景。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.container</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tdisplay</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">grid</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ol>\n<p>在实际项目中，选择哪种清除浮动的技术取决于项目的具体需求、浏览器兼容性和布局类型。现代项目通常更倾向于使用 Flexbox 或 Grid 布局来解决浮动问题。</p>\n<h3 id="响应式布局有哪些">响应式布局有哪些<a class="anchor" href="#响应式布局有哪些"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>响应式布局是一种使网站能够自动适应不同屏幕尺寸和设备类型的设计方法。以下是一些常见的响应式布局技术：</p>\n<ol>\n<li>流式布局（Fluid Layout）： 使用百分比来定义元素的宽度，使元素随浏览器窗口大小变化而自动调整宽度。这种布局可以在一定程度上适应不同屏幕尺寸，但在极小或极大屏幕上可能无法提供最佳用户体验。</li>\n<li>弹性布局（Flexible Layout）： 使用 CSS3 中的弹性盒子（Flexbox）布局模型，可以轻松创建自适应大小和顺序的布局。弹性布局可以根据屏幕尺寸自动调整元素的大小和排列，提供更好的响应式体验。</li>\n<li>网格布局（Grid Layout）： 使用 CSS3 中的网格布局（Grid）模型，可以创建复杂的二维布局。网格布局允许在水平和垂直方向上自由排列和调整元素，从而实现高度自适应的响应式设计。</li>\n<li>媒体查询（Media Queries）： 使用 CSS3 的媒体查询功能，可以针对不同屏幕尺寸、分辨率和设备类型应用特定的样式。结合流式布局、弹性布局和网格布局，媒体查询可以实现更精确和全面的响应式设计。</li>\n<li>自适应图片（Responsive Images）： 使用<code>srcset</code>、<code>sizes</code>属性和<code>&#x3C;picture></code>元素，可以让浏览器根据设备像素比（DPR）和屏幕尺寸选择合适的图片资源。这样可以在不同设备上加载适当大小的图片，提高性能并保持视觉效果。</li>\n<li>移动优先设计（Mobile-first Design）： 从移动设备的视角开始设计，然后逐步扩展到平板和桌面设备。这种设计方法强调简单、清晰和高效，可以提高跨设备的用户体验。</li>\n</ol>\n<p>在实际项目中，通常会综合运用以上技术来实现响应式布局。这些技术可以使网站在不同设备和屏幕尺寸下保持良好的用户体验和视觉效果。</p>\n<h3 id="讲一下三栏布局实现圣杯布局双飞翼布局和-flex-布局">讲一下三栏布局实现？圣杯布局、双飞翼布局和 flex 布局<a class="anchor" href="#讲一下三栏布局实现圣杯布局双飞翼布局和-flex-布局"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>三栏布局是指一个网页由三个栏目组成的布局，分别是左栏、右栏和中间栏。下面是三种实现三栏布局的方法：</p>\n<ol>\n<li>圣杯布局</li>\n</ol>\n<p>圣杯布局是一种使用浮动和负边距实现的三栏布局。中间栏先放在 html 结构中，使用负边距将左右栏移动到中间栏的两侧，再使用相对定位将左右栏拉回原来的位置。这种布局可以使得中间栏优先渲染，兼顾 SEO 和用户体验。</p>\n<ol>\n<li>双飞翼布局</li>\n</ol>\n<p>双飞翼布局也是一种使用浮动和负边距实现的三栏布局。与圣杯布局不同的是，左右栏使用 margin 负值撑开中间栏的宽度。这种布局与圣杯布局相比，代码更简单易懂。</p>\n<ol>\n<li>Flex 布局</li>\n</ol>\n<p>Flex 布局是 CSS3 引入的一种新的布局方式，通过 flex 容器和 flex 项目的属性设置，可以轻松实现三栏布局。设置左右栏的宽度为固定值，中间栏的宽度使用 flex-grow 属性自动填充。这种布局适用于移动端和 PC 端，具有响应式的特点。</p>\n<h3 id="使用过哪些-css-预处理器它们有什么优劣">使用过哪些 CSS 预处理器？它们有什么优劣？<a class="anchor" href="#使用过哪些-css-预处理器它们有什么优劣"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Less 和 Sass 这两个常见的 CSS 预处理器。它们的优势是可以使用变量、嵌套规则和函数等功能，可以更简单更高效地编写 CSS 代码。缺点是需要进行额外的预处理工作，增加了开发成本。</p>\n<h3 id="如何解决-css-样式在不同浏览器中的兼容性问题">如何解决 CSS 样式在不同浏览器中的兼容性问题？<a class="anchor" href="#如何解决-css-样式在不同浏览器中的兼容性问题"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>解决 CSS 样式在不同浏览器中的兼容性问题可以使用一些通用的方法，如使用 CSS Reset，避免使用 CSS Hack 和浏览器前缀，使用标准的组件库，尽量使用标准的 CSS 属性和属性值等。</p>\n<h3 id="如何制作一个自适应的正方形">如何制作一个自适应的正方形？<a class="anchor" href="#如何制作一个自适应的正方形"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>在外层容器内创建一个正方形元素，并设置<code>padding-bottom</code>为 100%。这里的关键是<code>padding-bottom</code>以父元素的宽度为基准计算，因此当设置为 100%时，它将等于父元素的宽度，从而保证正方形的宽高相等。</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> class</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"square-container"</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> class</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"square"</span><span style="color:#E1E4E8">>&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"></span></code></pre>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.square</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tposition</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">absolute</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\ttop</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tleft</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\twidth</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">100</span><span style="color:#F97583">%</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tpadding-bottom</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">100</span><span style="color:#F97583">%</span><span style="color:#E1E4E8">; </span><span style="color:#6A737D">/* 确保正方形的高度等于宽度 */</span></span>\n<span class="line"><span style="color:#79B8FF">\tbackground-color</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">#f00</span><span style="color:#E1E4E8">; </span><span style="color:#6A737D">/* 设置背景颜色以便观察效果 */</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h3 id="讲讲-margin-塌陷和-margin-合并以及解决方案">讲讲 margin 塌陷和 margin 合并以及解决方案？<a class="anchor" href="#讲讲-margin-塌陷和-margin-合并以及解决方案"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><strong>margin 塌陷</strong> 和 <strong>margin 合并</strong> 都是 CSS 中描述 margin 行为的术语。它们分别指 margin 在不同场景下的特殊表现。</p>\n<ol>\n<li><strong>Margin 塌陷</strong>：Margin 塌陷是指当一个元素的上外边距（margin-top）和相邻的另一个元素的下外边距（margin-bottom）相遇时，它们之间的距离实际上等于两个外边距中的较大值，而不是它们的总和。这种现象主要发生在具有相邻兄弟元素的块级元素之间。</li>\n<li><strong>Margin 合并</strong>：Margin 合并是指在父子元素之间发生的现象。当一个元素的外边距与其父元素的外边距相遇时，它们之间的距离实际上等于两个外边距中的较大值，而不是它们的总和。Margin 合并通常发生在没有边框、内边距或行内内容分隔的父元素与其第一个或最后一个子元素之间。</li>\n</ol>\n<p>解决方案：</p>\n<p>针对 margin 塌陷和合并的现象，有以下几种解决方案：</p>\n<ol>\n<li><strong>使用内边距（padding）</strong>：如果适用，可以使用内边距代替外边距来调整元素之间的距离。内边距不会发生塌陷或合并。</li>\n<li><strong>添加边框（border）或内边距（padding）</strong>：在父子元素间的 margin 合并问题上，可以通过给父元素添加一个边框或一个很小的内边距来阻止 margin 合并。</li>\n<li><strong>使用 BFC（块格式化上下文）</strong>：创建一个新的 BFC（如通过设置 <code>overflow</code> 属性为 <code>auto</code> 或 <code>hidden</code>）可以防止父子元素间的 margin 合并。</li>\n<li><strong>使用伪元素</strong>：可以通过在两个相邻的兄弟元素之间插入一个透明的伪元素（如 <code>::before</code> 或 <code>::after</code>），并为其添加 <code>display: inline-block;</code> 属性来防止兄弟元素间的 margin 塌陷。</li>\n<li><strong>避免使用外边距</strong>：在某些情况下，可以使用其他布局技术（如 Flexbox 或 Grid）来调整元素之间的距离，从而避免 margin 塌陷和合并的问题。</li>\n</ol>\n<p>了解 margin 塌陷和合并现象以及如何解决这些问题可以帮助你更好地控制布局和元素间距。</p>\n<h3 id="如何实现一个三角形">如何实现一个三角形？<a class="anchor" href="#如何实现一个三角形"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>使用 CSS 创建一个三角形的常见方法是利用边框（border）属性。具体操作如下：</p>\n<ol>\n<li>首先，创建一个宽高为 0 的元素（如 <code>div</code>），这样它的内容区域将不占据任何空间。</li>\n<li>为该元素设置透明边框，这样它的边框也不会显示出来。</li>\n<li>根据你需要的三角形方向，设置一个边框颜色，使该边框变得可见。</li>\n</ol>\n<p>以下是一个创建向上的三角形的示例：</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">&#x3C;!</span><span style="color:#85E89D">DOCTYPE</span><span style="color:#B392F0"> html</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">html</span><span style="color:#B392F0"> lang</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"en"</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t&#x3C;</span><span style="color:#85E89D">head</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">meta</span><span style="color:#B392F0"> charset</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"UTF-8"</span><span style="color:#E1E4E8"> /></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">meta</span><span style="color:#B392F0"> name</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"viewport"</span><span style="color:#B392F0"> content</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"width=device-width, initial-scale=1.0"</span><span style="color:#E1E4E8"> /></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">style</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t.triangle</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\twidth</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\theight</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tborder-left</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">50</span><span style="color:#F97583">px</span><span style="color:#79B8FF"> solid</span><span style="color:#79B8FF"> transparent</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tborder-right</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">50</span><span style="color:#F97583">px</span><span style="color:#79B8FF"> solid</span><span style="color:#79B8FF"> transparent</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t\t\tborder-bottom</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">100</span><span style="color:#F97583">px</span><span style="color:#79B8FF"> solid</span><span style="color:#79B8FF"> red</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;/</span><span style="color:#85E89D">style</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t&#x3C;/</span><span style="color:#85E89D">head</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t&#x3C;</span><span style="color:#85E89D">body</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> class</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"triangle"</span><span style="color:#E1E4E8">>&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t&#x3C;/</span><span style="color:#85E89D">body</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">&#x3C;/</span><span style="color:#85E89D">html</span><span style="color:#E1E4E8">></span></span>\n<span class="line"></span></code></pre>\n<p>在这个示例中，我们创建了一个名为 <code>.triangle</code> 的 <code>div</code> 元素。我们将其宽度和高度设置为 0，然后为其添加了左、右和底边框。左右边框设置为透明，底边框设置为红色。这将创建一个向上的红色三角形。</p>\n<h3 id="如何画一条-05px-的线">如何画一条 0.5px 的线<a class="anchor" href="#如何画一条-05px-的线"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>要在屏幕上绘制一条 0.5px 的线，可以使用 CSS 的伪元素 <code>::before</code> 或 <code>::after</code>，并设置它们的尺寸和缩放（scale）。以下是一个绘制 0.5px 水平线的示例：</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">.half-pixel-line</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tposition</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">relative</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tdisplay</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">inline-block</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\twidth</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">100</span><span style="color:#F97583">%</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\theight</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">1</span><span style="color:#F97583">px</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0">.half-pixel-line::before</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#79B8FF">\tcontent</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tposition</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">absolute</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\ttop</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tleft</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\twidth</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">100</span><span style="color:#F97583">%</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\theight</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">1</span><span style="color:#F97583">px</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\tbackground-color</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">black</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\ttransform-origin</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">left</span><span style="color:#79B8FF"> top</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#79B8FF">\ttransform</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">scaleY</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0.5</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h3 id="视差滚动效果的原理">视差滚动效果的原理？<a class="anchor" href="#视差滚动效果的原理"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>视差滚动效果（Parallax Scrolling）是一种视觉设计技巧，通过在页面滚动时以不同速度移动前景和背景元素，从而产生深度感和动态效果。这种效果可以使网页看起来更有趣、更具吸引力。</p>\n<p>视差滚动效果的原理在于，当用户滚动页面时，页面上的不同元素（例如前景、背景、文字等）以不同的速度移动。这些速度差使得靠近观察者的元素（前景）看起来移动得更快，而远离观察者的元素（背景）看起来移动得更慢。这种相对运动产生了一种错觉，使用户感觉到页面的不同部分之间有深度关系，从而增强了视觉体验。</p>\n<p>要实现视差滚动效果，可以使用以下方法之一：</p>\n<ol>\n<li><strong>纯 CSS 方法</strong>：利用 CSS3 的 <code>background-attachment</code> 属性设置为 <code>fixed</code>。这种方法简单易实现，但仅适用于背景图像，并且在某些浏览器或设备上可能存在兼容性问题。</li>\n<li><strong>JavaScript 方法</strong>：通过监听页面滚动事件，根据滚动位置动态调整元素的位置。这种方法更灵活，可以应用于任何元素，并且可以实现更复杂的视差效果。通常使用 JavaScript 库（如 Rellax.js、Parallax.js 等）来简化开发过程。</li>\n</ol>\n<p>需要注意的是，过多或不合适的视差滚动效果可能会导致页面性能下降、用户体验受损，因此在实现视差滚动效果时要保持适度。</p>\n<h3 id="24displaynone和visibilityhidden的区别">24.display:none和visibility:hidden的区别？<a class="anchor" href="#24displaynone和visibilityhidden的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。<br>\nvisibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间</p>\n<h3 id="16常见的盒子垂直居中的方法有哪些请举例-3-种">16、常见的盒子垂直居中的方法有哪些请举例 3 种？<a class="anchor" href="#16常见的盒子垂直居中的方法有哪些请举例-3-种"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>// 1. 利用子绝父相定位的方式来实现</span></span>\n<span class="line"><span>#container {</span></span>\n<span class="line"><span>  width: 500px;</span></span>\n<span class="line"><span>  height: 500px;</span></span>\n<span class="line"><span>  position: relative;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>#center {</span></span>\n<span class="line"><span>  width: 100px;</span></span>\n<span class="line"><span>  hight: 100px;</span></span>\n<span class="line"><span>  position: absolute;</span></span>\n<span class="line"><span>  top: 50%;</span></span>\n<span class="line"><span>  left: 50%;</span></span>\n<span class="line"><span>  margin-top: -50px;</span></span>\n<span class="line"><span>  margin-left: -50px;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 2. 利用 Css3 的 transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#container {</span></span>\n<span class="line"><span>  position: relative;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>#center {</span></span>\n<span class="line"><span>  position: absolute;</span></span>\n<span class="line"><span>  top: 50%;</span></span>\n<span class="line"><span>  left: 50%;</span></span>\n<span class="line"><span>  transform: translate(-50%, -50%);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 3. flex</span></span>\n<span class="line"><span>#container {</span></span>\n<span class="line"><span>  display: flex;</span></span>\n<span class="line"><span>  justify-content: center;</span></span>\n<span class="line"><span>  align-items: center;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>#center {</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span></code></pre>\n<h3 id="31清除浮动的方法有哪些">31、清除浮动的方法有哪些？<a class="anchor" href="#31清除浮动的方法有哪些"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>为什么要清除浮动，因为浮动的盒子脱离标准流，如果父盒子没有设置高度的话，下面的盒子就会撑上 来。</p>\n<p>1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置 clear：both；）（不推荐）</p>\n<p>2.父级添加 overflow 属性（父元素添加 overflow:hidden）（不推荐）</p>\n<p>3.使用 after 伪元素清除浮动（推荐使用）</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>.clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/</span></span>\n<span class="line"><span>  content: "";</span></span>\n<span class="line"><span>  display: block;</span></span>\n<span class="line"><span>  height: 0;</span></span>\n<span class="line"><span>  clear:both;</span></span>\n<span class="line"><span>  visibility: hidden;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>.clearfix{</span></span>\n<span class="line"><span>  *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span></span>\n<span class="line"><span>｝</span></span>\n<span class="line"><span></span></span></code></pre>\n<p>4.使用 before 和 after 双伪元素清除浮动</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>.clearfix:after,</span></span>\n<span class="line"><span>.clearfix:before {</span></span>\n<span class="line"><span>  content: \'\';</span></span>\n<span class="line"><span>  display: table;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>.clearfix:after {</span></span>\n<span class="line"><span>  clear: both;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>.clearfix {</span></span>\n<span class="line"><span>  *zoom: 1;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span></code></pre>\n<h3 id="32常见的布局方法有哪些他们的优缺点是什么">32、常见的布局方法有哪些？他们的优缺点是什么？<a class="anchor" href="#32常见的布局方法有哪些他们的优缺点是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>页面布局常用的方法有浮动、定位、flex、grid 网格布局、栅格系统布局</p>\n<p>浮动： 优点：兼容性好。 缺点：浮动会脱离标准文档流，因此要清除浮动。我们解决好这个问题即可。</p>\n<p>绝对定位 优点：快捷。 缺点：导致子元素也脱离了标准文档流，可实用性差。</p>\n<p>flex 布局（CSS3 中出现的） 优点：解决上面两个方法的不足，flex 布局比较完美。移动端基本用 flex 布局。</p>\n<p>网格布局（grid） CSS3 中引入的布局，很好用。代码量简化了很多。</p>\n<p>利用网格布局实现的一个左右 300px 中间自适应的布局</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>&#x3C;!DOCTYPE html></span></span>\n<span class="line"><span>&#x3C;html lang="en"></span></span>\n<span class="line"><span>  &#x3C;head></span></span>\n<span class="line"><span>    &#x3C;meta charset="UTF-8" /></span></span>\n<span class="line"><span>    &#x3C;title>Document&#x3C;/title></span></span>\n<span class="line"><span>    &#x3C;style></span></span>\n<span class="line"><span>      html * {</span></span>\n<span class="line"><span>        padding: 0;</span></span>\n<span class="line"><span>        margin: 0;</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>      /* 重要：设置容器为网格布局，宽度为100% */</span></span>\n<span class="line"><span>      .layout.grid .left-center-right {</span></span>\n<span class="line"><span>        display: grid;</span></span>\n<span class="line"><span>        width: 100%;</span></span>\n<span class="line"><span>        grid-template-rows: 100px;</span></span>\n<span class="line"><span>        grid-template-columns: 300px auto 300px; /* 重要：设置网格为三列，</span></span>\n<span class="line"><span>\t并设置每列的宽度。即可。*/</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>      .layout.grid .left {</span></span>\n<span class="line"><span>        background: red;</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>      .layout.grid .center {</span></span>\n<span class="line"><span>        background: green;</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>      .layout.grid .right {</span></span>\n<span class="line"><span>        background: blue;</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>    &#x3C;/style></span></span>\n<span class="line"><span>  &#x3C;/head></span></span>\n<span class="line"><span>  &#x3C;body></span></span>\n<span class="line"><span>    &#x3C;section class="layout grid"></span></span>\n<span class="line"><span>      &#x3C;article class="left-center-right"></span></span>\n<span class="line"><span>        &#x3C;div class="left">我是 left&#x3C;/div></span></span>\n<span class="line"><span>        &#x3C;div class="center"></span></span>\n<span class="line"><span>          &#x3C;h1>网格布局解决方案&#x3C;/h1></span></span>\n<span class="line"><span>          我是 center</span></span>\n<span class="line"><span>        &#x3C;/div></span></span>\n<span class="line"><span>        &#x3C;div class="right">我是 right&#x3C;/div></span></span>\n<span class="line"><span>      &#x3C;/article></span></span>\n<span class="line"><span>    &#x3C;/section></span></span>\n<span class="line"><span>  &#x3C;/body></span></span>\n<span class="line"><span>&#x3C;/html></span></span>\n<span class="line"><span></span></span></code></pre>\n<p>栅格系统布局 优点：可以适用于多端设备</p>\n<h3 id="40谈谈盒子模型">40、谈谈盒子模型？<a class="anchor" href="#40谈谈盒子模型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>在标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。</p>\n<p>增加内边距、边框和外边距不会 影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>\n<p>IE 盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。</p>\n<p>盒子模型是css技术所使用的一种思维模型。盒子模型是指将网页设计页面中的内容元素看作一个个装了东西的矩形盒子。每个矩形盒子都由内容、内边距、边框和外边距4个部分组成。除去内容部分，其余每个部分又分别包含上、下、左和右4个方向，方向既可以分别定义也可以统一定义。</p>\n<p>我们生活中常见的手机盒子就可以看作一个盒子模型，完整的手机盒子通常包含手机、内填充物和盛装手机的外壳。如果把手机想象成HTML标记，那么手机盒子就是一个CSS盒子模型。内容就是盒子里装的手机；内边距就是怕手机损坏得填充物：边框就是盒子本身外部的壳；外边距就是多个手机盒子排放时空的缝隙。</p>\n<p>标记</p>\n<p>div英文全称为division，译为中文是“分割、区域”。标记简单而言就是一个块标记，可以实现网页的规划和布局。在HTML文档中，页面会被划分为很多区域，不同区域显示不同的内容，如导航栏、banner、内容区等，这些区块一般都通过标记可以在div标记中设置外边距、内边距、宽和高，同时内部可以容纳段落、标题、表图像等各种网页元素，也就是说大多数HTML标记都可以嵌套在标记中，中还可以嵌套多层。标记非常强大，通过与id、class等属性结合设置CSS样式，可以替代大多数的块级文本标记。</p>\n<p>盒子的宽与高</p>\n<p>网页是由多个盒子排列而成的，每个盒子都有固定的大小，在CSS中使用宽度属性widh和高度属性height控制盒子的大小。widh和height属性值可以是不同单位的数值或相对于父标记的百分比，实际工作中，最常用的属性值是像素值。</p>\n<p>相关阅读：什么是实体化三属性？</p>\n<p>实体化是指给标记划分区域(画盒子)，并通过宽度、高度、背景色这三种属性，让标记形态化，成为一个盒子。需要注意的是，宽度属性wdh和高度属性height仅适用于块级元素，对行内元素无效（和标记除外）。</p>\n<h3 id="15-前端标准-px和em的区别">15. 前端标准 px和em的区别？<a class="anchor" href="#15-前端标准-px和em的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。<br>\n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em</p>\n<h3 id="48bfc-是什么">48、BFC 是什么？<a class="anchor" href="#48bfc-是什么"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>BFC（块级格式化上下文），一个创建了新的 BFC 的盒子是独立布局的，盒子内元素的布局不会影响盒 子外面的元素。在同一个 BFC 中的两个相邻的盒子在垂直方向发生 margin 重叠的问题。\nBFC 是值浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布 局，这个渲染区域只对块级元素起作用\n1：概念 在⻚⾯布局的过程中，我们经常会遇到⼀些奇怪的情况，⽐如元素的⾼度消失了、两栏布局⽆法⾃适应、元素间距出现异常等等。这些问题往往是由于元素之间相互影响⽽导致的。在这⾥，就涉及到了BFC 的概念。<br>\nBFC（块级格式化上下⽂）是⻚⾯中⼀块独⽴的渲染区域，具有⼀套独⽴的渲染规则：内部的盒⼦会在垂直⽅向上⼀个接⼀个地放置。<br>\n同⼀个BFC的相邻盒⼦的m a r g in会发⽣重叠，与⽅向⽆关。<br>\n每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此。BFC的区域不会与floa t的元素区域重叠。<br>\n计算BFC的⾼度时，浮动⼦元素也参与计算。<br>\nBFC是⻚⾯上的⼀个隔离的独⽴容器，容器⾥⾯的⼦元素不会影响到外⾯的元素，反之亦然。<br>\nBFC的⽬的是形成⼀个相对于外界完全独⽴的空间，使内部的⼦元素不会影响到外部的元素</p>\n<p>2：触发条件<br>\n触发BFC的条件包含但不限于：<br>\n根元素，即HTML元素<br>\n浮动元素：floa t值为left、right<br>\nov e rflow值不为visibl e，为auto、s croll、hidden<br>\ndispl ay的值为inline -block、inline -t abl e、t abl e - ce ll、t abl e - caption、flex、inline -<br>\nfle x、grid、inline - grid position的值为absolut e或fix ed</p>',frontmatter={title:"css-interview",topic:null,type:null,tags:["CSS"],category:"Web Design",Datereviewed:"2024-04-25T00:00:00.000Z",reviewed:1,difficulty:null,status:null,comment:null,draft:!0,DateStarted:"2024-04-25T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",minutes:34,words:6769},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/css/css-interview.md",url=void 0;function rawContent(){return'### CSS 属性是否区分大小写？\n\nCSS 属性名和属性值在大多数情况下是不区分大小写的，但也有少数例外情况，如 font-variant 和 text-decoration 等属性与其值中的某些字母是区分大小写的。建议在编写 CSS 代码时还是严格遵守大小写以避免不必要的错误。\n\n### CSS 的盒模型?\n\nCSS 盒模型包括标准盒模型和 IE 盒模型。其中标准盒模型（box-sizing: content-box;）的宽度和高度只包括内容的宽度和高度；而 IE 盒模型（box-sizing: border-box;）的宽度和高度则包括了内容、内边距和边框的宽度和高度。这两种盒模型的主要区别在于计算元素宽度和高度时所涉及的内容不同。\n\n### link 与@import 的区别\n\n`<link>`和`@import`都可以用来引入外部资源，如 CSS 文件，但是它们之间有以下区别：\n\n1. 引入方式：`<link>`是 HTML 标签，`@import`是 CSS 提供的一种方式。\n2. 加载顺序和性能：`<link>`在页面载入时同时加载，`@import`在页面载入完成后加载。\n3. 定义方式：`<link>`可以在文档头部定义，也可以在文档中任何地方定义，`@import`只能在样式表中定义。\n4. 加载方式：`<link>`可以同时加载多个外部样式表，而`@import`必须一条一条地执行。\n5. 附加功能：`link`标签支持添加一些额外属性，如`media`、`title`等，用于指定媒体类型或提供样式表的描述。`@import`不支持这些附加功能。\n6. 可控性：`<link>`支持动态插入，而`@import`不支持。\n\n### 元素垂直居中的方式有哪些？\n\n1. 使用 flexbox 布局，通过设置父元素的 align-items 属性为 center 实现元素垂直居中。\n2. 使用 grid 布局，可以通过设置网格项的 align-self 属性为 center 实现元素垂直居中。\n3. 使用 position 和 transform 属性，设置元素的 top 和 left 属性为 50%，并使用 transform 属性的 translate()函数将元素向上和左移动自身高度和宽度的一半，就可以实现元素垂直居中。\n4. 使用表格布局，将元素放入一个单元格中，并设置单元格的 vertical-align 属性为 middle 实现元素垂直居中。\n\n### 文本垂直居中的方式有哪些？\n\n1. 使用行高（line-height）属性，将行高设置为等于容器的高度减去文本行高，再将文本的行高设置为容器高度。\n2. 使用弹性盒子（flexbox）布局，在容器上设置 display:flex 和 align-items:center 属性。\n3. 使用网格布局（grid）将文本放置在居中单元格中。\n4. 使用绝对定位（absolute positioning）属性，并将文本的 top 和 bottom 都设置为 0，再设置 margin:auto 来水平居中\n\n### CSS 选择器的优先级是如何计算的？\n1. !important 优先级最高\n2. 标签内样式：即在 HTML 标签内部使用 style 属性设置的样式，优先级第二高。\n3. ID 选择器：以 # 符号开头，指定某个元素的唯一标识符，比如 #header，优先级第三高。\n4. 类选择器、属性选择器和伪类选择器：包括 .class、[attr]、:hover 等，优先级第四高。\n5. 元素选择器和伪元素选择器：包括 div、span、:before 等，优先级最低。\n\n在比较优先级时，遵循“从左到右，从高到低”的原则，也就是选择器中每增加一项就会降低一级别的优先级。如果两个选择器的优先级相同，则后面的选择器优先级更高。\n\n### 请阐述块格式化上下文（Block Formatting Context）、工作原理以及形成条件？\n\n块格式化上下文（Block Formatting Context，BFC）是一个独立的渲染区域，在这个区域内，元素的布局和外部元素互不影响。BFC 是 Web 页面布局中的一种重要机制，主要用于控制块级元素的布局及其内部元素的排列方式。\n\nBFC 的工作原理：\n\n1. 内部的块级盒子会在垂直方向一个接一个放置。\n2. 块级盒子的垂直间距（margin）会发生折叠。相邻的块级盒子的上下外边距会取最大值，而非相加。\n3. BFC 的区域不会与浮动盒子重叠。在计算布局时，BFC 会考虑浮动元素的占用空间，从而避免与浮动元素重叠。\n4. 计算 BFC 的高度时，浮动元素也参与计算。\n5. BFC 是一个独立的容器，外部元素对其内部元素布局没有影响；同样，BFC 内部元素的布局也不会影响外部元素。\n\n形成 BFC 的条件：\n要创建一个 BFC，需要满足以下条件之一：\n1. 根元素（`<html>`）。\n2. 浮动元素（`float`属性为`left`或`right`）。\n3. 绝对定位元素（`position`属性为`absolute`或`fixed`）。\n4. 内联块（`display`属性为`inline-block`）。\n5. 表格单元格（`display`属性为`table-cell`）。\n6. 表格标题（`display`属性为`table-caption`）。\n7. 匿名表格单元格（`display`属性为`table`、`table-row`、`table-row-group`、`table-header-group`、`table-footer-group`、`table-column`、`table-column-group`）。\n8. 元素的`overflow`属性值不为`visible`（例如，`auto`、`scroll`、`hidden`）。\n9. 弹性盒子（`display`属性为`flex`或`inline-flex`）。\n10. 网格容器（`display`属性为`grid`或`inline-grid`）。\n11. 多列容器（`column-count`或`column-width`属性不为`auto`）。\n12. `contain`属性值为`layout`、`paint`或`strict`。\n\n通过满足以上条件之一，可以创建 BFC，实现独立渲染区域。在实际应用中，BFC 有助于解决外边距折叠、浮动元素引起的布局问题等。\n\n### 请阐述 z-index 属性，并说明如何形成层叠上下文（stacking context）\n\n`z-index`属性是 CSS 中用于控制元素在页面中的堆叠顺序（即在 z 轴上的顺序）的属性。具有较高`z-index`值的元素会覆盖较低`z-index`值的元素。需要注意的是，`z-index`属性只适用于具有定位属性（`position`属性值为`relative`、`absolute`或`fixed`）的元素。\n\n层叠上下文（Stacking Context）是一个抽象概念，它定义了一个元素在 z 轴上的层次。在同一个层叠上下文中，元素的堆叠顺序由`z-index`属性控制。层叠上下文可以嵌套，形成一个层叠上下文树。层叠上下文解决了多个元素重叠时的优先级显示。\n\n形成层叠上下文的条件：\n\n1. 根元素（`<html>`）。\n2. `z-index`值不为`auto`的定位元素（`position`属性值为`relative`、`absolute`或`fixed`）。\n3. `z-index`值不为`auto`的弹性盒子（`display`属性值为`flex`或`inline-flex`）的直接子元素。\n4. `z-index`值不为`auto`的网格容器（`display`属性值为`grid`或`inline-grid`）的直接子元素。\n5. `opacity`属性值小于 1 的元素。\n6. `transform`属性值不为`none`的元素。\n7. `filter`属性值不为`none`的元素。\n8. `perspective`属性值不为`none`的元素。\n9. `will-change`属性值指定了任意形成层叠上下文的属性的元素。\n10. `contain`属性值为`paint`或`strict`的元素。\n11. `mix-blend-mode`属性值不为`normal`的元素。\n12. `isolation`属性值为`isolate`的元素。\n\n满足以上任意条件之一的元素都会创建一个新的层叠上下文。在层叠上下文中，元素会根据其`z-index`值和其他因素进行堆叠。层叠上下文有助于更好地控制元素的堆叠顺序，解决元素覆盖和遮挡的问题。\n\n### CSS 有哪些继承属性？\n\n1. 文本和字体相关属性：\n   - `color`\n   - `font-family`\n   - `font-size`\n   - `font-weight`\n   - `font-style`\n   - `font-variant`\n   - `letter-spacing`\n   - `line-height`\n   - `text-align`\n   - `text-indent`\n   - `text-transform`\n   - `white-space`\n   - `word-spacing`\n2. 列表样式相关属性：\n   - `list-style-type`\n   - `list-style-position`\n   - `list-style-image`\n3. 表格布局相关属性：\n   - `border-collapse`\n   - `border-spacing`\n   - `caption-side`\n   - `empty-cells`\n   - `table-layout`\n4. 其他可继承属性：\n   - `visibility`\n   - `cursor`\n   - `quotes`\n   - `text-decoration`\n   - `text-shadow`\n   - `word-break`\n   - `word-wrap`\n   - `writing-mode`\n   - `direction`\n\n### 有哪些清除浮动的技术，都适用哪些情况？\n\n1. 使用`clear`属性： 在浮动元素后添加一个空元素，然后使用 CSS 的`clear`属性来清除浮动。适用于简单布局和较早的浏览器版本。\n\n   ```css\n   <div style="float: left;">...</div>\n   <div style="clear: both;"></div>\n   ```\n\n2. 父元素使用`overflow`属性： 为父元素添加`overflow: auto`或`overflow: hidden`属性。此方法可以使父元素自动计算其高度，包括浮动元素。适用于不需要显示滚动条的布局。\n\n   ```css\n   .container {\n   \toverflow: auto;\n   }\n   ```\n\n3. 使用伪元素`::after`： 为父元素添加`::after`伪元素，并设置`clear: both`。这种方法不需要额外的 HTML 元素。适用于现代浏览器和简洁的 HTML 结构。\n\n   ```css\n   .container::after {\n   \tcontent: "";\n   \tdisplay: table;\n   \tclear: both;\n   }\n   ```\n\n4. 使用 Flexbox 布局： 将父元素的`display`属性设置为`flex`。这会使所有子元素成为弹性项，并且不再需要清除浮动。适用于现代浏览器和需要使用弹性布局的场景。\n\n   ```css\n   .container {\n   \tdisplay: flex;\n   }\n   ```\n\n5. 使用 Grid 布局： 将父元素的`display`属性设置为`grid`。这会使所有子元素成为网格项，并且不再需要清除浮动。适用于现代浏览器和需要使用网格布局的场景。\n\n   ```css\n   .container {\n   \tdisplay: grid;\n   }\n   ```\n\n在实际项目中，选择哪种清除浮动的技术取决于项目的具体需求、浏览器兼容性和布局类型。现代项目通常更倾向于使用 Flexbox 或 Grid 布局来解决浮动问题。\n\n### 响应式布局有哪些\n\n响应式布局是一种使网站能够自动适应不同屏幕尺寸和设备类型的设计方法。以下是一些常见的响应式布局技术：\n\n1. 流式布局（Fluid Layout）： 使用百分比来定义元素的宽度，使元素随浏览器窗口大小变化而自动调整宽度。这种布局可以在一定程度上适应不同屏幕尺寸，但在极小或极大屏幕上可能无法提供最佳用户体验。\n2. 弹性布局（Flexible Layout）： 使用 CSS3 中的弹性盒子（Flexbox）布局模型，可以轻松创建自适应大小和顺序的布局。弹性布局可以根据屏幕尺寸自动调整元素的大小和排列，提供更好的响应式体验。\n3. 网格布局（Grid Layout）： 使用 CSS3 中的网格布局（Grid）模型，可以创建复杂的二维布局。网格布局允许在水平和垂直方向上自由排列和调整元素，从而实现高度自适应的响应式设计。\n4. 媒体查询（Media Queries）： 使用 CSS3 的媒体查询功能，可以针对不同屏幕尺寸、分辨率和设备类型应用特定的样式。结合流式布局、弹性布局和网格布局，媒体查询可以实现更精确和全面的响应式设计。\n5. 自适应图片（Responsive Images）： 使用`srcset`、`sizes`属性和`<picture>`元素，可以让浏览器根据设备像素比（DPR）和屏幕尺寸选择合适的图片资源。这样可以在不同设备上加载适当大小的图片，提高性能并保持视觉效果。\n6. 移动优先设计（Mobile-first Design）： 从移动设备的视角开始设计，然后逐步扩展到平板和桌面设备。这种设计方法强调简单、清晰和高效，可以提高跨设备的用户体验。\n\n在实际项目中，通常会综合运用以上技术来实现响应式布局。这些技术可以使网站在不同设备和屏幕尺寸下保持良好的用户体验和视觉效果。\n\n### 讲一下三栏布局实现？圣杯布局、双飞翼布局和 flex 布局\n\n三栏布局是指一个网页由三个栏目组成的布局，分别是左栏、右栏和中间栏。下面是三种实现三栏布局的方法：\n\n1. 圣杯布局\n\n圣杯布局是一种使用浮动和负边距实现的三栏布局。中间栏先放在 html 结构中，使用负边距将左右栏移动到中间栏的两侧，再使用相对定位将左右栏拉回原来的位置。这种布局可以使得中间栏优先渲染，兼顾 SEO 和用户体验。\n\n1. 双飞翼布局\n\n双飞翼布局也是一种使用浮动和负边距实现的三栏布局。与圣杯布局不同的是，左右栏使用 margin 负值撑开中间栏的宽度。这种布局与圣杯布局相比，代码更简单易懂。\n\n1. Flex 布局\n\nFlex 布局是 CSS3 引入的一种新的布局方式，通过 flex 容器和 flex 项目的属性设置，可以轻松实现三栏布局。设置左右栏的宽度为固定值，中间栏的宽度使用 flex-grow 属性自动填充。这种布局适用于移动端和 PC 端，具有响应式的特点。\n\n### 使用过哪些 CSS 预处理器？它们有什么优劣？\n\nLess 和 Sass 这两个常见的 CSS 预处理器。它们的优势是可以使用变量、嵌套规则和函数等功能，可以更简单更高效地编写 CSS 代码。缺点是需要进行额外的预处理工作，增加了开发成本。\n\n### 如何解决 CSS 样式在不同浏览器中的兼容性问题？\n\n解决 CSS 样式在不同浏览器中的兼容性问题可以使用一些通用的方法，如使用 CSS Reset，避免使用 CSS Hack 和浏览器前缀，使用标准的组件库，尽量使用标准的 CSS 属性和属性值等。\n\n### 如何制作一个自适应的正方形？\n\n在外层容器内创建一个正方形元素，并设置`padding-bottom`为 100%。这里的关键是`padding-bottom`以父元素的宽度为基准计算，因此当设置为 100%时，它将等于父元素的宽度，从而保证正方形的宽高相等。\n\n```html\n<div class="square-container">\n\t<div class="square"></div>\n</div>\n```\n\n```css\n.square {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\tpadding-bottom: 100%; /* 确保正方形的高度等于宽度 */\n\tbackground-color: #f00; /* 设置背景颜色以便观察效果 */\n}\n```\n\n### 讲讲 margin 塌陷和 margin 合并以及解决方案？\n\n**margin 塌陷** 和 **margin 合并** 都是 CSS 中描述 margin 行为的术语。它们分别指 margin 在不同场景下的特殊表现。\n\n1. **Margin 塌陷**：Margin 塌陷是指当一个元素的上外边距（margin-top）和相邻的另一个元素的下外边距（margin-bottom）相遇时，它们之间的距离实际上等于两个外边距中的较大值，而不是它们的总和。这种现象主要发生在具有相邻兄弟元素的块级元素之间。\n2. **Margin 合并**：Margin 合并是指在父子元素之间发生的现象。当一个元素的外边距与其父元素的外边距相遇时，它们之间的距离实际上等于两个外边距中的较大值，而不是它们的总和。Margin 合并通常发生在没有边框、内边距或行内内容分隔的父元素与其第一个或最后一个子元素之间。\n\n解决方案：\n\n针对 margin 塌陷和合并的现象，有以下几种解决方案：\n\n1. **使用内边距（padding）**：如果适用，可以使用内边距代替外边距来调整元素之间的距离。内边距不会发生塌陷或合并。\n2. **添加边框（border）或内边距（padding）**：在父子元素间的 margin 合并问题上，可以通过给父元素添加一个边框或一个很小的内边距来阻止 margin 合并。\n3. **使用 BFC（块格式化上下文）**：创建一个新的 BFC（如通过设置 `overflow` 属性为 `auto` 或 `hidden`）可以防止父子元素间的 margin 合并。\n4. **使用伪元素**：可以通过在两个相邻的兄弟元素之间插入一个透明的伪元素（如 `::before` 或 `::after`），并为其添加 `display: inline-block;` 属性来防止兄弟元素间的 margin 塌陷。\n5. **避免使用外边距**：在某些情况下，可以使用其他布局技术（如 Flexbox 或 Grid）来调整元素之间的距离，从而避免 margin 塌陷和合并的问题。\n\n了解 margin 塌陷和合并现象以及如何解决这些问题可以帮助你更好地控制布局和元素间距。\n\n### 如何实现一个三角形？\n\n使用 CSS 创建一个三角形的常见方法是利用边框（border）属性。具体操作如下：\n\n1. 首先，创建一个宽高为 0 的元素（如 `div`），这样它的内容区域将不占据任何空间。\n2. 为该元素设置透明边框，这样它的边框也不会显示出来。\n3. 根据你需要的三角形方向，设置一个边框颜色，使该边框变得可见。\n\n以下是一个创建向上的三角形的示例：\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n\t<head>\n\t\t<meta charset="UTF-8" />\n\t\t<meta name="viewport" content="width=device-width, initial-scale=1.0" />\n\t\t<style>\n\t\t\t.triangle {\n\t\t\t\twidth: 0;\n\t\t\t\theight: 0;\n\t\t\t\tborder-left: 50px solid transparent;\n\t\t\t\tborder-right: 50px solid transparent;\n\t\t\t\tborder-bottom: 100px solid red;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class="triangle"></div>\n\t</body>\n</html>\n```\n\n在这个示例中，我们创建了一个名为 `.triangle` 的 `div` 元素。我们将其宽度和高度设置为 0，然后为其添加了左、右和底边框。左右边框设置为透明，底边框设置为红色。这将创建一个向上的红色三角形。\n\n### 如何画一条 0.5px 的线\n\n要在屏幕上绘制一条 0.5px 的线，可以使用 CSS 的伪元素 `::before` 或 `::after`，并设置它们的尺寸和缩放（scale）。以下是一个绘制 0.5px 水平线的示例：\n\n```css\n.half-pixel-line {\n\tposition: relative;\n\tdisplay: inline-block;\n\twidth: 100%;\n\theight: 1px;\n}\n\n.half-pixel-line::before {\n\tcontent: "";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 1px;\n\tbackground-color: black;\n\ttransform-origin: left top;\n\ttransform: scaleY(0.5);\n}\n```\n\n### 视差滚动效果的原理？\n\n视差滚动效果（Parallax Scrolling）是一种视觉设计技巧，通过在页面滚动时以不同速度移动前景和背景元素，从而产生深度感和动态效果。这种效果可以使网页看起来更有趣、更具吸引力。\n\n视差滚动效果的原理在于，当用户滚动页面时，页面上的不同元素（例如前景、背景、文字等）以不同的速度移动。这些速度差使得靠近观察者的元素（前景）看起来移动得更快，而远离观察者的元素（背景）看起来移动得更慢。这种相对运动产生了一种错觉，使用户感觉到页面的不同部分之间有深度关系，从而增强了视觉体验。\n\n要实现视差滚动效果，可以使用以下方法之一：\n\n1. **纯 CSS 方法**：利用 CSS3 的 `background-attachment` 属性设置为 `fixed`。这种方法简单易实现，但仅适用于背景图像，并且在某些浏览器或设备上可能存在兼容性问题。\n2. **JavaScript 方法**：通过监听页面滚动事件，根据滚动位置动态调整元素的位置。这种方法更灵活，可以应用于任何元素，并且可以实现更复杂的视差效果。通常使用 JavaScript 库（如 Rellax.js、Parallax.js 等）来简化开发过程。\n\n需要注意的是，过多或不合适的视差滚动效果可能会导致页面性能下降、用户体验受损，因此在实现视差滚动效果时要保持适度。\n### 24.display:none和visibility:hidden的区别？\n\ndisplay:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。  \nvisibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间\n### 16、常见的盒子垂直居中的方法有哪些请举例 3 种？\n\n```\n// 1. 利用子绝父相定位的方式来实现\n#container {\n  width: 500px;\n  height: 500px;\n  position: relative;\n}\n#center {\n  width: 100px;\n  hight: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -50px;\n  margin-left: -50px;\n}\n\n// 2. 利用 Css3 的 transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中。\n\n#container {\n  position: relative;\n}\n#center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n// 3. flex\n#container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n#center {\n}\n```\n\n### 31、清除浮动的方法有哪些？\n为什么要清除浮动，因为浮动的盒子脱离标准流，如果父盒子没有设置高度的话，下面的盒子就会撑上 来。\n\n1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置 clear：both；）（不推荐）\n\n2.父级添加 overflow 属性（父元素添加 overflow:hidden）（不推荐）\n\n3.使用 after 伪元素清除浮动（推荐使用）\n\n```\n.clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/\n  content: "";\n  display: block;\n  height: 0;\n  clear:both;\n  visibility: hidden;\n}\n.clearfix{\n  *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/\n｝\n```\n\n4.使用 before 和 after 双伪元素清除浮动\n\n```\n.clearfix:after,\n.clearfix:before {\n  content: \'\';\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix {\n  *zoom: 1;\n}\n```\n\n### 32、常见的布局方法有哪些？他们的优缺点是什么？\n页面布局常用的方法有浮动、定位、flex、grid 网格布局、栅格系统布局\n\n浮动： 优点：兼容性好。 缺点：浮动会脱离标准文档流，因此要清除浮动。我们解决好这个问题即可。\n\n绝对定位 优点：快捷。 缺点：导致子元素也脱离了标准文档流，可实用性差。\n\nflex 布局（CSS3 中出现的） 优点：解决上面两个方法的不足，flex 布局比较完美。移动端基本用 flex 布局。\n\n网格布局（grid） CSS3 中引入的布局，很好用。代码量简化了很多。\n\n利用网格布局实现的一个左右 300px 中间自适应的布局\n\n```\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Document</title>\n    <style>\n      html * {\n        padding: 0;\n        margin: 0;\n      }\n      /* 重要：设置容器为网格布局，宽度为100% */\n      .layout.grid .left-center-right {\n        display: grid;\n        width: 100%;\n        grid-template-rows: 100px;\n        grid-template-columns: 300px auto 300px; /* 重要：设置网格为三列，\n\t并设置每列的宽度。即可。*/\n      }\n      .layout.grid .left {\n        background: red;\n      }\n      .layout.grid .center {\n        background: green;\n      }\n      .layout.grid .right {\n        background: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <section class="layout grid">\n      <article class="left-center-right">\n        <div class="left">我是 left</div>\n        <div class="center">\n          <h1>网格布局解决方案</h1>\n          我是 center\n        </div>\n        <div class="right">我是 right</div>\n      </article>\n    </section>\n  </body>\n</html>\n```\n\n栅格系统布局 优点：可以适用于多端设备\n### 40、谈谈盒子模型？\n在标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。\n\n增加内边距、边框和外边距不会 影响内容区域的尺寸，但是会增加元素框的总尺寸。\n\nIE 盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。\n\n盒子模型是css技术所使用的一种思维模型。盒子模型是指将网页设计页面中的内容元素看作一个个装了东西的矩形盒子。每个矩形盒子都由内容、内边距、边框和外边距4个部分组成。除去内容部分，其余每个部分又分别包含上、下、左和右4个方向，方向既可以分别定义也可以统一定义。\n\n我们生活中常见的手机盒子就可以看作一个盒子模型，完整的手机盒子通常包含手机、内填充物和盛装手机的外壳。如果把手机想象成HTML标记，那么手机盒子就是一个CSS盒子模型。内容就是盒子里装的手机；内边距就是怕手机损坏得填充物：边框就是盒子本身外部的壳；外边距就是多个手机盒子排放时空的缝隙。\n\n标记\n\ndiv英文全称为division，译为中文是“分割、区域”。标记简单而言就是一个块标记，可以实现网页的规划和布局。在HTML文档中，页面会被划分为很多区域，不同区域显示不同的内容，如导航栏、banner、内容区等，这些区块一般都通过标记可以在div标记中设置外边距、内边距、宽和高，同时内部可以容纳段落、标题、表图像等各种网页元素，也就是说大多数HTML标记都可以嵌套在标记中，中还可以嵌套多层。标记非常强大，通过与id、class等属性结合设置CSS样式，可以替代大多数的块级文本标记。\n\n盒子的宽与高\n\n网页是由多个盒子排列而成的，每个盒子都有固定的大小，在CSS中使用宽度属性widh和高度属性height控制盒子的大小。widh和height属性值可以是不同单位的数值或相对于父标记的百分比，实际工作中，最常用的属性值是像素值。\n\n相关阅读：什么是实体化三属性？\n\n实体化是指给标记划分区域(画盒子)，并通过宽度、高度、背景色这三种属性，让标记形态化，成为一个盒子。需要注意的是，宽度属性wdh和高度属性height仅适用于块级元素，对行内元素无效（和标记除外）。\n\n### 15. 前端标准 px和em的区别？\n\npx和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。  \n浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em\n### 48、BFC 是什么？\nBFC（块级格式化上下文），一个创建了新的 BFC 的盒子是独立布局的，盒子内元素的布局不会影响盒 子外面的元素。在同一个 BFC 中的两个相邻的盒子在垂直方向发生 margin 重叠的问题。\nBFC 是值浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布 局，这个渲染区域只对块级元素起作用\n1：概念 在⻚⾯布局的过程中，我们经常会遇到⼀些奇怪的情况，⽐如元素的⾼度消失了、两栏布局⽆法⾃适应、元素间距出现异常等等。这些问题往往是由于元素之间相互影响⽽导致的。在这⾥，就涉及到了BFC 的概念。  \nBFC（块级格式化上下⽂）是⻚⾯中⼀块独⽴的渲染区域，具有⼀套独⽴的渲染规则：内部的盒⼦会在垂直⽅向上⼀个接⼀个地放置。  \n同⼀个BFC的相邻盒⼦的m a r g in会发⽣重叠，与⽅向⽆关。  \n每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此。BFC的区域不会与floa t的元素区域重叠。  \n计算BFC的⾼度时，浮动⼦元素也参与计算。  \nBFC是⻚⾯上的⼀个隔离的独⽴容器，容器⾥⾯的⼦元素不会影响到外⾯的元素，反之亦然。  \nBFC的⽬的是形成⼀个相对于外界完全独⽴的空间，使内部的⼦元素不会影响到外部的元素\n\n2：触发条件  \n触发BFC的条件包含但不限于：  \n根元素，即HTML元素  \n浮动元素：floa t值为left、right  \nov e rflow值不为visibl e，为auto、s croll、hidden  \ndispl ay的值为inline -block、inline -t abl e、t abl e - ce ll、t abl e - caption、flex、inline -  \nfle x、grid、inline - grid position的值为absolut e或fix ed'}function compiledContent(){return html}function getHeadings(){return[{depth:3,slug:"css-属性是否区分大小写",text:"CSS 属性是否区分大小写？#"},{depth:3,slug:"css-的盒模型",text:"CSS 的盒模型?#"},{depth:3,slug:"link-与import-的区别",text:"link 与@import 的区别#"},{depth:3,slug:"元素垂直居中的方式有哪些",text:"元素垂直居中的方式有哪些？#"},{depth:3,slug:"文本垂直居中的方式有哪些",text:"文本垂直居中的方式有哪些？#"},{depth:3,slug:"css-选择器的优先级是如何计算的",text:"CSS 选择器的优先级是如何计算的？#"},{depth:3,slug:"请阐述块格式化上下文block-formatting-context工作原理以及形成条件",text:"请阐述块格式化上下文（Block Formatting Context）、工作原理以及形成条件？#"},{depth:3,slug:"请阐述-z-index-属性并说明如何形成层叠上下文stacking-context",text:"请阐述 z-index 属性，并说明如何形成层叠上下文（stacking context）#"},{depth:3,slug:"css-有哪些继承属性",text:"CSS 有哪些继承属性？#"},{depth:3,slug:"有哪些清除浮动的技术都适用哪些情况",text:"有哪些清除浮动的技术，都适用哪些情况？#"},{depth:3,slug:"响应式布局有哪些",text:"响应式布局有哪些#"},{depth:3,slug:"讲一下三栏布局实现圣杯布局双飞翼布局和-flex-布局",text:"讲一下三栏布局实现？圣杯布局、双飞翼布局和 flex 布局#"},{depth:3,slug:"使用过哪些-css-预处理器它们有什么优劣",text:"使用过哪些 CSS 预处理器？它们有什么优劣？#"},{depth:3,slug:"如何解决-css-样式在不同浏览器中的兼容性问题",text:"如何解决 CSS 样式在不同浏览器中的兼容性问题？#"},{depth:3,slug:"如何制作一个自适应的正方形",text:"如何制作一个自适应的正方形？#"},{depth:3,slug:"讲讲-margin-塌陷和-margin-合并以及解决方案",text:"讲讲 margin 塌陷和 margin 合并以及解决方案？#"},{depth:3,slug:"如何实现一个三角形",text:"如何实现一个三角形？#"},{depth:3,slug:"如何画一条-05px-的线",text:"如何画一条 0.5px 的线#"},{depth:3,slug:"视差滚动效果的原理",text:"视差滚动效果的原理？#"},{depth:3,slug:"24displaynone和visibilityhidden的区别",text:"24.display:none和visibility:hidden的区别？#"},{depth:3,slug:"16常见的盒子垂直居中的方法有哪些请举例-3-种",text:"16、常见的盒子垂直居中的方法有哪些请举例 3 种？#"},{depth:3,slug:"31清除浮动的方法有哪些",text:"31、清除浮动的方法有哪些？#"},{depth:3,slug:"32常见的布局方法有哪些他们的优缺点是什么",text:"32、常见的布局方法有哪些？他们的优缺点是什么？#"},{depth:3,slug:"40谈谈盒子模型",text:"40、谈谈盒子模型？#"},{depth:3,slug:"15-前端标准-px和em的区别",text:"15. 前端标准 px和em的区别？#"},{depth:3,slug:"48bfc-是什么",text:"48、BFC 是什么？#"}]}const Content=createComponent(((n,s,a)=>{const{layout:e,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};