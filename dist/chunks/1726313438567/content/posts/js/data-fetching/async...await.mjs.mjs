import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="async-await-syntactical-sugar">Async… await (Syntactical Sugar)<a class="anchor" href="#async-await-syntactical-sugar"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p><a href="https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&#x26;vd_source=be278a4cfd00a5f72dcf153eaca79333">[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp</a><br>\n<a href="https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/">FreeCodeCamp-Blog</a></p>\n</blockquote>\n<p>Better way to write <strong>promises</strong> and it helps us keep our code simple and clean<br>\nasync await 是es7里面的新语法、它的作用就是 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。它可以很好的替代 promise 中的 then<br>\nasync 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇 到 await 就会先返回， 等到异步操作完成，再接着执行函数体内后面的语句。</p>\n<h4 id="1-before-asyncawait">1. Before async/await<a class="anchor" href="#1-before-asyncawait"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// Write code here</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="2-with-asyncawait">2. With async/await<a class="anchor" href="#2-with-asyncawait"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">//👇 the magical keyword</span></span>\n<span class="line"><span style="color:#F97583">async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#6A737D">\t// Write code here</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="3-how-to-use-trycatch">3. How to use try/catch?<a class="anchor" href="#3-how-to-use-trycatch"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h5 id="31-promises-in-js---resolve-or-reject">3.1. Promises in JS -> resolve or reject<a class="anchor" href="#31-promises-in-js---resolve-or-reject"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> kitchen</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tresolve</span><span style="color:#E1E4E8">(promise is fulfilled);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\treject</span><span style="color:#E1E4E8">(error caught here);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#B392F0">kitchen</span><span style="color:#E1E4E8">() </span><span style="color:#6A737D">// run the code</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">() </span><span style="color:#6A737D">// next step</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">() </span><span style="color:#6A737D">// next step</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">() </span><span style="color:#6A737D">// error caught here</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">finally</span><span style="color:#E1E4E8">(); </span><span style="color:#6A737D">// end of the promise [optional]</span></span>\n<span class="line"></span></code></pre>\n<h5 id="32-async--await-in-js---try-catch">3.2. Async / Await in JS -> try, catch<a class="anchor" href="#32-async--await-in-js---try-catch"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">//👇 Magical keyword</span></span>\n<span class="line"><span style="color:#F97583">async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> kitchen</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\ttry</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// Let\'s create a fake problem</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#E1E4E8"> abc;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(abc does not exist, error);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">finally</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Runs code anyways);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#B392F0">kitchen</span><span style="color:#E1E4E8">(); </span><span style="color:#6A737D">// run the code</span></span>\n<span class="line"></span></code></pre>\n<h4 id="4-how-to-use-await-keyword">4. How to use <code>await</code> Keyword?<a class="anchor" href="#4-how-to-use-await-keyword"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>The keyword <code>await</code> makes JavaScript <strong>wait</strong> until a promise settles and returns its result.</p>\n<h5 id="41-promise---choice">4.1. Promise - choice<a class="anchor" href="#41-promise---choice"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> toppings_choice</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tresolve</span><span style="color:#E1E4E8">(console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(which topping would you love</span><span style="color:#F97583">?</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}, </span><span style="color:#79B8FF">3000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h5 id="42-asyncawait---kitchen--other-tasks">4.2. Async/await - kitchen &#x26; other tasks<a class="anchor" href="#42-asyncawait---kitchen--other-tasks"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> kitchen</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">A</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">B</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">C</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tawait</span><span style="color:#B392F0"> toppings_choice</span><span style="color:#E1E4E8">(); </span><span style="color:#6A737D">//We are literally going outside our kitchen to ask our customer, what is your topping choice?</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">\t// In the mean time, other things outside the kitchen still get done.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">\t// Once, we get their topping choice, we enter the kitchen and finish the job.</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">D</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">E</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// Trigger the function</span></span>\n<span class="line"><span style="color:#B392F0">kitchen</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#6A737D">// Other Tasks</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(doing the dishes);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(cleaning the tables);</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(taking orders);</span></span>\n<span class="line"></span></code></pre>\n<h5 id="43-output-results">4.3. Output results<a class="anchor" href="#43-output-results"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<p><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221209200813.png" alt=""></p>\n<h4 id="5-asyncawait-example-icecream">5. Async/await Example (Icecream)<a class="anchor" href="#5-asyncawait-example-icecream"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h5 id="51-create-promise--time-function">5.1. Create Promise — time function<a class="anchor" href="#51-create-promise--time-function"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// First, open our shop</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> is_shop_open </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">// Create a time function, which return a Promise</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">ms</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (is_shop_open) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tsetTimeout</span><span style="color:#E1E4E8">(resolve, ms);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\treject</span><span style="color:#E1E4E8">(console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Shop is closed));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h5 id="52-create-async-function--kitchen">5.2. Create Async Function — kitchen<a class="anchor" href="#52-create-async-function--kitchen"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> kitchen</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#F97583">\ttry</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">Fruits</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} was selected`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(production has started);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(fruit has been chopped);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} and ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} added`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(start the machine);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`ice cream placed on ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">holder</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">toppings</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} as toppings`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tawait</span><span style="color:#B392F0"> time</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Serve Ice Cream);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(customer left);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">finally</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Day ended, shop closed);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// Trigger</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">S1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">kitchen</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">S2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="6-more-examples">6. More Examples<a class="anchor" href="#6-more-examples"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h5 id="61-example---async-await">6.1. Example - async-await<a class="anchor" href="#61-example---async-await"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// Basic</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#B392F0"> getFruit</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">name</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> fruits</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tpineapple: 🍍,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tpeach: 🍑,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tstrawberry: 🍓,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t};</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> fruits[name];</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#B392F0">getFruit</span><span style="color:#E1E4E8">(peach).</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(console.log);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">// Async + Await</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#B392F0"> makeSmoothie</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> a</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(pineapple);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> b</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(strawberry);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> [a, b];</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> makeSmoothie2</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> a;</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(pineapple)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">v</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\ta </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> v;</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(strawberry);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">v</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> [a, v]);</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h5 id="62-example---concurrency">6.2. Example - concurrency<a class="anchor" href="#62-example---concurrency"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { getFruit } </span><span style="color:#F97583">from</span><span style="color:#E1E4E8"> ./3.1. Example - async-await;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> makeSmoothieFaster</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> a</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(pineapple);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> b</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(strawberry);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> smoothie</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">all</span><span style="color:#E1E4E8">([a, b]);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> smoothie;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> fruitRace</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> a</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(pineapple);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> b</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(strawberry);</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> winner</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">race</span><span style="color:#E1E4E8">([a, b]);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> winner;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#6A737D">// fruitRace().then(log)</span></span>\n<span class="line"><span style="color:#6A737D">// fruitRace().then(log)</span></span>\n<span class="line"><span style="color:#6A737D">// fruitRace().then(log)</span></span>\n<span class="line"><span style="color:#6A737D">// fruitRace().then(log)</span></span>\n<span class="line"><span style="color:#6A737D">// fruitRace().then(log)</span></span>\n<span class="line"></span></code></pre>\n<h5 id="63-example---error-handling">6.3. Example - error-handling<a class="anchor" href="#63-example---error-handling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { getFruit } </span><span style="color:#F97583">from</span><span style="color:#E1E4E8"> ./3.1. Example - async-await;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> badSmoothie</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\ttry</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> a</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(pineapple);</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> b</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(strawberry);</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> smoothie</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">all</span><span style="color:#E1E4E8">([a, b]);</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#E1E4E8"> broken</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> smoothie;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t} </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(err);</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// return `😬 We are going to be fine...`</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#9ECBFF"> `💩 It\'s broken!`</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h5 id="64-example---await-in-loop-and-conditionals">6.4. Example - await in loop and conditionals<a class="anchor" href="#64-example---await-in-loop-and-conditionals"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { getFruit } </span><span style="color:#F97583">from</span><span style="color:#E1E4E8"> ./3.1. Example - async-await;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> fruits</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [peach, pineapple, strawberry];</span></span>\n<span class="line"><span style="color:#6A737D">// Use for loop</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> fruitLoop</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#79B8FF"> f</span><span style="color:#F97583"> of</span><span style="color:#E1E4E8"> fruits) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tconst</span><span style="color:#79B8FF"> emoji</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(f);</span></span>\n<span class="line"><span style="color:#B392F0">\t\tlog</span><span style="color:#E1E4E8">(emoji);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#6A737D">// Use for loop, to run concurrently</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> smoothie</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> fruits.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">f</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(f));</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> fruitLoop</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#79B8FF"> emoji</span><span style="color:#F97583"> of</span><span style="color:#E1E4E8"> smoothie) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tlog</span><span style="color:#E1E4E8">(emoji);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#6A737D">// Use map method, to run concurrently</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> fruitloop</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> fruits.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">async</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">v</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> emoji</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(f);</span></span>\n<span class="line"><span style="color:#B392F0">\tlog</span><span style="color:#E1E4E8">(emoji);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> emoji;</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> fruitInspection</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tif</span><span style="color:#E1E4E8"> ((</span><span style="color:#F97583">await</span><span style="color:#B392F0"> getFruit</span><span style="color:#E1E4E8">(peach)) </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> 🍑) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(looks peachy</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> fetch </span><span style="color:#F97583">from</span><span style="color:#E1E4E8"> node-fetch;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> getTodo</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> res</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//jsonplaceholder.typicode.com/todos/1);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconst { title, userId, body } </span><span style="color:#F97583">=</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> res.</span><span style="color:#B392F0">json</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(title, userId, body);</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,tags:["JavaScript"],Datereviewed:null,reviewed:null,difficulty:null,comment:null,aliases:["Async... await (Syntactical Sugar)"],title:"Async... await (Syntactical Sugar)",type:"D",DateStarted:"2022-12-09T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:null,topic:["Async"],"linter-yaml-title-alias":"Async... await (Syntactical Sugar)",category:"Programming",minutes:4,words:870},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/data-fetching/async...await.md",url=void 0;function rawContent(){return"\n# Async... await (Syntactical Sugar)\n\n> [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)  \n> [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\nBetter way to write **promises** and it helps us keep our code simple and clean  \nasync await 是es7里面的新语法、它的作用就是 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。它可以很好的替代 promise 中的 then  \nasync 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇 到 await 就会先返回， 等到异步操作完成，再接着执行函数体内后面的语句。\n#### 1. Before async/await\n\n```javascript\nfunction order() {\n\treturn new Promise((resolve, reject) => {\n\t\t// Write code here\n\t});\n}\n```\n\n#### 2. With async/await\n\n```javascript\n//👇 the magical keyword\nasync function order() {\n\t// Write code here\n}\n```\n\n#### 3. How to use try/catch?\n\n##### 3.1. Promises in JS -> resolve or reject\n\n```javascript\nfunction kitchen() {\n\treturn new Promise((resolve, reject) => {\n\t\tif (true) {\n\t\t\tresolve(promise is fulfilled);\n\t\t} else {\n\t\t\treject(error caught here);\n\t\t}\n\t});\n}\nkitchen() // run the code\n\t.then() // next step\n\t.then() // next step\n\t.catch() // error caught here\n\t.finally(); // end of the promise [optional]\n```\n\n##### 3.2. Async / Await in JS -> try, catch\n\n```javascript\n//👇 Magical keyword\nasync function kitchen() {\n\ttry {\n\t\t// Let's create a fake problem\n\t\tawait abc;\n\t} catch (error) {\n\t\tconsole.log(abc does not exist, error);\n\t} finally {\n\t\tconsole.log(Runs code anyways);\n\t}\n}\nkitchen(); // run the code\n```\n\n#### 4. How to use `await` Keyword?\n\nThe keyword `await` makes JavaScript **wait** until a promise settles and returns its result.\n\n##### 4.1. Promise - choice\n\n```javascript\nfunction toppings_choice() {\n\treturn new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve(console.log(which topping would you love?));\n\t\t}, 3000);\n\t});\n}\n```\n\n##### 4.2. Async/await - kitchen & other tasks\n\n```javascript\nasync function kitchen() {\n\tconsole.log(A);\n\tconsole.log(B);\n\tconsole.log(C);\n\tawait toppings_choice(); //We are literally going outside our kitchen to ask our customer, what is your topping choice?\n\n\t// In the mean time, other things outside the kitchen still get done.\n\n\t// Once, we get their topping choice, we enter the kitchen and finish the job.\n\tconsole.log(D);\n\tconsole.log(E);\n}\n// Trigger the function\nkitchen();\n// Other Tasks\nconsole.log(doing the dishes);\nconsole.log(cleaning the tables);\nconsole.log(taking orders);\n```\n\n##### 4.3. Output results\n\n![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221209200813.png)\n\n#### 5. Async/await Example (Icecream)\n\n##### 5.1. Create Promise -- time function\n\n```js\n// First, open our shop\nlet is_shop_open = true;\n\n// Create a time function, which return a Promise\nfunction time(ms) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (is_shop_open) {\n\t\t\tsetTimeout(resolve, ms);\n\t\t} else {\n\t\t\treject(console.log(Shop is closed));\n\t\t}\n\t});\n}\n```\n\n##### 5.2. Create Async Function -- kitchen\n\n```js\nasync function kitchen() {\n\ttry {\n\t\tawait time(2000);\n\t\tconsole.log(`${stocks.Fruits[0]} was selected`);\n\t\tawait time(0000);\n\t\tconsole.log(production has started);\n\t\tawait time(2000);\n\t\tconsole.log(fruit has been chopped);\n\t\tawait time(1000);\n\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`);\n\t\tawait time(1000);\n\t\tconsole.log(start the machine);\n\t\tawait time(2000);\n\t\tconsole.log(`ice cream placed on ${stocks.holder[1]}`);\n\t\tawait time(3000);\n\t\tconsole.log(`${stocks.toppings[0]} as toppings`);\n\t\tawait time(2000);\n\t\tconsole.log(Serve Ice Cream);\n\t} catch (error) {\n\t\tconsole.log(customer left);\n\t} finally {\n\t\tconsole.log(Day ended, shop closed);\n\t}\n}\n// Trigger\nconsole.log(S1);\nkitchen();\nconsole.log(S2);\n```\n\n#### 6. More Examples\n\n##### 6.1. Example - async-await\n\n```js\n// Basic\nexport const getFruit = async (name) => {\n\tconst fruits = {\n\t\tpineapple: 🍍,\n\t\tpeach: 🍑,\n\t\tstrawberry: 🍓,\n\t};\n\treturn fruits[name];\n};\ngetFruit(peach).then(console.log);\n\n// Async + Await\nexport const makeSmoothie = async () => {\n\tconst a = await getFruit(pineapple);\n\tconst b = await getFruit(strawberry);\n\treturn [a, b];\n};\nconst makeSmoothie2 = () => {\n\tlet a;\n\treturn getFruit(pineapple)\n\t\t.then((v) => {\n\t\t\ta = v;\n\t\t\treturn getFruit(strawberry);\n\t\t})\n\t\t.then((v) => [a, v]);\n};\n```\n\n##### 6.2. Example - concurrency\n\n```js\nimport { getFruit } from ./3.1. Example - async-await;\nconst makeSmoothieFaster = async () => {\n\tconst a = getFruit(pineapple);\n\tconst b = getFruit(strawberry);\n\tconst smoothie = await Promise.all([a, b]);\n\treturn smoothie;\n};\n\nconst fruitRace = async () => {\n\tconst a = getFruit(pineapple);\n\tconst b = getFruit(strawberry);\n\tconst winner = await Promise.race([a, b]);\n\treturn winner;\n};\n// fruitRace().then(log)\n// fruitRace().then(log)\n// fruitRace().then(log)\n// fruitRace().then(log)\n// fruitRace().then(log)\n```\n\n##### 6.3. Example - error-handling\n\n```js\nimport { getFruit } from ./3.1. Example - async-await;\nconst badSmoothie = async () => {\n\ttry {\n\t\tconst a = getFruit(pineapple);\n\t\tconst b = getFruit(strawberry);\n\t\tconst smoothie = await Promise.all([a, b]);\n\t\tthrow broken!;\n\t\treturn smoothie;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\t// return `😬 We are going to be fine...`\n\t\tthrow `💩 It's broken!`;\n\t}\n};\n```\n\n##### 6.4. Example - await in loop and conditionals\n\n```js\nimport { getFruit } from ./3.1. Example - async-await;\nconst fruits = [peach, pineapple, strawberry];\n// Use for loop\nconst fruitLoop = async () => {\n\tfor (const f of fruits) {\n\t\tconst emoji = await getFruit(f);\n\t\tlog(emoji);\n\t}\n};\n// Use for loop, to run concurrently\nconst smoothie = fruits.map((f) => getFruit(f));\nconst fruitLoop = async () => {\n\tfor await (const emoji of smoothie) {\n\t\tlog(emoji);\n\t}\n};\n// Use map method, to run concurrently\nconst fruitloop = fruits.map(async (v) => {\n\tconst emoji = await getFruit(f);\n\tlog(emoji);\n\treturn emoji;\n});\n\nconst fruitInspection = async () => {\n\tif ((await getFruit(peach)) === 🍑) {\n\t\tconsole.log(looks peachy!);\n\t}\n};\n\nimport fetch from node-fetch;\nconst getTodo = async () => {\n\tconst res = await fetch(https://jsonplaceholder.typicode.com/todos/1);\n\tconst { title, userId, body } = await res.json();\n\tconsole.log(title, userId, body);\n};\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"async-await-syntactical-sugar",text:"Async… await (Syntactical Sugar)#"},{depth:4,slug:"1-before-asyncawait",text:"1. Before async/await#"},{depth:4,slug:"2-with-asyncawait",text:"2. With async/await#"},{depth:4,slug:"3-how-to-use-trycatch",text:"3. How to use try/catch?#"},{depth:5,slug:"31-promises-in-js---resolve-or-reject",text:"3.1. Promises in JS -> resolve or reject#"},{depth:5,slug:"32-async--await-in-js---try-catch",text:"3.2. Async / Await in JS -> try, catch#"},{depth:4,slug:"4-how-to-use-await-keyword",text:"4. How to use await Keyword?#"},{depth:5,slug:"41-promise---choice",text:"4.1. Promise - choice#"},{depth:5,slug:"42-asyncawait---kitchen--other-tasks",text:"4.2. Async/await - kitchen & other tasks#"},{depth:5,slug:"43-output-results",text:"4.3. Output results#"},{depth:4,slug:"5-asyncawait-example-icecream",text:"5. Async/await Example (Icecream)#"},{depth:5,slug:"51-create-promise--time-function",text:"5.1. Create Promise — time function#"},{depth:5,slug:"52-create-async-function--kitchen",text:"5.2. Create Async Function — kitchen#"},{depth:4,slug:"6-more-examples",text:"6. More Examples#"},{depth:5,slug:"61-example---async-await",text:"6.1. Example - async-await#"},{depth:5,slug:"62-example---concurrency",text:"6.2. Example - concurrency#"},{depth:5,slug:"63-example---error-handling",text:"6.3. Example - error-handling#"},{depth:5,slug:"64-example---await-in-loop-and-conditionals",text:"6.4. Example - await in loop and conditionals#"}]}const Content=createComponent(((s,n,a)=>{const{layout:o,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};