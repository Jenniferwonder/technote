import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<blockquote>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API - Web APIs | MDN</a></p>\n</blockquote>\n<h2 id="what-is-fetch-api">What is <code>fetch</code> API?<a class="anchor" href="#what-is-fetch-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>Fetch: a built-in function that returns a <a href="Async/Promise">Promise</a> to query URL/API data <strong>async</strong>hronously.</p>\n<ul>\n<li>The <code>fetch()</code> method takes one mandatory argument, the <strong>path</strong> to the resource you want to fetch.</li>\n<li>It returns a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> / <a href="Async/Promise">Promise</a> that resolves to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"><code>Response</code></a> to that request — as soon as the server responds with headers — <strong>even if the server response is an HTTP error status</strong>.</li>\n</ul>\n<h3 id="request">Request<a class="anchor" href="#request"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request">Request() - Web APIs | MDN</a></p>\n</blockquote>\n<p>You can also optionally pass in an <code>init</code> options object as the second argument (see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request"><code>Request</code></a>).</p>\n<h4 id="1-how-to-post-data">1. How to <code>post</code> data?<a class="anchor" href="#1-how-to-post-data"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>set <code>method</code>: <code>\'POST\'</code></li>\n<li>set <code>headers</code>: <code>\'Content-Type\': \'application/json\'</code></li>\n<li>set <code>body</code>: <code>JSON.stringify()</code></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//reqres.in/api/users, {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tmethod: </span><span style="color:#79B8FF">POST</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\theaders: {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tAccept: application</span><span style="color:#F97583">/</span><span style="color:#E1E4E8">json, text/plain, *</span><span style="color:#6A737D">/*,</span></span>\n<span class="line"><span style="color:#6A737D">\t\tContent-Type: application/json,</span></span>\n<span class="line"><span style="color:#6A737D">\t},</span></span>\n<span class="line"><span style="color:#6A737D">\tbody: JSON.stringify({</span></span>\n<span class="line"><span style="color:#6A737D">\t\tname: User 1,</span></span>\n<span class="line"><span style="color:#6A737D">\t}),</span></span>\n<span class="line"><span style="color:#6A737D">});</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>Result:\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210115058.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h3 id="response">Response<a class="anchor" href="#response"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Once a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"><code>Response</code></a> is retrieved, there are a number of methods available to define what the <strong>body</strong> content/ <strong>JSON</strong> is and how it should be handled.</p>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210111900.png" alt=""></li>\n</ul>\n<h4 id="1-convert-the-json-response-to-object">1. Convert the JSON response to Object<a class="anchor" href="#1-convert-the-json-response-to-object"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><code>res.json()</code> returns a <a href="Async/Promise">Promise</a> that <strong>resolves</strong> to an <a href="../object/object">object</a> containing all the JSON data</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210112955.png" alt=""></li>\n</ul>\n<h4 id="2-how-to-handle-http-error-status">2. How to handle HTTP error status?<a class="anchor" href="#2-how-to-handle-http-error-status"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">if</span><span style="color:#E1E4E8"> (res.ok) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">SUCCESS</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">NOT</span><span style="color:#79B8FF"> SUCCESSFUL</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#E1E4E8">res.json;</span></span>\n<span class="line"></span></code></pre>\n<h3 id="optional">Optional<a class="anchor" href="#optional"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>You can create a request and response directly using the [<code>Request()</code>](<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request">https://developer.mozilla.org/en-US/docs/Web/API/Request/Request</a> Request()) and [<code>Response()</code>](<a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/Response">https://developer.mozilla.org/en-US/docs/Web/API/Response/Response</a> Response()) constructors, but it’s uncommon to do this directly.</p>\n<h2 id="how-to-use">How to use?<a class="anchor" href="#how-to-use"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//reqres.in/api/users) // return a Promise</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">res</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(res)); </span><span style="color:#6A737D">// return a Response Object</span></span>\n<span class="line"></span></code></pre>',frontmatter={title:"fetch-api",topic:["Data"],tags:["JavaScript"],type:"D",DateStarted:"2022-12-05T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:null,reviewed:2,status:null,comment:null,difficulty:null,category:"Programming",draft:!1,minutes:1,words:200},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/data-fetching/fetch-api.md",url=void 0;function rawContent(){return"\n> [Fetch API - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n\n## What is `fetch` API?\n\nFetch: a built-in function that returns a [Promise](Async/Promise) to query URL/API data **async**hronously.\n\n- The `fetch()` method takes one mandatory argument, the **path** to the resource you want to fetch.\n- It returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) / [Promise](Async/Promise) that resolves to the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) to that request — as soon as the server responds with headers — **even if the server response is an HTTP error status**.\n\n### Request\n\n> [Request() - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\n\nYou can also optionally pass in an `init` options object as the second argument (see [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)).\n\n#### 1. How to `post` data?\n\n- set `method`: `'POST'`\n- set `headers`: `'Content-Type': 'application/json'`\n- set `body`: `JSON.stringify()`\n\n```js\nfetch(https://reqres.in/api/users, {\n\tmethod: POST,\n\theaders: {\n\t\tAccept: application/json, text/plain, */*,\n\t\tContent-Type: application/json,\n\t},\n\tbody: JSON.stringify({\n\t\tname: User 1,\n\t}),\n});\n```\n\n- Result:\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210115058.png)\n\n### Response\n\nOnce a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) is retrieved, there are a number of methods available to define what the **body** content/ **JSON** is and how it should be handled.\n\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210111900.png)\n\n#### 1. Convert the JSON response to Object\n\n- `res.json()` returns a [Promise](Async/Promise) that **resolves** to an [object](../object/object) containing all the JSON data\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/Pasted-image-20221210112955.png)\n\n#### 2. How to handle HTTP error status?\n\n```js\nif (res.ok) {\n\tconsole.log(SUCCESS);\n} else {\n\tconsole.log(NOT SUCCESSFUL);\n}\nres.json;\n```\n\n### Optional\n\nYou can create a request and response directly using the [`Request()`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request Request()) and [`Response()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response Response()) constructors, but it's uncommon to do this directly.\n\n## How to use?\n\n```js\nfetch(https://reqres.in/api/users) // return a Promise\n\t.then((res) => console.log(res)); // return a Response Object\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:2,slug:"what-is-fetch-api",text:"What is fetch API?#"},{depth:3,slug:"request",text:"Request#"},{depth:4,slug:"1-how-to-post-data",text:"1. How to post data?#"},{depth:3,slug:"response",text:"Response#"},{depth:4,slug:"1-convert-the-json-response-to-object",text:"1. Convert the JSON response to Object#"},{depth:4,slug:"2-how-to-handle-http-error-status",text:"2. How to handle HTTP error status?#"},{depth:3,slug:"optional",text:"Optional#"},{depth:2,slug:"how-to-use",text:"How to use?#"}]}const Content=createComponent(((e,s,n)=>{const{layout:o,...t}=frontmatter;return t.file=file,t.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};