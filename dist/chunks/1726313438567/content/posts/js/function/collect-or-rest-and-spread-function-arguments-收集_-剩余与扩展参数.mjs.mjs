import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="collect-and-spread-function-arguments-收集与扩展参数">Collect and Spread Function Arguments-收集与扩展参数<a class="anchor" href="#collect-and-spread-function-arguments-收集与扩展参数"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p><a href="iteration-and-spread-operators-%E8%BF%AD%E4%BB%A3%E4%B8%8E%E6%89%A9%E5%B1%95%E6%93%8D%E4%BD%9C">Iteration and Spread Operators 迭代与扩展操作</a></p>\n</blockquote>\n<hr>\n<p>Basic</p>\n<h3 id="收集参数-es6">收集参数 (ES6)<a class="anchor" href="#收集参数-es6"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li><code>function ignoreFirst(firstValue, ...values) {</code>\n<ul>\n<li><code>ignoreFirst(1,2);    // [2]</code></li>\n<li>前面如果还有命名参数，则只会收集其余的参数</li>\n<li>如果没有则会得到空数组</li>\n<li>只能把它作为最后一个参数</li>\n</ul>\n</li>\n<li>箭头函数虽然不支持 <code>arguments</code> 对象，但支持收集参数的定义方式\n<ul>\n<li><code>let getSum = (...values) => {   return values.reduce((x, y) =x + y, 0);  }</code></li>\n</ul>\n</li>\n<li>使用收集参数并不影响 <code>arguments</code> 对象<br>\n📌: JS::JS-Function<br>\n🏷️: JS-Function</li>\n</ul>\n\x3c!--ID: 1708066400813--\x3e\n<hr>\n<hr>\n<p>Basic</p>\n<h3 id="扩展参数-es6">扩展参数 (ES6)<a class="anchor" href="#扩展参数-es6"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>案例：实现将所有传入的参数累加起来的函数\n<ul>\n<li><code>console.log(getSum.apply(null, values)); // 10</code></li>\n<li><code>console.log(getSum(...values)); // 10</code></li>\n</ul>\n</li>\n<li>不妨碍在其前面或后面再传其他的值<br>\n_ <code>getSum(-1, ...values)</code><br>\n_ <code>getSum(-1, ...values, 5)</code></li>\n</ul>\n\x3c!--ID: 1708066400824--\x3e\n<hr>',frontmatter={draft:!1,aliases:["Collect and Spread Function Arguments-收集与扩展参数"],title:"Collect and Spread Function Arguments-收集与扩展参数",topic:["Function"],type:"D",tags:["JavaScript"],DateStarted:"2024-02-16T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-02-16T00:00:00.000Z",reviewed:1,difficulty:null,status:null,comment:null,"linter-yaml-title-alias":"Collect and Spread Function Arguments-收集与扩展参数",category:"Programming",minutes:1,words:184},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/function/collect-or-rest-and-spread-function-arguments-收集,-剩余与扩展参数.md",url=void 0;function rawContent(){return"\n# Collect and Spread Function Arguments-收集与扩展参数\n\n> [Iteration and Spread Operators 迭代与扩展操作](iteration-and-spread-operators-迭代与扩展操作)\n\n---\n\nBasic\n\n### 收集参数 (ES6)\n\nBack:\n\n- `function ignoreFirst(firstValue, ...values) {`\n  - `ignoreFirst(1,2);    // [2]`\n  - 前面如果还有命名参数，则只会收集其余的参数\n  - 如果没有则会得到空数组\n  - 只能把它作为最后一个参数\n- 箭头函数虽然不支持 `arguments` 对象，但支持收集参数的定义方式\n  - `let getSum = (...values) => {   return values.reduce((x, y) =x + y, 0);  }`\n- 使用收集参数并不影响 `arguments` 对象  \n📌: JS::JS-Function  \n🏷️: JS-Function\n\x3c!--ID: 1708066400813--\x3e\n\n---\n\n---\n\nBasic\n\n### 扩展参数 (ES6)\n\nBack:\n\n- 案例：实现将所有传入的参数累加起来的函数\n  - `console.log(getSum.apply(null, values)); // 10`\n  - `console.log(getSum(...values)); // 10`\n- 不妨碍在其前面或后面再传其他的值  \n_ `getSum(-1, ...values)`  \n_ `getSum(-1, ...values, 5)`\n\x3c!--ID: 1708066400824--\x3e\n\n---\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"collect-and-spread-function-arguments-收集与扩展参数",text:"Collect and Spread Function Arguments-收集与扩展参数#"},{depth:3,slug:"收集参数-es6",text:"收集参数 (ES6)#"},{depth:3,slug:"扩展参数-es6",text:"扩展参数 (ES6)#"}]}const Content=createComponent(((n,e,t)=>{const{layout:a,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};