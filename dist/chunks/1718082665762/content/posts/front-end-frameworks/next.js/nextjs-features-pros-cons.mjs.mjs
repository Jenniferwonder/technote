import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="nextjs-features-pros--cons">Next.js Features (Pros &#x26; Cons)<a class="anchor" href="#nextjs-features-pros--cons"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="what-is-nextjs">What is Next.js<a class="anchor" href="#what-is-nextjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Next.js is maintained by Vercel.\n<ul>\n<li><a href="https://vercel.com/">https://vercel.com/</a></li>\n</ul>\n</li>\n<li>You can deploy a Next.js app to any Node.js or serverless hosting\n<ul>\n<li><a href="https://nextjs.org/docs/app/building-your-application/deploying">https://nextjs.org/docs/app/building-your-application/deploying</a></li>\n</ul>\n</li>\n<li>Supports a static export which doesn’t require a server\n<ul>\n<li><a href="https://nextjs.org/docs/pages/building-your-application/deploying/static-exports">https://nextjs.org/docs/pages/building-your-application/deploying/static-exports</a></li>\n<li>Next.js is what you would almost call the official React framework</li>\n<li>Only with React, developers need to spend time configuring tools and reinventing solutions for common application requirements.</li>\n</ul>\n</li>\n</ul>\n<h2 id="why-nextjs">Why Next.js?<a class="anchor" href="#why-nextjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Client and Server Rendering\n<ul>\n<li>Supports <em>ISR, SSR, SSG</em> - the new mental model revolves entirely around caching</li>\n</ul>\n</li>\n<li>React Server Components\n<ul>\n<li>Add components without sending additional client-side JS</li>\n</ul>\n</li>\n<li>Dynamic HTML Streaming\n<ul>\n<li>Instantly stream UI from server, integrated with the App Router and React Suspense</li>\n</ul>\n</li>\n<li>Next.js is a solution for running react application server side.</li>\n<li>Next.js is a popular, lightweight framework for static and server‑rendered applications❓ built with React.</li>\n<li>Built-in Optimizations for improved UX and Core Web Vitals\n<ul>\n<li>Image</li>\n<li>Font</li>\n<li>Script</li>\n</ul>\n</li>\n</ul>\n<h2 id="downsides">Downsides<a class="anchor" href="#downsides"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>Many features are inspired by Remix. One thing Next is missing is a way to write data similar to Remix forms.<br>\nThere’s no way to write <em>API routes</em> in the new app directory which seems like a sloppy loose end, as <em>data fetching</em> looks amazing but <em>mutations</em> are an entirely different story on which the team says they are working on a new <em>RFC</em> for mutating data.<br>\nCurrently, you would use a client-side component <code>"use client"</code> , write your mutation logic and then pass in a callback function of <code>refresh</code> to update any data on that route after the mutation is complete, which is similar to React query <code>useRouter().refresh</code><br>\nMajor changes- hard to migrate code<br>\n90 KB baseline of client-side JS (just for warm-up)</p>\n<ul>\n<li>Other framework that can ship 0 JS app: Astro, Quick</li>\n</ul>',frontmatter={title:"Next.js Features (Pros & Cons)",tags:["NextJS"],category:"Front-End Frameworks",topic:null,type:"D",reviewed:null,difficulty:null,comment:null,status:["Organizing"],aliases:["Next.js Features (Pros & Cons)"],DateStarted:"2023-11-30T00:00:00.000Z",DateModified:"2024-04-27T00:00:00.000Z",Datereviewed:null,draft:!0,"linter-yaml-title-alias":"Next.js Features (Pros & Cons)",minutes:1,words:252},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/next.js/nextjs-features-pros-cons.md",url=void 0;function rawContent(){return"# Next.js Features (Pros & Cons)\n## What is Next.js\n- Next.js is maintained by Vercel.\n\t- https://vercel.com/\n- You can deploy a Next.js app to any Node.js or serverless hosting\n\t- https://nextjs.org/docs/app/building-your-application/deploying\n- Supports a static export which doesn't require a server\n\t- https://nextjs.org/docs/pages/building-your-application/deploying/static-exports\n  - Next.js is what you would almost call the official React framework\n  - Only with React, developers need to spend time configuring tools and reinventing solutions for common application requirements.\n## Why Next.js?\n- Client and Server Rendering\n  - Supports _ISR, SSR, SSG_ - the new mental model revolves entirely around caching\n- React Server Components\n  - Add components without sending additional client-side JS\n- Dynamic HTML Streaming\n  - Instantly stream UI from server, integrated with the App Router and React Suspense\n- Next.js is a solution for running react application server side.\n- Next.js is a popular, lightweight framework for static and server‑rendered applications❓ built with React.\n- Built-in Optimizations for improved UX and Core Web Vitals\n  - Image\n  - Font\n  - Script\n## Downsides\nMany features are inspired by Remix. One thing Next is missing is a way to write data similar to Remix forms.  \nThere's no way to write _API routes_ in the new app directory which seems like a sloppy loose end, as _data fetching_ looks amazing but _mutations_ are an entirely different story on which the team says they are working on a new _RFC_ for mutating data.  \nCurrently, you would use a client-side component `\"use client\"` , write your mutation logic and then pass in a callback function of `refresh` to update any data on that route after the mutation is complete, which is similar to React query `useRouter().refresh`  \nMajor changes- hard to migrate code  \n90 KB baseline of client-side JS (just for warm-up)\n- Other framework that can ship 0 JS app: Astro, Quick\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"nextjs-features-pros--cons",text:"Next.js Features (Pros & Cons)#"},{depth:2,slug:"what-is-nextjs",text:"What is Next.js#"},{depth:2,slug:"why-nextjs",text:"Why Next.js?#"},{depth:2,slug:"downsides",text:"Downsides#"}]}const Content=createComponent(((e,t,n)=>{const{layout:i,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};