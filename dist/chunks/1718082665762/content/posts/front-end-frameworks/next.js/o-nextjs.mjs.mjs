import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="nextjs">Next.js<a class="anchor" href="#nextjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="intro">Intro<a class="anchor" href="#intro"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="nextjs-features-pros-cons">Next.js Features (Pros &#x26; Cons)</a><br>\n<a href="nextjs-rendering-methods">Next.js Rendering Methods</a></p>\n<h2 id="project-init">Project-Init<a class="anchor" href="#project-init"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="try-next-manual-installation">Try-next (Manual Installation)<a class="anchor" href="#try-next-manual-installation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>npm install react@latest react-dom@latest next@latest</code></li>\n</ul>\n<h3 id="automatic-installation">Automatic Installation<a class="anchor" href="#automatic-installation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>npx create-next-app@latest</code>\n<ul>\n<li>a Command Line Interface (CLI) tool that sets up a Next.js application for you</li>\n<li>Dependencies\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/paste-image-1701323825262image.png" alt=""></li>\n</ul>\n</li>\n<li>Time\n<ul>\n<li>2 mins</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅ created a Next.js application using the starter example\n<ul>\n<li><code>npx create-next-app@latest nextjs-dashboard --use-npm --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example"</code></li>\n</ul>\n</li>\n<li><a href="How-to-start-a-React,-NextJS-and-TailwindCSS-project">How to start a React, NextJS and TailwindCSS project</a></li>\n</ul>\n<h3 id="run-the-dev-server">Run the Dev Server<a class="anchor" href="#run-the-dev-server"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>npm run dev</code></li>\n<li>Visit <code>http://localhost:3000</code></li>\n</ul>\n<h3 id="fast-refresh">Fast Refresh<a class="anchor" href="#fast-refresh"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>gives you instantaneous feedback on any edits you make</li>\n<li><a href="https://nextjs.org/docs/architecture/fast-refresh">https://nextjs.org/docs/architecture/fast-refresh</a></li>\n</ul>\n<h2 id="project-structure">Project Structure<a class="anchor" href="#project-structure"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="app"><code>/app</code><a class="anchor" href="#app"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Contains all the routes, components, and logic for your application, this is where you’ll be mostly working from.</li>\n<li><code>/app/lib</code>\n<ul>\n<li>Contains functions used in your application, such as reusable utility functions and data fetching functions.</li>\n<li>✅<a href="Front-End-Practice#%F0%9F%93%8CPlaceholder-Data">Front-End Practice > 📌Placeholder Data</a>\n<ul>\n<li><code>app/lib/placeholder-data.js</code></li>\n<li>you’ll use this data to <em>seed</em> your database (populate it with some initial data).</li>\n</ul>\n</li>\n<li>✅<a href="TypeScript">TypeScript</a>\n<ul>\n<li><code>/app/lib/definitions.ts</code>\n<ul>\n<li>manually define the types that will be returned from the database</li>\n</ul>\n</li>\n<li>By using TypeScript, you can ensure you don’t accidentally pass the wrong data format to your components or database</li>\n<li>We’re manually declaring the data types, but for better type-safety, we recommend <a href="https://www.prisma.io/">Prisma</a>\n<ul>\n<li>automatically generates types based on your database schema.</li>\n</ul>\n</li>\n<li>Next.js also comes with a <a href="https://nextjs.org/docs/app/building-your-application/configuring/typescript#typescript-plugin">TypeScript plugin</a> for your code editor, to help with auto-completion and type-safety.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>/app/ui</code>\n<ul>\n<li>Contains all the UI components for your application, such as cards, tables, and forms. To save time, we’ve pre-styled these components for you.</li>\n</ul>\n</li>\n<li><code>page.tsx</code>\n<ul>\n<li>a special Next.js file that exports a React component, and it’s required for the <em>route</em> to be accessible</li>\n<li>It’s the home page associated with the route <code>/</code></li>\n</ul>\n</li>\n<li><code>layout.tsx</code>\n<ul>\n<li>was automatically created inside the app folder.</li>\n<li>the main layout of your application.</li>\n<li>can use it to add UI elements that are shared across all pages (e.g. navigation, footer, etc)</li>\n</ul>\n</li>\n</ul>\n<h3 id="public"><code>/public</code><a class="anchor" href="#public"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Contains all the static assets for your application, such as images.</li>\n</ul>\n<h3 id="scripts"><code>/scripts</code><a class="anchor" href="#scripts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Contains a seeding script that you’ll use to populate your database in a later chapter.</li>\n</ul>\n<h3 id="config-files">Config files<a class="anchor" href="#config-files"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>next.config.js</code></li>\n</ul>\n<h2 id="styling">Styling<a class="anchor" href="#styling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="conditionally-add-class-names-with-the-clsx-utility-package">conditionally add class names with the <code>clsx</code> utility package.<a class="anchor" href="#conditionally-add-class-names-with-the-clsx-utility-package"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://www.npmjs.com/package/clsx"><code>clsx</code></a> is a library that lets you toggle class names easily.</li>\n</ul>\n<h2 id="optimizing-fonts-and-images">Optimizing Fonts and Images<a class="anchor" href="#optimizing-fonts-and-images"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="why">Why<a class="anchor" href="#why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Layout Shift\n<ul>\n<li><a href="https://web.dev/cls/">Cumulative Layout Shift</a>\n<ul>\n<li>a metric used by Google to evaluate the performance and user experience of a website</li>\n</ul>\n</li>\n<li>With fonts, layout shift happens when the browser initially renders text in a fallback or system font and then swaps it out for a custom font once it has loaded.</li>\n</ul>\n</li>\n</ul>\n<h3 id="fonts">Fonts<a class="anchor" href="#fonts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>💡add custom fonts with <code>next/font</code></li>\n<li>✅Add a primary font\n<ul>\n<li><code>app/ui/fonts.ts</code>\n<ul>\n<li>use this file to keep the fonts that will be used throughout your application</li>\n<li>Import the <code>Inter</code> font from the <code>next/font/google</code> module - this will be your primary font.</li>\n<li>specify what <a href="https://fonts.google.com/knowledge/glossary/subsetting">subset</a> you’d like to load. In this case, <code>\'latin\'</code></li>\n</ul>\n</li>\n<li>add the font to the <code>&#x3C;body></code> element in <code>/app/layout.tsx</code></li>\n</ul>\n</li>\n<li>✅Add a secondary font\n<ul>\n<li>import a secondary font called <code>Lusitana</code> and pass it to the <code>&#x3C;p></code> element in your <code>/app/page.tsx</code> file</li>\n</ul>\n</li>\n<li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/fonts">Optimizing: Fonts | Next.js (nextjs.org)</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts">Web fonts - Learn web development | MDN (mozilla.org)</a></li>\n</ul>\n<h3 id="images">Images<a class="anchor" href="#images"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>💡add images with <code>next/image</code></li>\n<li>✅<code>&#x3C;Image></code> Component\n<ul>\n<li>an extension of the HTML <code>&#x3C;img></code> tag</li>\n<li>automatic image optimization\n<ul>\n<li>Preventing layout shift automatically when images are loading</li>\n<li>Resizing images to avoid shipping large images to devices with a smaller viewport</li>\n<li>Lazy loading images by default (images load as they enter the viewport)</li>\n<li>Serving images in modern formats, like <a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#webp">WebP</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#avif_image">AVIF</a>, when the browser supports it</li>\n</ul>\n</li>\n<li>It’s good practice to set the <code>width</code> and <code>height</code> of your images to avoid layout shift\n<ul>\n<li>should be an aspect ratio identical to the source image</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Files inside <code>/public</code> can be referenced in your application.</li>\n<li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/images">Optimizing: Images | Next.js (nextjs.org)</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia">Multimedia: Images - Learn web development | MDN (mozilla.org)</a></li>\n</ul>\n<h3 id="how-fonts-and-images-are-optimized-in-nextjs">How fonts and images are optimized in Next.js<a class="anchor" href="#how-fonts-and-images-are-optimized-in-nextjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="routing">Routing<a class="anchor" href="#routing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="how-to-create-nested-layouts-and-pages-using-file-system-routing">How to create nested layouts and pages using file-system routing.<a class="anchor" href="#how-to-create-nested-layouts-and-pages-using-file-system-routing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="nested-routing">💡Nested Routing<a class="anchor" href="#nested-routing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Understand the role of folders and files when creating new route segments\n<ul>\n<li>folders are used to create nested routes</li>\n<li>Each folder represents a route segment that maps to a URL segment</li>\n</ul>\n</li>\n<li>can create separate UIs for each route using <code>layout.tsx</code> and <code>page.tsx</code> files</li>\n</ul>\n<h3 id="create-the-dashboard-routespages-using-file-system-routing">✅Create the <code>dashboard</code> routes/pages using file-system routing<a class="anchor" href="#create-the-dashboard-routespages-using-file-system-routing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>To create a nested route, you can nest folders inside each other and add <em><code>page.tsx</code></em> files inside them\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-nested-routing.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h3 id="create-a-nested-layout-that-can-be-shared-between-multiple-dashboard-pages">✅Create a nested layout that can be shared between multiple dashboard pages<a class="anchor" href="#create-a-nested-layout-that-can-be-shared-between-multiple-dashboard-pages"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>benefit of using <em>layouts</em> in Next.js\n<ul>\n<li>💡Partial rendering\n<ul>\n<li>only the page components update while the layout won’t re-render</li>\n<li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#3-partial-rendering">partial rendering</a></li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-partial-rendering.png" alt=""></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="understand-root-layout">✅Understand root layout<a class="anchor" href="#understand-root-layout"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>a <a href="https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#root-layout-required">root layout</a> and is required</li>\n<li>Any UI you add to the root layout will be shared across all pages in your application</li>\n<li>You can use the root layout to modify your <code>&#x3C;html></code> and <code>&#x3C;body></code> tags, and add <em>metadata</em></li>\n</ul>\n<h2 id="optimizing-navigation-links">Optimizing Navigation/ Links<a class="anchor" href="#optimizing-navigation-links"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="why-optimize-navigation">Why optimize navigation<a class="anchor" href="#why-optimize-navigation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>traditionally use the <code>&#x3C;a></code> HTML element\n<ul>\n<li>❌There’s a full page refresh on each page navigation</li>\n</ul>\n</li>\n<li>How navigation works in Next.js\n<ul>\n<li>Automatic code-splitting and prefetching\n<ul>\n<li>Next.js automatically code splits your application by route segments.\n<ul>\n<li>pages become isolated</li>\n<li>If a certain page throws an error, the rest of the application will still work</li>\n<li>Different from a traditional React <a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA">SPA</a>, where the browser loads all your application code on initial load</li>\n</ul>\n</li>\n<li>whenever <a href="https://nextjs.org/docs/api-reference/next/link"><code>&#x3C;Link></code></a> components appear in the browser’s viewport, Next.js automatically prefetches the code for the linked route in the background\n<ul>\n<li>this is what makes the page transition near-instant</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works">Routing: Linking and Navigating | Next.js (nextjs.org)</a></li>\n</ul>\n</li>\n</ul>\n<h3 id="link-component">✅<code>&#x3C;Link></code> Component<a class="anchor" href="#link-component"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to link between pages in your application</li>\n<li>allows you to do <a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works">client-side navigation</a> with JavaScript</li>\n<li>Use\n<ul>\n<li>Import <code>Link</code> from <code>next/link</code></li>\n<li>Replace the <code>&#x3C;a></code> tag with <code>&#x3C;Link></code></li>\n</ul>\n</li>\n</ul>\n<h3 id="show-an-active-link-with-the-usepathname-hook">✅show an active link with the <code>usePathname()</code> hook<a class="anchor" href="#show-an-active-link-with-the-usepathname-hook"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>A common UI pattern is to show an active link to indicate to the user what page they are currently on\n<ul>\n<li>To do this, you need to get the user’s current path from the URL.</li>\n<li>Next.js provides a hook called <a href="https://nextjs.org/docs/app/api-reference/functions/use-pathname"><code>usePathname()</code></a> that you can use to check the path and implement this pattern</li>\n</ul>\n</li>\n<li>Use\n<ul>\n<li>Add React’s <code>"use client"</code> directive to the top of the file\n<ul>\n<li>Since <a href="https://nextjs.org/docs/app/api-reference/functions/use-pathname"><code>usePathname()</code></a> is a hook,</li>\n</ul>\n</li>\n<li>Import <code>usePathname()</code> from <code>next/navigation</code></li>\n</ul>\n</li>\n<li>to conditionally apply class names when the link is active\n<ul>\n<li>use the <code>clsx</code> library</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">className</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{</span><span style="color:#B392F0">clsx</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#9ECBFF">\t\'flex h-[48px] grow items-center justify-center gap-2 rounded bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600:flex-none:justify-start:p-2:px-3\'</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t{</span></span>\n<span class="line"><span style="color:#9ECBFF">\t\t\'bg-sky-100 text-blue-600\'</span><span style="color:#E1E4E8">: </span><span style="color:#FFAB70">pathname</span><span style="color:#E1E4E8"> === </span><span style="color:#FFAB70">link</span><span style="color:#E1E4E8">.</span><span style="color:#FFAB70">href</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t},</span></span>\n<span class="line"><span style="color:#E1E4E8">)}</span></span>\n<span class="line"></span></code></pre>\n<h2 id="deploying">Deploying<a class="anchor" href="#deploying"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="../../front-end-tooling/deployment/vercel.md">Vercel</a></li>\n</ul>\n<h2 id="data-fetching">Data Fetching<a class="anchor" href="#data-fetching"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="approaches-to-fetching-data-apis-orms-sql-etc">💡Approaches to fetching data: APIs, ORMs, SQL, etc<a class="anchor" href="#approaches-to-fetching-data-apis-orms-sql-etc"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="api-layers">❓API Layers<a class="anchor" href="#api-layers"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>an intermediary layer between your application code and database</li>\n<li>Cases\n<ul>\n<li>using 3rd party services that provide an API</li>\n<li>fetching data from the client, you want to have an API layer that runs on the server to avoid exposing your database secrets to the client</li>\n</ul>\n</li>\n<li>In Next.js, you can create API endpoints using <a href="https://nextjs.org/docs/app/building-your-application/routing/route-handlers">Route Handlers</a></li>\n</ul>\n<h3 id="db-queries">❓DB Queries<a class="anchor" href="#db-queries"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to write logic to interact with your database</li>\n<li>For relational DB like Postgres\n<ul>\n<li>Use <em>SQL</em></li>\n<li>or an <a href="https://vercel.com/docs/storage/vercel-postgres/using-an-orm#">ORM</a> like <a href="https://www.prisma.io/">Prisma</a></li>\n</ul>\n</li>\n<li>✅Fetch data with Server Components\n<ul>\n<li>Why\n<ul>\n<li>If you are using <em>React Server Components</em>, you can skip the API layer, and query your database directly without risking exposing your database secrets to the client</li>\n<li>Server Components support <em>promises</em>, providing a simpler solution for asynchronous tasks like data fetching\n<ul>\n<li>can use <em><code>async/await</code> syntax</em> without reaching out for <code>useEffect</code>, <code>useState</code> or data fetching libraries</li>\n</ul>\n</li>\n<li>execute on the server, so you can keep expensive data fetches and logic on the server and only send the result to the client</li>\n<li>can query the database directly without an additional API layer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Fetch data using SQL\n<ul>\n<li><a href="https://vercel.com/docs/storage/vercel-postgres/sdk">Vercel Postgres SDK</a>\n<ul>\n<li>provides protection against <a href="https://vercel.com/docs/storage/vercel-postgres/sdk#preventing-sql-injections">SQL injections</a></li>\n</ul>\n</li>\n<li>Why\n<ul>\n<li>When creating your API endpoints, you need to write logic to interact with your database</li>\n<li>SQL is the industry standard for querying relational databases (e.g. ORMs generate SQL under the hood)</li>\n<li>SQL is versatile, allowing you to fetch and manipulate specific data</li>\n</ul>\n</li>\n<li>Go to <code>/app/lib/data.ts</code>\n<ul>\n<li>importing the <a href="https://vercel.com/docs/storage/vercel-postgres/sdk#sql"><code>sql</code></a> function from <code>@vercel/postgres</code>\n<ul>\n<li>This function allows you to query your database</li>\n</ul>\n</li>\n<li>You can call <code>sql</code> inside any Server Component</li>\n<li>we’ve kept all the data queries in the <code>data.ts</code> file, and you can import them into the components</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="network-request-waterfalls">Network/ Request waterfalls<a class="anchor" href="#network-request-waterfalls"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>❌The data requests are unintentionally blocking each other, creating a <em>request waterfall</em></li>\n<li>A “waterfall” refers to a sequence of network requests that depend on the completion of previous requests.\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-waterfall-request.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h3 id="parallel-data-fetching-using-a-javascript-pattern">Parallel data fetching using a JavaScript Pattern<a class="anchor" href="#parallel-data-fetching-using-a-javascript-pattern"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>In JavaScript, you can use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"><code>Promise.all()</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled"><code>Promise.allSettled()</code></a> functions to initiate all promises at the same time\n<ul>\n<li>Eg.\n<ul>\n<li>in <code>data.ts</code>, we’re using <code>Promise.all()</code> in the <code>fetchCardData()</code> function</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Merits\n<ul>\n<li>Start executing all data fetches at the same time, which can lead to performance gains</li>\n<li>Use a native JavaScript pattern that can be applied to any library or framework</li>\n</ul>\n</li>\n<li>❌Downside\n<ul>\n<li>what happens if one data request is slower than all the others</li>\n</ul>\n</li>\n</ul>\n<h2 id="rendering">Rendering<a class="anchor" href="#rendering"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="nextjs-rendering-methods">Next.js Rendering Methods</a></li>\n</ul>\n<h3 id="static-rendering">Static Rendering<a class="anchor" href="#static-rendering"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>What\n<ul>\n<li>❌By default, Next.js <em>prerenders</em> routes to improve performance, this is called <em>Static Rendering</em>\n<ul>\n<li>if your data changes, it won’t be reflected in your dashboard</li>\n</ul>\n</li>\n<li>Data fetching and rendering happens on the server at build time (when you deploy) or during <a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data">revalidation</a></li>\n<li>The result can then be distributed and cached in a <a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default">Content Delivery Network (CDN)</a></li>\n</ul>\n</li>\n<li>Why\n<ul>\n<li>Faster website</li>\n<li>Reduced server load</li>\n<li>SEO</li>\n</ul>\n</li>\n<li>Case\n<ul>\n<li>For\n<ul>\n<li>useful for UI with no data or data that is shared across users, such as a static blog post or a product page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="dynamic-rendering">Dynamic Rendering<a class="anchor" href="#dynamic-rendering"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>What\n<ul>\n<li>content is rendered on the server for each user at <em>request time</em> (when the user visits the page)</li>\n</ul>\n</li>\n<li>When to use\n<ul>\n<li>Real-Time Data\n<ul>\n<li>ideal for applications where data changes often</li>\n</ul>\n</li>\n<li>User-Specific Content\n<ul>\n<li>personalized content, such as dashboards or user profiles, and update the data based on user interaction</li>\n</ul>\n</li>\n<li>Request Time Information\n<ul>\n<li>to access information that can only be known at request time, such as cookies or the URL search parameters</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Approaches to make your dashboard dynamic\n<ul>\n<li>By default, <code>@vercel/postgres</code> doesn’t set its own caching semantics</li>\n<li>✅can use a Next.js API called <code>unstable_noStore</code> inside your Server Components or data fetching functions to opt out of static rendering\n<ul>\n<li>In your <code>data.ts</code>, import <code>unstable_noStore</code> from <code>next/cache</code>, and call it the top of your data fetching functions</li>\n<li>is an experimental API and may change in the future</li>\n</ul>\n</li>\n<li>to use a stable API in your own projects, you can also use the <a href="https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config">Segment Config Option</a> <code>export const dynamic = "force-dynamic"</code></li>\n</ul>\n</li>\n<li>Simulate a slow data fetch to see what happens\n<ul>\n<li>❌With dynamic rendering, your application is only as fast as your slowest data fetch</li>\n</ul>\n</li>\n</ul>\n<h3 id="streaming">Streaming<a class="anchor" href="#streaming"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>What\n<ul>\n<li>a data transfer technique that allows you to break down a route into smaller <em>chunks</em> and <em>progressively</em> stream them from the server to the client as they become ready\n<ul>\n<li>works well with React’s component model, as each component can be considered a <em>chunk</em></li>\n<li>Chunks are rendered in parallel, reducing the overall load time</li>\n</ul>\n</li>\n<li>can prevent slow data requests from blocking your whole page\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-streaming.png" alt=""></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>How\n<ul>\n<li>At the page level, with the <code>loading.tsx</code> file\n<ul>\n<li>✅In the <code>/app/dashboard</code> folder, create a new file called <code>loading.tsx</code>\n<ul>\n<li>a special Next.js file built on top of Suspense</li>\n<li>allows you to create fallback UI to show as a replacement while page content loads</li>\n</ul>\n</li>\n<li>✅Loading Skeletons\n<ul>\n<li>simplified version of the UI</li>\n<li>Any UI you embed into <code>loading.tsx</code> will be embedded as part of the static file, and sent first</li>\n</ul>\n</li>\n<li>✅Route groups\n<ul>\n<li>❌Since <code>loading.tsx</code> is a level higher, it’s also applied to child pages</li>\n<li>can change this with <a href="https://nextjs.org/docs/app/building-your-application/routing/route-groups">Route Groups</a>\n<ul>\n<li>Create a new folder called <code>/(overview)</code> inside the dashboard folder. Then, move your <code>loading.tsx</code> and <code>page.tsx</code> files inside the folder</li>\n</ul>\n</li>\n<li>What\n<ul>\n<li>Route groups allow you to organize files into logical groups without affecting the URL path structure</li>\n<li>When you create a new folder using parentheses <code>()</code>, the name won’t be included in the URL path</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅For specific components, with <code>&#x3C;Suspense></code>\n<ul>\n<li><em>Suspense boundaries</em>\n<ul>\n<li>can be more granular and stream specific components using React Suspense</li>\n<li>allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded)</li>\n<li>can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads</li>\n<li>to stream only the slowest data request and immediately show the rest of the page’s UI</li>\n</ul>\n</li>\n<li>Use\n<ul>\n<li>move the data fetch to the component</li>\n<li>import <code>&#x3C;Suspense></code> from React, and wrap it around the component</li>\n<li>can pass it a fallback skeleton component</li>\n<li>update the <code>&#x3C;RevenueChart></code> component to fetch its own data</li>\n</ul>\n</li>\n<li><em>Group components</em>\n<ul>\n<li>❌ to wrap the <code>&#x3C;Card></code> components in Suspense. You can fetch data for each individual card, but this could lead to a <em>popping</em> effect as the cards load in, this can be visually jarring for the user</li>\n<li>can use this pattern when you want multiple components to load in at the same time</li>\n</ul>\n</li>\n<li>Decide where to put Suspense boundaries\n<ul>\n<li>How you want the user to experience the page as it streams</li>\n<li>What content you want to prioritize</li>\n<li>If the components rely on data fetching</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="partial-prerendering">Partial Prerendering<a class="anchor" href="#partial-prerendering"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Experimental feature</li>\n</ul>\n<h2 id="search-and-pagination">Search and Pagination<a class="anchor" href="#search-and-pagination"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="how-to-implement-search-and-pagination-using-url-search-params">💡How to implement search and pagination using URL Search Params.<a class="anchor" href="#how-to-implement-search-and-pagination-using-url-search-params"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Why use URL search params\n<ul>\n<li>Bookmarkable and Shareable URLs</li>\n<li>Server-Side Rendering and Initial Load</li>\n<li>Analytics and Tracking\n<ul>\n<li>easier to track user behavior without requiring additional client-side logic</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="capture-the-users-input">✅Capture the user’s input<a class="anchor" href="#capture-the-users-input"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>&#x3C;Search></code> Component (“use client”, a client component, which supports event listeners and hooks)</li>\n</ul>\n<h3 id="update-the-url-with-search-params">✅Update the URL with search params<a class="anchor" href="#update-the-url-with-search-params"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>⭐<code>useSearchParams</code> (from <code>\'next/navigation\'</code>)\n<ul>\n<li><em>Next.js client hooks</em> that you’ll use to implement the Search functionality</li>\n<li>Import the <code>useSearchParams</code> hook from <code>\'next/navigation\'</code>, and assign it to a variable</li>\n<li>the search params for this URL <code>/dashboard/invoices?page=1&#x26;query=pending</code> would look like this: <code>{page: \'1\', query: \'pending\'}</code></li>\n<li><code>const searchParams = useSearchParams()</code></li>\n</ul>\n</li>\n<li>Inside <code>handleSearch,</code> create a new <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"><code>URLSearchParams</code></a> instance using your new <code>searchParams</code> variable\n<ul>\n<li><code>URLSearchParams</code> is a Web API that provides utility methods for manipulating the URL query parameters</li>\n<li><code>const params = new URLSearchParams(searchParams)</code></li>\n</ul>\n</li>\n<li><code>usePathname</code>\n<ul>\n<li>for the route <code>/dashboard/invoices</code>, <code>usePathname</code> would return <code>\'/dashboard/invoices\'</code></li>\n<li><code>const pathname = usePathname();</code></li>\n</ul>\n</li>\n<li><code>useRouter</code>\n<ul>\n<li>Enables navigation between routes within client components programmatically. There are <a href="https://nextjs.org/docs/app/api-reference/functions/use-router#userouter">multiple methods</a> you can use</li>\n<li><code> const { replace } = useRouter()</code></li>\n<li><code>replace( </code>${pathname}?${params.toString()}`)`\n<ul>\n<li>As the user types into the search bar, <code>params.toString()</code> translates this input into a URL-friendly format</li>\n<li>updates the URL with the user’s search data</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The URL is updated without reloading the page, thanks to Next.js’s client-side navigation (which you learned about in the chapter on <a href="https://nextjs.org/learn/dashboard-app/navigating-between-pages">navigating between pages</a></li>\n</ul>\n<h3 id="keep-the-url-and-input-in-sync">✅Keep the URL and input in sync<a class="anchor" href="#keep-the-url-and-input-in-sync"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>pass a <code>defaultValue</code> to input by reading from <code>searchParams</code>\n<ul>\n<li>To ensure the input field is in sync with the URL and will be populated when sharing</li>\n<li><code>defaultValue={searchParams.get(\'query\')?.toString()</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="update-the-table-component-to-reflect-the-search-query">✅Update the table component to reflect the search query<a class="anchor" href="#update-the-table-component-to-reflect-the-search-query"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>⭐Invoices page components <a href="https://nextjs.org/docs/app/api-reference/file-conventions/page">accept a prop called <code>searchParams</code></a>, so you can pass the current URL params to the <code>&#x3C;Table></code> component</li>\n<li>Difference\n<ul>\n<li><code>useSearchParams</code>\n<ul>\n<li>For client component</li>\n</ul>\n</li>\n<li><code>searchParams</code>\n<ul>\n<li>For server component</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="best-practice-debouncing">✅Best practice: Debouncing<a class="anchor" href="#best-practice-debouncing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>To keep things simple, we’ll use a library called <a href="https://www.npmjs.com/package/use-debounce"><code>use-debounce</code></a></li>\n</ul>\n<h3 id="add-pagination">✅Add pagination<a class="anchor" href="#add-pagination"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>implement pagination using URL params</li>\n<li>you can fetch the data on the server, and pass it to the component as a prop</li>\n</ul>\n<h2 id="mutating-data">Mutating Data<a class="anchor" href="#mutating-data"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="adding-the-ability-to-create-update-and-delete-invoices">💡adding the ability to create, update, and delete invoices<a class="anchor" href="#adding-the-ability-to-create-update-and-delete-invoices"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>How to work with forms and Server Components\n<ul>\n<li><code>formData</code> object</li>\n</ul>\n</li>\n<li>Revalidate the client cache\n<ul>\n<li><code>revalidatePath</code> API</li>\n</ul>\n</li>\n<li>Create dynamic route segments\n<ul>\n<li>with specific IDs</li>\n</ul>\n</li>\n<li>Optimistic updates\n<ul>\n<li>React’s <code>useFormStatus</code> hook</li>\n</ul>\n</li>\n</ul>\n<h3 id="react-server-actions">React Server Actions<a class="anchor" href="#react-server-actions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>What\n<ul>\n<li>allow you to run <em>asynchronous code</em> directly on the server and can be invoked from your Client or Server Components</li>\n<li>eliminate the need to create API endpoints to mutate your data</li>\n<li>Security\n<ul>\n<li>protecting against different types of attacks, securing your data, and ensuring <em>authorized access</em></li>\n<li>Techniques\n<ul>\n<li>POST requests</li>\n<li>encrypted closures</li>\n<li>strict input checks</li>\n<li>error message hashing</li>\n<li>host restrictions</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Use forms with Server Actions\n<ul>\n<li>In React, you can use the <code>action</code> attribute in the <code>&#x3C;form></code> element to invoke actions</li>\n<li>The action will automatically receive the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a> object, containing the captured data\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-server-actions.png" alt=""></li>\n</ul>\n</li>\n<li>⚡Benefit\n<ul>\n<li>progressive enhancement - forms work even if JavaScript is disabled on the client</li>\n</ul>\n</li>\n<li>⚡Server Actions integrated with Next.js <a href="https://nextjs.org/docs/app/building-your-application/caching">caching</a>\n<ul>\n<li>can use the action to mutate data</li>\n<li>can revalidate the associated cache using APIs like <code>revalidatePath</code> and <code>revalidateTag</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Reference\n<ul>\n<li><a href="https://nextjs.org/blog/security-nextjs-server-components-actions">How to Think About Security in Next.js | Next.js (nextjs.org)</a></li>\n</ul>\n</li>\n</ul>\n<h3 id="create-a-new-invoice">Create a new invoice<a class="anchor" href="#create-a-new-invoice"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>✅Create a form to capture the user’s input\n<ul>\n<li>Create a new route and form\n<ul>\n<li><code>/invoices/crete/page.tsx</code></li>\n<li>Create a <code>&#x3C;Form></code> component\n<ul>\n<li>one <code>&#x3C;select></code> (dropdown) element with a list of <em>customers</em></li>\n<li>one <code>&#x3C;input></code> element for the <em>amount</em> with <code>type="number"</code></li>\n<li>two <code>&#x3C;input></code> elements for the status with type=“radio”</li>\n<li>one button with <code>type="submit"</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Create a Server Action and invoke it from the form\n<ul>\n<li>create a Server Action that is going to be called when the form is submitted</li>\n<li><code>lib/actions.ts</code>\n<ul>\n<li><code>\'use server\'</code></li>\n<li><code>export async function createInvoice(formData: FormData) {}</code></li>\n</ul>\n</li>\n<li><code>create-form.tsx</code>\n<ul>\n<li><code>import { createInvoice } from \'@/app/lib/actions\';</code></li>\n<li><code>&#x3C;form action={createInvoice}></code></li>\n</ul>\n</li>\n<li>you don’t need to create API endpoints manually when using Server Actions\n<ul>\n<li>In HTML, you’d pass a URL to the <code>action</code> attribute. This URL would be the destination where your form data should be submitted (usually an API endpoint)</li>\n<li>in React, the <code>action</code> attribute is considered a special prop - meaning React builds on top of it to allow actions to be invoked</li>\n<li>Behind the scenes, Server Actions create a <code>POST</code> API endpoint.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Inside your Server Action, extract the data from the <code>formData</code> object\n<ul>\n<li>Methods you can use\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/append">FormData: append() method - Web APIs | MDN (mozilla.org)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> rawFormData</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcustomerId: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"customerId"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tamount: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"amount"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tstatus: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"status"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t};</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>Tips: forms that have many fields\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries"><code>entries()</code></a> method with JavaScript’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"><code>Object.fromEntries()</code></a>\n<ul>\n<li><code>const rawFormData = Object.fromEntries(formData.entries())</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Validate and prepare the data to be inserted into your database\n<ul>\n<li>use <a href="https://zod.dev/">Zod</a>, a TypeScript-first validation library</li>\n<li>import zod\n<ul>\n<li><code>import { z } from \'zod\';</code></li>\n</ul>\n</li>\n<li>define a schema</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> FormSchema</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> z.</span><span style="color:#B392F0">object</span><span style="color:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tid: z.</span><span style="color:#B392F0">string</span><span style="color:#E1E4E8">(),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcustomerId: z.</span><span style="color:#B392F0">string</span><span style="color:#E1E4E8">(),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tamount: z.coerce.</span><span style="color:#B392F0">number</span><span style="color:#E1E4E8">(),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tstatus: z.</span><span style="color:#B392F0">enum</span><span style="color:#E1E4E8">([</span><span style="color:#9ECBFF">"pending"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"paid"</span><span style="color:#E1E4E8">]),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tdate: z.</span><span style="color:#B392F0">string</span><span style="color:#E1E4E8">(),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li><code>const CreateInvoice = FormSchema.omit({ id: true, date: true });</code>\n<ul>\n<li>The <code>amount</code> field is specifically set to coerce (change) from a string to a number while also validating its type.</li>\n<li>pass your <code>rawFormData</code> to <code>CreateInvoice</code> to validate the types</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> createInvoice</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">formData</span><span style="color:#F97583">:</span><span style="color:#B392F0"> FormData</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#E1E4E8"> { </span><span style="color:#79B8FF">customerId</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">amount</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">status</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> CreateInvoice.</span><span style="color:#B392F0">parse</span><span style="color:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tcustomerId: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"customerId"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tamount: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"amount"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tstatus: formData.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"status"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>Store values in cents to avoid JS floating-point error\n<ul>\n<li><code>const amountInCents = amount * 100;</code></li>\n</ul>\n</li>\n<li>Create new dates\n<ul>\n<li>with the format “YYYY-MM-DD” for the invoice’s creation date\n<ul>\n<li><code>const date = new Date().toISOString().split(\'T\')[0];</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅Insert the data\n<ul>\n<li>create an SQL query to insert the new invoice into your database and pass in the variables</li>\n</ul>\n</li>\n<li>handle errors\n<ul>\n<li>📌See next chapter</li>\n</ul>\n</li>\n<li>✅Revalidate the cache and redirect the user back to invoices page\n<ul>\n<li>To revalidate\n<ul>\n<li>Why\n<ul>\n<li>Next.js has a <a href="https://nextjs.org/docs/app/building-your-application/caching#router-cache">Client-side Router Cache</a> that stores the route segments in the user’s browser</li>\n<li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#1-prefetching">prefetching</a>,\n<ul>\n<li>the cache ensures that users can quickly navigate between routes while reducing the number of requests made to the server</li>\n</ul>\n</li>\n<li>💡to clear this cache and trigger a new request to the server</li>\n</ul>\n</li>\n<li><a href="https://nextjs.org/docs/app/api-reference/functions/revalidatePath"><code>revalidatePath</code></a> function from Next.js <code>next/cache</code>\n<ul>\n<li>Once the database has been updated, the <code>/dashboard/invoices</code> path will be revalidated, and fresh data will be fetched from the server</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>to redirect the user back\n<ul>\n<li><code>import { redirect } from \'next/navigation\';</code></li>\n<li><code>redirect(\'/dashboard/invoices\');</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="update-an-invoice">Update an invoice<a class="anchor" href="#update-an-invoice"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>💡need to pass the invoice <code>id</code> to update the record in your database</li>\n<li>✅create <a href="https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes">Dynamic Route Segments</a>\n<ul>\n<li>Create a new dynamic route segment with the invoice <code>id</code></li>\n<li><code>invoices/[id]/edit/page.tsx</code></li>\n</ul>\n</li>\n<li>✅update the <code>href</code> of the <code>Link</code> to accept the <code>id</code> prop\n<ul>\n<li>In <code>invoices/buttons.tsx</code> / <code>&#x3C;UpdateInvoice /></code></li>\n<li><code>href={`/dashboard/invoices/${id}/edit`}</code></li>\n</ul>\n</li>\n<li>✅Read the invoice <code>id</code> from the page <code>params</code></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#F97583"> async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> Page</span><span style="color:#E1E4E8">({ </span><span style="color:#FFAB70">params</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">params</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">id</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8"> } }) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> id</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> params.id;</span></span>\n<span class="line"><span style="color:#6A737D">\t// ...</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>✅Fetch the specific invoice from your database\n<ul>\n<li>To pre-populate the form with the invoice data</li>\n<li><code>import { fetchInvoiceById, fetchCustomers } from \'@/app/lib/data\';</code></li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">invoice</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">customers</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#F97583"> await</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">all</span><span style="color:#E1E4E8">([</span></span>\n<span class="line"><span style="color:#B392F0">\tfetchInvoiceById</span><span style="color:#E1E4E8">(id),</span></span>\n<span class="line"><span style="color:#B392F0">\tfetchCustomers</span><span style="color:#E1E4E8">(),</span></span>\n<span class="line"><span style="color:#E1E4E8">]);</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>The URL should also be updated with an <code>id</code> as follows: <code>http://localhost:3000/dashboard/invoice/uuid/edit</code></li>\n<li>📌UUIDs vs. Auto-incrementing Keys\n<ul>\n<li>UUIDs eliminate the risk of ID collision, are globally unique, and reduce the risk of enumeration attacks - making them ideal for large databases</li>\n<li>if you prefer cleaner URLs, you might prefer to use auto-incrementing keys</li>\n</ul>\n</li>\n<li>✅Update the invoice data in your database\n<ul>\n<li>to pass the <code>id</code> to the Server Action so you can update the right record in your database</li>\n<li>can pass <code>id</code> to the Server Action using JS <code>bind</code>\n<ul>\n<li>will ensure that any values passed to the Server Action are encoded</li>\n</ul>\n</li>\n<li>in your <code>actions.ts</code> file, create a new action, <code>updateInvoice</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="delete-an-invoice">Delete an invoice<a class="anchor" href="#delete-an-invoice"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>wrap the delete button in a <code>&#x3C;form></code> element and pass the <code>id</code> to the Server Action using <code>bind</code>\n<ul>\n<li>In <code>invoices/buttons.tsx</code> / <code>&#x3C;DeleteInvoice /></code></li>\n<li><code>const deleteInvoiceWithId = deleteInvoice.bind(null, id);</code></li>\n<li><code> &#x3C;form action={deleteInvoiceWithId}> &#x3C;/form></code></li>\n</ul>\n</li>\n<li>In <code>actions.ts</code></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> async</span><span style="color:#F97583"> function</span><span style="color:#B392F0"> deleteInvoice</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">id</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tawait</span><span style="color:#B392F0"> sql</span><span style="color:#9ECBFF">`DELETE FROM invoices WHERE id = ${</span><span style="color:#E1E4E8">id</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#B392F0">\trevalidatePath</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/dashboard/invoices"</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>Since this action is being called in the <code>/dashboard/invoices</code> path, you don’t need to call <code>redirect</code>\n<ul>\n<li>Calling <code>revalidatePath</code> will trigger a new server request and re-render the table</li>\n</ul>\n</li>\n</ul>\n<h2 id="error-handling">Error Handling<a class="anchor" href="#error-handling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="how-to-handle-general-and-404-not-found-errors">💡How to handle general and <code>404</code> not found errors.<a class="anchor" href="#how-to-handle-general-and-404-not-found-errors"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>use the special <code>error.tsx</code> file to catch errors in your route segments, and show a fallback UI to the user</li>\n<li>use the <code>notFound</code> function and <code>not-found</code> file to handle 404 errors (for resources that don’t exist)</li>\n</ul>\n<h3 id="add-try-catch-to-server-actions">✅Add <code>try-catch</code> to Server Actions<a class="anchor" href="#add-try-catch-to-server-actions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>redirect</code> is being called outside of the <code>try/catch</code> block\n<ul>\n<li>because <code>redirect</code> works by throwing an error, which would be caught by the <code>catch</code> block</li>\n</ul>\n</li>\n</ul>\n<h3 id="nextjs-errortsx-file">✅Next.js <a href="https://nextjs.org/docs/app/api-reference/file-conventions/error"><code>error.tsx</code></a> file<a class="anchor" href="#nextjs-errortsx-file"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Why\n<ul>\n<li>to show errors to the user to avoid an abrupt failure and allow your application to continue running</li>\n<li>can be used to define a UI boundary for a route segment</li>\n<li>serves as a catch-all for unexpected errors</li>\n<li>allows you to display a fallback UI to your users</li>\n</ul>\n</li>\n<li><code>"use client"</code>\n<ul>\n<li><code>error.tsx</code> needs to be a Client Component</li>\n</ul>\n</li>\n<li>accepts two props\n<ul>\n<li><code>error</code>\n<ul>\n<li>an instance of JavaScript’s native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"><code>Error</code></a> object</li>\n</ul>\n</li>\n<li><code>reset</code>\n<ul>\n<li>a function to reset the error boundary</li>\n<li>When executed, the function will try to re-render the route segment</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="handle-404-errors-with-notfound-function">✅Handle 404 errors with <code>notFound</code> function<a class="anchor" href="#handle-404-errors-with-notfound-function"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>For example, visit a fake UUID that doesn’t exist\n<ul>\n<li>visit <a href="http://localhost:3000/dashboard/invoices/2e94d1ed-d220-449f-9f11-f0bbceed9645/edit">http://localhost:3000/dashboard/invoices/2e94d1ed-d220-449f-9f11-f0bbceed9645/edit</a></li>\n</ul>\n</li>\n<li>In <code>/dashboard/invoices/[id]/edit/page.tsx</code>\n<ul>\n<li><code>import { notFound } from \'next/navigation\';</code></li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">if</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">invoice) {</span></span>\n<span class="line"><span style="color:#B392F0">\tnotFound</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li><code>&#x3C;Page></code> will now throw an error if a specific invoice is not found</li>\n<li>To show an error UI to the user\n<ul>\n<li>Create a <code>not-found.tsx</code> file inside the <code>/edit</code> folder</li>\n</ul>\n</li>\n<li><code>notFound</code> will take precedence over <code>error.tsx</code>, so you can reach out for it when you want to handle more specific errors</li>\n</ul>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://nextjs.org/docs/app/building-your-application/routing/error-handling">Error Handling</a></li>\n<li><a href="https://nextjs.org/docs/app/api-reference/file-conventions/error"><code>error.js</code> API Reference</a></li>\n<li><a href="https://nextjs.org/docs/app/api-reference/functions/not-found"><code>notFound()</code> API Reference</a></li>\n<li><a href="https://nextjs.org/docs/app/api-reference/file-conventions/not-found"><code>not-found.js</code> API Reference</a></li>\n</ul>\n<h2 id="accessibility">Accessibility<a class="anchor" href="#accessibility"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="what">What<a class="anchor" href="#what"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>a vast topic that covers many areas, such as keyboard navigation, semantic HTML, images, colors, videos, etc\n<ul>\n<li>recommend <a href="https://web.dev/learn/accessibility/">Learn Accessibility</a> course by <a href="https://web.dev/">web.dev</a></li>\n</ul>\n</li>\n<li>features available in Next.js\n<ul>\n<li><em>Server-side Form Validation</em></li>\n<li>use <code>eslint-plugin-jsx-a11y</code> with Next.js to implement accessibility best practices</li>\n<li>use the React <code>useFormState</code> hook to handle form errors, and display them to the user</li>\n</ul>\n</li>\n</ul>\n<h3 id="use-eslint-plugin-jsx-a11y-with-nextjs-to-implement-accessibility-best-practices">use <code>eslint-plugin-jsx-a11y</code> with Next.js to implement accessibility best practices<a class="anchor" href="#use-eslint-plugin-jsx-a11y-with-nextjs-to-implement-accessibility-best-practices"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to help catch accessibility issues early\n<ul>\n<li>warns if you have images without <code>alt</code> text, use the <code>aria-*</code> and <code>role</code> attributes incorrectly, and more</li>\n</ul>\n</li>\n<li>✅Add <code>next lint</code> as a script in your <code>package.json</code> file\n<ul>\n<li><code>"lint": "next lint"</code></li>\n<li><code>npm run lint</code></li>\n</ul>\n</li>\n<li><code>next lint</code> runs as part of the build process\n<ul>\n<li>If you tried to deploy your application to Vercel, the warning would also show up in the build logs</li>\n</ul>\n</li>\n</ul>\n<h3 id="form-accessibility">Form Accessibility<a class="anchor" href="#form-accessibility"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Semantic HTML\n<ul>\n<li>✅Using semantic elements (<code>&#x3C;input></code>, <code>&#x3C;option></code>, etc) instead of <code>&#x3C;div></code></li>\n<li>allows assistive technologies (AT) to focus on the input elements</li>\n<li>provide appropriate contextual information to the user</li>\n<li>making the form easier to navigate and understand</li>\n</ul>\n</li>\n<li>Labelling\n<ul>\n<li>✅Including <code>&#x3C;label></code> and the <code>htmlFor</code> attribute\n<ul>\n<li>ensures that each form field has a descriptive text label</li>\n</ul>\n</li>\n<li>improves AT support by providing context</li>\n<li>enhances usability by allowing users to click on the label to focus on the corresponding input field</li>\n</ul>\n</li>\n<li>Focus Outline\n<ul>\n<li>✅fields are properly styled to show an outline when they are in focus</li>\n<li>visually indicates the active element on the page</li>\n<li>helping both keyboard and screen reader users to understand where they are on the form</li>\n</ul>\n</li>\n<li>❌However, they don’t address <em>form validation</em> and <em>errors</em></li>\n</ul>\n<h3 id="form-validation">Form Validation<a class="anchor" href="#form-validation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>To prevent sending unexpected data to the server</li>\n<li>Client-Side validation\n<ul>\n<li>form validation provided by the browser by adding the <code>required</code> attribute to the <code>&#x3C;input></code> and <code>&#x3C;select></code> elements in your forms</li>\n</ul>\n</li>\n<li>Server-Side validation\n<ul>\n<li>Why\n<ul>\n<li>Ensure your data is in the expected format before sending it to your database</li>\n<li>Reduce the risk of malicious users bypassing client-side validation</li>\n<li>Have one source of truth for what is considered <em>valid</em> data</li>\n</ul>\n</li>\n<li>✅import the <code>useFormState</code> hook from <code>react-dom</code>\n<ul>\n<li>In your <code>create-form.tsx</code></li>\n<li>Returns two values: <code>[state, dispatch]</code>\n<ul>\n<li>the form state, and a dispatch function (similar to <a href="https://react.dev/reference/react/useReducer">useReducer</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> initialState</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> { message: </span><span style="color:#79B8FF">null</span><span style="color:#E1E4E8">, errors: {} };</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">state</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">dispatch</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useFormState</span><span style="color:#E1E4E8">(createInvoice, initialState);</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> &#x3C;</span><span style="color:#85E89D">form</span><span style="color:#B392F0"> action</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{dispatch}>...&#x3C;/</span><span style="color:#85E89D">form</span><span style="color:#E1E4E8">>;</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>✅use Zod to validate form data\n<ul>\n<li>\n<p>In your <code>action.ts</code></p>\n</li>\n<li>\n<p>change the Zod <code>parse()</code> function to <code>safeParse()</code></p>\n<ul>\n<li><code>safeParse()</code> will return an object containing either a <code>success</code> or <code>error</code> field</li>\n<li>will help handle validation more gracefully without having put this logic inside the <code>try/catch</code> block</li>\n</ul>\n</li>\n<li>\n<p>If <code>validatedFields</code> isn’t successful, we return the function early with the error messages from Zod.</p>\n</li>\n<li>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"></span></code></pre>\n</li>\n</ul>\nif (!validatedFields.success) {<br>\nreturn {<br>\nerrors: validatedFields.error.flatten().fieldErrors,<br>\nmessage: “Missing Fields. Failed to Create Invoice.”,<br>\n};<br>\n}</li>\n<li>console.log <code>validatedFields</code> and submit an empty form to see the shape of it</li>\n<li>✅display the errors in your form component\n<ul>\n<li>In your <code>create-form.tsx: &#x3C;select></code>\n<ul>\n<li><code>aria-describedby="customer-error"</code></li>\n<li>establishes a relationship between the <code>select</code> element and the error message container</li>\n<li>indicates that the container with <code>id="customer-error"</code> describes the <code>select</code> element</li>\n<li>Screen readers will read this description when the user interacts with the <code>select</code> box to notify them of errors</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">&#x3C;</span><span style="color:#85E89D">div</span><span style="color:#B392F0"> id</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"customer-error"</span><span style="color:#B392F0"> aria-live</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"polite"</span><span style="color:#B392F0"> aria-atomic</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"true"</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t{state.errors?.customerId </span><span style="color:#F97583">&#x26;&#x26;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tstate.errors.customerId.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">error</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t&#x3C;</span><span style="color:#85E89D">p</span><span style="color:#B392F0"> className</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"mt-2 text-sm text-red-500"</span><span style="color:#B392F0"> key</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{error}></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\t{error}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t))}</span></span>\n<span class="line"><span style="color:#E1E4E8">&#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>You can console.log <code>state</code> inside your component and check if everything is wired correctly</li>\n<li>The screen reader should politely notify the user when the error inside the <code>div</code> is updated\n<ul>\n<li>When the content changes (e.g. when a user corrects an error), the screen reader will announce these changes, but only when the user is idle so as not to interrupt them</li>\n<li>run <code>npm run lint</code> to check if you’re using the aria labels correctly</li>\n</ul>\n</li>\n</ul>\n<h2 id="authentication">📌<a href="Authentication">Authentication</a><a class="anchor" href="#authentication"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="how-to-add-authentication-to-your-application-using-nextauthjs-and-middleware">💡How to add authentication to your application using <a href="https://next-auth.js.org/"><code>NextAuth.js</code></a> and Middleware.<a class="anchor" href="#how-to-add-authentication-to-your-application-using-nextauthjs-and-middleware"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="intro-1">Intro<a class="anchor" href="#intro-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Ways to check identity\n<ul>\n<li>2-factor authentication (2FA)\n<ul>\n<li>send a verification code to your device or use an external app like Google Authenticator</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Authentication\n<ul>\n<li>proving your identity with something you have like a username and password</li>\n<li>checks who you are</li>\n</ul>\n</li>\n<li>Authorization\n<ul>\n<li>decides what parts of the application they are allowed to use</li>\n<li>determines what you can do or access in the application</li>\n</ul>\n</li>\n</ul>\n<h3 id="create-the-login-route">Create the login route<a class="anchor" href="#create-the-login-route"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>creating a new route in your application called <code>/login</code></li>\n</ul>\n<h3 id="-nextauthjs">📌 <a href="https://nextjs.authjs.dev/">NextAuth.js</a><a class="anchor" href="#-nextauthjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>\n<p>abstracts away much of the complexity involved in managing <em>sessions, sign-in and sign-out</em>, and other aspects of authentication</p>\n</li>\n<li>\n<p>Set up</p>\n<ul>\n<li><code>npm install next-auth@beta</code></li>\n<li><code>openssl rand -base64 32</code>\n<ul>\n<li>generate a secret key for your application</li>\n<li>used to encrypt cookies, ensuring the security of user sessions</li>\n</ul>\n</li>\n<li>In <code>.env</code>\n<ul>\n<li><code>AUTH_SECRET=your-secret-key</code></li>\n<li>add your generated key to the <code>AUTH_SECRET</code> variable</li>\n</ul>\n</li>\n<li>add environment variables on Vercel\n<ul>\n<li><a href="https://vercel.com/docs/projects/environment-variables">guide</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Create an <code>auth.config.ts</code> file at the root of our project</p>\n<ul>\n<li>contain the configuration options for NextAuth.js</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">  import</span><span style="color:#F97583"> type</span><span style="color:#E1E4E8"> { NextAuthConfig } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "next-auth"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  export</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> authConfig</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">  \tpages: {</span></span>\n<span class="line"><span style="color:#E1E4E8">  \t\tsignIn: </span><span style="color:#9ECBFF">"/login"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">  \t},</span></span>\n<span class="line"><span style="color:#E1E4E8">  };</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>can use the <code>pages</code> option to specify the route for custom sign-in, sign-out, and error pages\n<ul>\n<li>not required</li>\n<li>but by adding <code>signIn: \'/login\'</code> into our <code>pages</code> option, user will be redirected to our custom login page, rather than the NextAuth.js default page</li>\n</ul>\n</li>\n<li><code>authorized</code> callback is used to verify if the request is authorized to access a page\n<ul>\n<li>called before a request is completed</li>\n<li>receives an object with the <code>auth</code> and <code>request</code> properties\n<ul>\n<li>The <code>auth</code> property contains the user’s session</li>\n<li>the <code>request</code> property contains the incoming request</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>providers</code> option is an array where you list different login options.\n<ul>\n<li>For now, it’s an empty array to satisfy NextAuth config.</li>\n<li><a href="https://nextjs.org/learn/dashboard-app/adding-authentication#adding-the-credentials-provider">Learn Next.js: Adding Authentication | Next.js (nextjs.org)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Protect routes with <a href="https://nextjs.org/docs/app/building-your-application/routing/middleware">Next.js Middleware</a></p>\n<ul>\n<li>\n<p>Why</p>\n<ul>\n<li>💡prevent users from accessing the dashboard pages unless they are logged in</li>\n<li>the protected routes will not even start rendering until the Middleware verifies the authentication</li>\n</ul>\n</li>\n<li>\n<p>In the root of your project, create a file called <code>middleware.ts</code></p>\n<ul>\n<li>import the <code>authConfig</code> object into a Middleware file</li>\n<li>initializing NextAuth.js with the <code>authConfig</code> object</li>\n<li>exporting the <code>auth</code> property</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">  import</span><span style="color:#E1E4E8"> NextAuth </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "next-auth"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  import</span><span style="color:#E1E4E8"> { authConfig } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "./auth.config"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  export</span><span style="color:#F97583"> default</span><span style="color:#B392F0"> NextAuth</span><span style="color:#E1E4E8">(authConfig).auth;</span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>\n<p>using the <code>matcher</code> option from Middleware to specify that it should run on specific paths</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">  export</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> config</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">  \tmatcher: [</span><span style="color:#9ECBFF">"/((?!api|_next/static|_next/image|.*</span><span style="color:#79B8FF">\\\\</span><span style="color:#9ECBFF">.png$).*)"</span><span style="color:#E1E4E8">],</span></span>\n<span class="line"><span style="color:#E1E4E8">  };</span></span>\n<span class="line"></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Password Hashing</p>\n<ul>\n<li>hash passwords before storing them in a database\n<ul>\n<li>converts a password into a fixed-length string of characters</li>\n<li>appears random, providing a layer of security even if the user’s data is exposed</li>\n</ul>\n</li>\n<li><code>bcrypt</code> package in <code>seed.js</code>\n<ul>\n<li>to compare that the password entered by the user matches the one in the database</li>\n</ul>\n</li>\n<li>Create a new file called <code>auth.ts</code>\n<ul>\n<li>\n<p>Why</p>\n<ul>\n<li>need to create a separate file for the <code>bcrypt</code> package</li>\n<li>because <code>bcrypt</code> relies on Node.js APIs not available in Next.js Middleware</li>\n</ul>\n</li>\n<li>\n<p>spreads your <code>authConfig</code> object</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">  import</span><span style="color:#E1E4E8"> NextAuth </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "next-auth"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  import</span><span style="color:#E1E4E8"> { authConfig } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "./auth.config"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  export</span><span style="color:#F97583"> const</span><span style="color:#E1E4E8"> { </span><span style="color:#79B8FF">auth</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">signIn</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">signOut</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">=</span><span style="color:#B392F0"> NextAuth</span><span style="color:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#F97583">  \t...</span><span style="color:#E1E4E8">authConfig,</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>Add the Credentials provider</p>\n<ul>\n<li><code>providers</code> is an array where you list different login options such as Google or GitHub</li>\n<li>For this course, we will focus on using the <a href="https://authjs.dev/getting-started/providers/credentials-tutorial">Credentials provider</a> only.\n<ul>\n<li>allows users to log in with a username and a password</li>\n</ul>\n</li>\n<li>⚡recommended to use alternative providers such as <a href="https://authjs.dev/getting-started/providers/oauth-tutorial">OAuth</a> or <a href="https://authjs.dev/getting-started/providers/email-tutorial">email</a> providers\n<ul>\n<li>See the <a href="https://authjs.dev/getting-started/providers">NextAuth.js docs</a> for a full list of options</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Add the sign in functionality</p>\n<ul>\n<li>use the <code>authorize</code> function to handle the authentication logic</li>\n<li>can use <code>zod</code> to validate the email and password before checking if the user exists in the database</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Update the login form</p>\n<ul>\n<li>connect the auth logic with your login form</li>\n<li>In your <code>actions.ts</code> file</li>\n<li>in your <code>login-form.tsx</code> component\n<ul>\n<li>use React’s <code>useFormState</code> to call the server action and handle form errors</li>\n<li>use <code>useFormStatus</code> to handle the pending state of the form</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Add logout functionality</p>\n<ul>\n<li>💡to add the logout functionality to <code>&#x3C;SideNav /></code></li>\n<li>call the <code>signOut</code> function from <code>auth.ts</code> in your <code>&#x3C;form></code> element</li>\n</ul>\n</li>\n</ul>\n<h2 id="metadata">Metadata<a class="anchor" href="#metadata"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="how-to-add-metadata-and-prepare-your-application-for-social-sharing">How to add metadata and prepare your application for social sharing.<a class="anchor" href="#how-to-add-metadata-and-prepare-your-application-for-social-sharing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="what-1">What<a class="anchor" href="#what-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>provides additional details about a webpage</li>\n<li>works behind the scenes, embedded within the page’s HTML, usually within the <code>&#x3C;head></code> element</li>\n</ul>\n<h3 id="why-1">Why<a class="anchor" href="#why-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>enhancing a webpage’s SEO, making it more accessible and understandable for search engines and social media platforms</li>\n<li>Proper metadata helps search engines effectively index webpages, improving their ranking in search results</li>\n<li>metadata like Open Graph improves the appearance of shared links on social media, making the content more appealing and informative for users</li>\n</ul>\n<h3 id="types">Types<a class="anchor" href="#types"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Title\n<ul>\n<li>for the title of a webpage that is displayed on the browser tab</li>\n<li>crucial for SEO as it helps search engines understand what the webpage is about</li>\n<li><code>&#x3C;title>Page Title&#x3C;/title></code></li>\n</ul>\n</li>\n<li>Description\n<ul>\n<li>provides a brief overview of the webpage content and is often displayed in search engine results</li>\n<li><code>&#x3C;meta name="description" content="A brief description of the page content." /></code></li>\n</ul>\n</li>\n<li>Keyword\n<ul>\n<li>includes the keywords related to the webpage content, helping search engines index the page</li>\n<li><code>&#x3C;meta name="keywords" content="keyword1, keyword2, keyword3" /></code></li>\n</ul>\n</li>\n<li>Open Graph\n<ul>\n<li>enhances the way a webpage is represented when shared on social media platforms, providing information such as the title, description, and preview image</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">meta</span><span style="color:#B392F0"> property</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"og:title"</span><span style="color:#B392F0"> content</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"Title Here"</span><span style="color:#E1E4E8"> /></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">meta</span><span style="color:#B392F0"> property</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"og:description"</span><span style="color:#B392F0"> content</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"Description Here"</span><span style="color:#E1E4E8"> /></span></span>\n<span class="line"><span style="color:#E1E4E8">    &#x3C;</span><span style="color:#85E89D">meta</span><span style="color:#B392F0"> property</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"og:image"</span><span style="color:#B392F0"> content</span><span style="color:#E1E4E8">=</span><span style="color:#9ECBFF">"image_url_here"</span><span style="color:#E1E4E8"> /></span></span>\n<span class="line"></span></code></pre>\n<ul>\n<li>Favicon\n<ul>\n<li>links the favicon (a small icon) to the webpage, displayed in the browser’s address bar or tab</li>\n<li><code>&#x3C;link rel="icon" href="path/to/favicon.ico" /></code></li>\n</ul>\n</li>\n</ul>\n<h3 id="metadata-api">Metadata API<a class="anchor" href="#metadata-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to define your application metadata\n<ul>\n<li>to use these files for static metadata, or you can generate them programmatically within your project</li>\n<li>With both these options, Next.js will automatically generate the relevant <code>&#x3C;head></code> elements for your pages</li>\n</ul>\n</li>\n<li>2 ways\n<ul>\n<li>Config-based\n<ul>\n<li>Export a <a href="https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadata-object">static <code>metadata</code> object</a> or a dynamic <a href="https://nextjs.org/docs/app/api-reference/functions/generate-metadata#generatemetadata-function"><code>generateMetadata</code> function</a> in a <code>layout.js</code> or <code>page.js</code> file</li>\n</ul>\n</li>\n<li>File-based\n<ul>\n<li><code>favicon.ico</code>, <code>apple-icon.jpg</code>, and <code>icon.jpg</code>: Utilized for favicons and icons</li>\n<li><code>opengraph-image.jpg</code> and <code>twitter-image.jpg</code>: Employed for social media images</li>\n<li><code>robots.txt</code>: Provides instructions for search engine crawling</li>\n<li><code>sitemap.xml</code>: Offers information about the website’s structure</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Favicon and Open Graph Image\n<ul>\n<li>Move these images (<code>favicon.ico</code>, <code>opengraph-image.jpeg</code>) to the root of your <code>/app</code> folder</li>\n<li>After doing this, Next.js will automatically identify and use these files as your favicon and OG image</li>\n<li>can verify this by checking the <code>&#x3C;head></code> element of your application in dev tools</li>\n<li>can also create dynamic OG images using the <a href="https://nextjs.org/docs/app/api-reference/functions/image-response"><code>ImageResponse</code></a> constructor.</li>\n</ul>\n</li>\n<li>Page title and descriptions\n<ul>\n<li>\n<p>can also include a <a href="https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadata-fields"><code>metadata</code> object</a> from any <code>layout.js</code> or <code>page.js</code> file to add additional page information like title and description</p>\n</li>\n<li>\n<p>Any metadata in root <code>layout.js</code> will be inherited by all pages that use it</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">  import</span><span style="color:#E1E4E8"> { Metadata } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "next"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">  export</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> metadata</span><span style="color:#F97583">:</span><span style="color:#B392F0"> Metadata</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">  \ttitle: </span><span style="color:#9ECBFF">"Acme Dashboard"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">  \tdescription:</span></span>\n<span class="line"><span style="color:#9ECBFF">  \t\t"The official Next.js Course Dashboard, built with App Router."</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">  \tmetadataBase: </span><span style="color:#F97583">new</span><span style="color:#B392F0"> URL</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"https://next-learn-dashboard.vercel.sh"</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#E1E4E8">  };</span></span>\n<span class="line"></span></code></pre>\n</li>\n<li>\n<p>add a custom title for a specific page</p>\n<ul>\n<li>adding a <code>metadata</code> object to the page itself</li>\n<li>Metadata in nested pages will override the metadata in the parent</li>\n<li>To avoid repetition\n<ul>\n<li>use the <code>title.template</code> field in the <code>metadata</code> object\n<ul>\n<li>to define a template for your page titles</li>\n<li>can include the page title, and any other information you want to include</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="configuring">Configuring<a class="anchor" href="#configuring"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="environment-variables">Environment Variables<a class="anchor" href="#environment-variables"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://nextjs.org/docs/basic-features/environment-variables">Basic Features: Environment Variables | Next.js</a></li>\n</ul>\n<h2 id="bugpack_nextjs">🐛<a href="BugPack_NextJS">BugPack_NextJS</a><a class="anchor" href="#bugpack_nextjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>',frontmatter={title:"Next.js",topic:null,type:null,category:"Programming",difficulty:null,comment:null,draft:!0,Title:"NextJS.js",tags:["NextJS"],Type:"O",DateStarted:"2022-11-29T00:00:00.000Z",DateModified:"2024-05-10T00:00:00.000Z",Datereviewed:null,reviewed:null,status:["Organizing"],"mindmap-plugin":"basic",aliases:["Next.js"],"linter-yaml-title-alias":"Next.js",minutes:24,words:4765},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/next.js/o-nextjs.md",url=void 0;function rawContent(){return'# Next.js\n## Intro\n[Next.js Features (Pros & Cons)](nextjs-features-pros-cons)  \n[Next.js Rendering Methods](nextjs-rendering-methods)\n## Project-Init\n### Try-next (Manual Installation)\n- `npm install react@latest react-dom@latest next@latest`\n### Automatic Installation\n- `npx create-next-app@latest`\n  - a Command Line Interface (CLI) tool that sets up a Next.js application for you\n  - Dependencies\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/paste-image-1701323825262image.png)\n  - Time\n    - 2 mins\n- ✅ created a Next.js application using the starter example\n  - `npx create-next-app@latest nextjs-dashboard --use-npm --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example"`\n- [How to start a React, NextJS and TailwindCSS project](How-to-start-a-React,-NextJS-and-TailwindCSS-project)\n### Run the Dev Server\n- `npm run dev`\n- Visit `http://localhost:3000`\n### Fast Refresh\n- gives you instantaneous feedback on any edits you make\n- https://nextjs.org/docs/architecture/fast-refresh\n## Project Structure \n### `/app`\n- Contains all the routes, components, and logic for your application, this is where you\'ll be mostly working from.\n- `/app/lib`\n  - Contains functions used in your application, such as reusable utility functions and data fetching functions.\n  - ✅[Front-End Practice > 📌Placeholder Data](Front-End-Practice#📌Placeholder-Data)\n    - `app/lib/placeholder-data.js`\n    - you\'ll use this data to _seed_ your database (populate it with some initial data).\n  - ✅[TypeScript](TypeScript)\n    - `/app/lib/definitions.ts`\n      - manually define the types that will be returned from the database\n    - By using TypeScript, you can ensure you don\'t accidentally pass the wrong data format to your components or database\n    - We\'re manually declaring the data types, but for better type-safety, we recommend [Prisma](https://www.prisma.io/)\n      - automatically generates types based on your database schema.\n    - Next.js also comes with a [TypeScript plugin](https://nextjs.org/docs/app/building-your-application/configuring/typescript#typescript-plugin) for your code editor, to help with auto-completion and type-safety.\n- `/app/ui`\n  - Contains all the UI components for your application, such as cards, tables, and forms. To save time, we\'ve pre-styled these components for you.\n- `page.tsx`\n  - a special Next.js file that exports a React component, and it\'s required for the _route_ to be accessible\n  - It\'s the home page associated with the route `/`\n- `layout.tsx`\n  - was automatically created inside the app folder.\n  - the main layout of your application.\n  - can use it to add UI elements that are shared across all pages (e.g. navigation, footer, etc)\n### `/public`\n- Contains all the static assets for your application, such as images.\n### `/scripts`\n- Contains a seeding script that you\'ll use to populate your database in a later chapter.\n### Config files\n- `next.config.js`\n## Styling \n### conditionally add class names with the `clsx` utility package.\n- [`clsx`](https://www.npmjs.com/package/clsx) is a library that lets you toggle class names easily.\n## Optimizing Fonts and Images \n### Why\n- Layout Shift\n  - [Cumulative Layout Shift](https://web.dev/cls/)\n    - a metric used by Google to evaluate the performance and user experience of a website\n  - With fonts, layout shift happens when the browser initially renders text in a fallback or system font and then swaps it out for a custom font once it has loaded.\n### Fonts\n- 💡add custom fonts with `next/font`\n- ✅Add a primary font\n  - `app/ui/fonts.ts`\n    - use this file to keep the fonts that will be used throughout your application\n    - Import the `Inter` font from the `next/font/google` module - this will be your primary font.\n    - specify what [subset](https://fonts.google.com/knowledge/glossary/subsetting) you\'d like to load. In this case, `\'latin\'`\n  - add the font to the `<body>` element in `/app/layout.tsx`\n- ✅Add a secondary font\n  - import a secondary font called `Lusitana` and pass it to the `<p>` element in your `/app/page.tsx` file\n- [Optimizing: Fonts | Next.js (nextjs.org)](https://nextjs.org/docs/app/building-your-application/optimizing/fonts)\n- [Web fonts - Learn web development | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts)\n### Images\n- 💡add images with `next/image`\n- ✅`<Image>` Component\n  - an extension of the HTML `<img>` tag\n  - automatic image optimization\n    - Preventing layout shift automatically when images are loading\n    - Resizing images to avoid shipping large images to devices with a smaller viewport\n    - Lazy loading images by default (images load as they enter the viewport)\n    - Serving images in modern formats, like [WebP](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#webp) and [AVIF](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#avif_image), when the browser supports it\n  - It\'s good practice to set the `width` and `height` of your images to avoid layout shift\n    - should be an aspect ratio identical to the source image\n- Files inside `/public` can be referenced in your application.\n- [Optimizing: Images | Next.js (nextjs.org)](https://nextjs.org/docs/app/building-your-application/optimizing/images)\n- [Multimedia: Images - Learn web development | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia)\n### How fonts and images are optimized in Next.js\n## Routing \n### How to create nested layouts and pages using file-system routing.\n### 💡Nested Routing\n- Understand the role of folders and files when creating new route segments\n  - folders are used to create nested routes\n  - Each folder represents a route segment that maps to a URL segment\n- can create separate UIs for each route using `layout.tsx` and `page.tsx` files\n### ✅Create the `dashboard` routes/pages using file-system routing\n- To create a nested route, you can nest folders inside each other and add _`page.tsx`_ files inside them\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-nested-routing.png)\n### ✅Create a nested layout that can be shared between multiple dashboard pages\n- benefit of using _layouts_ in Next.js\n  - 💡Partial rendering\n    - only the page components update while the layout won\'t re-render\n    - [partial rendering](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#3-partial-rendering)\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-partial-rendering.png)\n### ✅Understand root layout\n- a [root layout](https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#root-layout-required) and is required\n- Any UI you add to the root layout will be shared across all pages in your application\n- You can use the root layout to modify your `<html>` and `<body>` tags, and add _metadata_\n## Optimizing Navigation/ Links\n### Why optimize navigation\n- traditionally use the `<a>` HTML element\n  - ❌There\'s a full page refresh on each page navigation\n- How navigation works in Next.js\n  - Automatic code-splitting and prefetching\n    - Next.js automatically code splits your application by route segments.\n      - pages become isolated\n      - If a certain page throws an error, the rest of the application will still work\n      - Different from a traditional React [SPA](https://developer.mozilla.org/en-US/docs/Glossary/SPA), where the browser loads all your application code on initial load\n    - whenever [`<Link>`](https://nextjs.org/docs/api-reference/next/link) components appear in the browser\'s viewport, Next.js automatically prefetches the code for the linked route in the background\n      - this is what makes the page transition near-instant\n  - [Routing: Linking and Navigating | Next.js (nextjs.org)](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works)\n### ✅`<Link>` Component\n- to link between pages in your application\n- allows you to do [client-side navigation](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works) with JavaScript\n- Use\n  - Import `Link` from `next/link`\n  - Replace the `<a>` tag with `<Link>`\n### ✅show an active link with the `usePathname()` hook\n- A common UI pattern is to show an active link to indicate to the user what page they are currently on\n  - To do this, you need to get the user\'s current path from the URL.\n  - Next.js provides a hook called [`usePathname()`](https://nextjs.org/docs/app/api-reference/functions/use-pathname) that you can use to check the path and implement this pattern\n- Use\n  - Add React\'s `"use client"` directive to the top of the file\n    - Since [`usePathname()`](https://nextjs.org/docs/app/api-reference/functions/use-pathname) is a hook,\n  - Import `usePathname()` from `next/navigation`\n- to conditionally apply class names when the link is active\n  - use the `clsx` library\n\n```jsx\nclassName={clsx(\n\t\'flex h-[48px] grow items-center justify-center gap-2 rounded bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600:flex-none:justify-start:p-2:px-3\',\n\t{\n\t\t\'bg-sky-100 text-blue-600\': pathname === link.href,\n\t},\n)}\n```\n\n## Deploying \n- [Vercel](../../front-end-tooling/deployment/vercel.md)\n## Data Fetching \n### 💡Approaches to fetching data: APIs, ORMs, SQL, etc\n### ❓API Layers\n- an intermediary layer between your application code and database\n- Cases\n  - using 3rd party services that provide an API\n  - fetching data from the client, you want to have an API layer that runs on the server to avoid exposing your database secrets to the client\n- In Next.js, you can create API endpoints using [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers)\n### ❓DB Queries\n- to write logic to interact with your database\n- For relational DB like Postgres\n  - Use _SQL_\n  - or an [ORM](https://vercel.com/docs/storage/vercel-postgres/using-an-orm#) like [Prisma](https://www.prisma.io/)\n- ✅Fetch data with Server Components\n  - Why\n    - If you are using _React Server Components_, you can skip the API layer, and query your database directly without risking exposing your database secrets to the client\n    - Server Components support _promises_, providing a simpler solution for asynchronous tasks like data fetching\n      - can use _`async/await` syntax_ without reaching out for `useEffect`, `useState` or data fetching libraries\n    - execute on the server, so you can keep expensive data fetches and logic on the server and only send the result to the client\n    - can query the database directly without an additional API layer\n- ✅Fetch data using SQL\n  - [Vercel Postgres SDK](https://vercel.com/docs/storage/vercel-postgres/sdk)\n    - provides protection against [SQL injections](https://vercel.com/docs/storage/vercel-postgres/sdk#preventing-sql-injections)\n  - Why\n    - When creating your API endpoints, you need to write logic to interact with your database\n    - SQL is the industry standard for querying relational databases (e.g. ORMs generate SQL under the hood)\n    - SQL is versatile, allowing you to fetch and manipulate specific data\n  - Go to `/app/lib/data.ts`\n    - importing the [`sql`](https://vercel.com/docs/storage/vercel-postgres/sdk#sql) function from `@vercel/postgres`\n      - This function allows you to query your database\n    - You can call `sql` inside any Server Component\n    - we\'ve kept all the data queries in the `data.ts` file, and you can import them into the components\n### Network/ Request waterfalls\n- ❌The data requests are unintentionally blocking each other, creating a _request waterfall_\n- A "waterfall" refers to a sequence of network requests that depend on the completion of previous requests.\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-waterfall-request.png)\n### Parallel data fetching using a JavaScript Pattern\n- In JavaScript, you can use the [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) or [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled) functions to initiate all promises at the same time\n  - Eg.\n    - in `data.ts`, we\'re using `Promise.all()` in the `fetchCardData()` function\n- Merits\n  - Start executing all data fetches at the same time, which can lead to performance gains\n  - Use a native JavaScript pattern that can be applied to any library or framework\n- ❌Downside\n  - what happens if one data request is slower than all the others\n## Rendering \n- [Next.js Rendering Methods](nextjs-rendering-methods)\n### Static Rendering\n- What\n  - ❌By default, Next.js _prerenders_ routes to improve performance, this is called _Static Rendering_\n    - if your data changes, it won\'t be reflected in your dashboard\n  - Data fetching and rendering happens on the server at build time (when you deploy) or during [revalidation](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data)\n  - The result can then be distributed and cached in a [Content Delivery Network (CDN)](https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default)\n- Why\n  - Faster website\n  - Reduced server load\n  - SEO\n- Case\n  - For\n    - useful for UI with no data or data that is shared across users, such as a static blog post or a product page\n### Dynamic Rendering\n- What\n  - content is rendered on the server for each user at _request time_ (when the user visits the page)\n- When to use\n  - Real-Time Data\n    - ideal for applications where data changes often\n  - User-Specific Content\n    - personalized content, such as dashboards or user profiles, and update the data based on user interaction\n  - Request Time Information\n    - to access information that can only be known at request time, such as cookies or the URL search parameters\n- ✅Approaches to make your dashboard dynamic\n  - By default, `@vercel/postgres` doesn\'t set its own caching semantics\n  - ✅can use a Next.js API called `unstable_noStore` inside your Server Components or data fetching functions to opt out of static rendering\n    - In your `data.ts`, import `unstable_noStore` from `next/cache`, and call it the top of your data fetching functions\n    - is an experimental API and may change in the future\n  - to use a stable API in your own projects, you can also use the [Segment Config Option](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config) `export const dynamic = "force-dynamic"`\n- Simulate a slow data fetch to see what happens\n  - ❌With dynamic rendering, your application is only as fast as your slowest data fetch\n### Streaming\n- What\n  - a data transfer technique that allows you to break down a route into smaller _chunks_ and _progressively_ stream them from the server to the client as they become ready\n    - works well with React\'s component model, as each component can be considered a _chunk_\n    - Chunks are rendered in parallel, reducing the overall load time\n  - can prevent slow data requests from blocking your whole page\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-streaming.png)\n- How\n  - At the page level, with the `loading.tsx` file\n    - ✅In the `/app/dashboard` folder, create a new file called `loading.tsx`\n      - a special Next.js file built on top of Suspense\n      - allows you to create fallback UI to show as a replacement while page content loads\n    - ✅Loading Skeletons\n      - simplified version of the UI\n      - Any UI you embed into `loading.tsx` will be embedded as part of the static file, and sent first\n    - ✅Route groups\n      - ❌Since `loading.tsx` is a level higher, it\'s also applied to child pages\n      - can change this with [Route Groups](https://nextjs.org/docs/app/building-your-application/routing/route-groups)\n        - Create a new folder called `/(overview)` inside the dashboard folder. Then, move your `loading.tsx` and `page.tsx` files inside the folder\n      - What\n        - Route groups allow you to organize files into logical groups without affecting the URL path structure\n        - When you create a new folder using parentheses `()`, the name won\'t be included in the URL path\n  - ✅For specific components, with `<Suspense>`\n    - _Suspense boundaries_\n      - can be more granular and stream specific components using React Suspense\n      - allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded)\n      - can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads\n      - to stream only the slowest data request and immediately show the rest of the page\'s UI\n    - Use\n      - move the data fetch to the component\n      - import `<Suspense>` from React, and wrap it around the component\n      - can pass it a fallback skeleton component\n      - update the `<RevenueChart>` component to fetch its own data\n    - _Group components_\n      - ❌ to wrap the `<Card>` components in Suspense. You can fetch data for each individual card, but this could lead to a _popping_ effect as the cards load in, this can be visually jarring for the user\n      - can use this pattern when you want multiple components to load in at the same time\n    - Decide where to put Suspense boundaries\n      - How you want the user to experience the page as it streams\n      - What content you want to prioritize\n      - If the components rely on data fetching\n### Partial Prerendering\n- Experimental feature\n## Search and Pagination \n### 💡How to implement search and pagination using URL Search Params.\n- Why use URL search params\n  - Bookmarkable and Shareable URLs\n  - Server-Side Rendering and Initial Load\n  - Analytics and Tracking\n    - easier to track user behavior without requiring additional client-side logic\n### ✅Capture the user\'s input\n- `<Search>` Component ("use client", a client component, which supports event listeners and hooks)\n### ✅Update the URL with search params\n- ⭐`useSearchParams` (from `\'next/navigation\'`)\n  - _Next.js client hooks_ that you\'ll use to implement the Search functionality\n  - Import the `useSearchParams` hook from `\'next/navigation\'`, and assign it to a variable\n  - the search params for this URL `/dashboard/invoices?page=1&query=pending` would look like this: `{page: \'1\', query: \'pending\'}`\n  - `const searchParams = useSearchParams()`\n- Inside `handleSearch,` create a new [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instance using your new `searchParams` variable\n  - `URLSearchParams` is a Web API that provides utility methods for manipulating the URL query parameters\n  - `const params = new URLSearchParams(searchParams)`\n- `usePathname`\n  - for the route `/dashboard/invoices`, `usePathname` would return `\'/dashboard/invoices\'`\n  - `const pathname = usePathname();`\n- `useRouter`\n  - Enables navigation between routes within client components programmatically. There are [multiple methods](https://nextjs.org/docs/app/api-reference/functions/use-router#userouter) you can use\n  - ` const { replace } = useRouter()`\n  - `replace( `\\${pathname}?\\${params.toString()}\\`)`\n    - As the user types into the search bar, `params.toString()` translates this input into a URL-friendly format\n    - updates the URL with the user\'s search data\n- The URL is updated without reloading the page, thanks to Next.js\'s client-side navigation (which you learned about in the chapter on [navigating between pages](https://nextjs.org/learn/dashboard-app/navigating-between-pages)\n### ✅Keep the URL and input in sync\n- pass a `defaultValue` to input by reading from `searchParams`\n  - To ensure the input field is in sync with the URL and will be populated when sharing\n  - `defaultValue={searchParams.get(\'query\')?.toString()`\n### ✅Update the table component to reflect the search query\n- ⭐Invoices page components [accept a prop called `searchParams`](https://nextjs.org/docs/app/api-reference/file-conventions/page), so you can pass the current URL params to the `<Table>` component\n- Difference\n  - `useSearchParams`\n    - For client component\n  - `searchParams`\n    - For server component\n### ✅Best practice: Debouncing\n- To keep things simple, we\'ll use a library called [`use-debounce`](https://www.npmjs.com/package/use-debounce)\n### ✅Add pagination\n- implement pagination using URL params\n- you can fetch the data on the server, and pass it to the component as a prop\n## Mutating Data \n### 💡adding the ability to create, update, and delete invoices\n- How to work with forms and Server Components\n  - `formData` object\n- Revalidate the client cache\n  - `revalidatePath` API\n- Create dynamic route segments\n  - with specific IDs\n- Optimistic updates\n  - React’s `useFormStatus` hook\n### React Server Actions\n- What\n  - allow you to run _asynchronous code_ directly on the server and can be invoked from your Client or Server Components\n  - eliminate the need to create API endpoints to mutate your data\n  - Security\n    - protecting against different types of attacks, securing your data, and ensuring _authorized access_\n    - Techniques\n      - POST requests\n      - encrypted closures\n      - strict input checks\n      - error message hashing\n      - host restrictions\n  - Use forms with Server Actions\n    - In React, you can use the `action` attribute in the `<form>` element to invoke actions\n    - The action will automatically receive the native [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object, containing the captured data\n      - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/full-stack/z-o-nextjs-server-actions.png)\n    - ⚡Benefit\n      - progressive enhancement - forms work even if JavaScript is disabled on the client\n    - ⚡Server Actions integrated with Next.js [caching](https://nextjs.org/docs/app/building-your-application/caching)\n      - can use the action to mutate data\n      - can revalidate the associated cache using APIs like `revalidatePath` and `revalidateTag`\n- Reference\n  - [How to Think About Security in Next.js | Next.js (nextjs.org)](https://nextjs.org/blog/security-nextjs-server-components-actions)\n### Create a new invoice\n- ✅Create a form to capture the user\'s input\n  - Create a new route and form\n    - `/invoices/crete/page.tsx`\n    - Create a `<Form>` component\n      - one `<select>` (dropdown) element with a list of _customers_\n      - one `<input>` element for the _amount_ with `type="number"`\n      - two `<input>` elements for the status with type="radio"\n      - one button with `type="submit"`\n- ✅Create a Server Action and invoke it from the form\n  - create a Server Action that is going to be called when the form is submitted\n  - `lib/actions.ts`\n    - `\'use server\'`\n    - `export async function createInvoice(formData: FormData) {}`\n  - `create-form.tsx`\n    - `import { createInvoice } from \'@/app/lib/actions\';`\n    - `<form action={createInvoice}>`\n  - you don\'t need to create API endpoints manually when using Server Actions\n    - In HTML, you\'d pass a URL to the `action` attribute. This URL would be the destination where your form data should be submitted (usually an API endpoint)\n    - in React, the `action` attribute is considered a special prop - meaning React builds on top of it to allow actions to be invoked\n    - Behind the scenes, Server Actions create a `POST` API endpoint.\n- ✅Inside your Server Action, extract the data from the `formData` object\n  - Methods you can use\n    - [FormData: append() method - Web APIs | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/API/FormData/append)\n\n```ts\n\tconst rawFormData = {\n\t\tcustomerId: formData.get("customerId"),\n\t\tamount: formData.get("amount"),\n\t\tstatus: formData.get("status"),\n\t};\n```\n\n  - Tips: forms that have many fields\n    - [`entries()`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries) method with JavaScript\'s [`Object.fromEntries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n      - `const rawFormData = Object.fromEntries(formData.entries())`\n- ✅Validate and prepare the data to be inserted into your database\n  - use [Zod](https://zod.dev/), a TypeScript-first validation library\n  - import zod\n    - `import { z } from \'zod\';`\n  - define a schema\n\n```ts\n\tconst FormSchema = z.object({\n\t\tid: z.string(),\n\t\tcustomerId: z.string(),\n\t\tamount: z.coerce.number(),\n\t\tstatus: z.enum(["pending", "paid"]),\n\t\tdate: z.string(),\n\t});\n```\n\n- `const CreateInvoice = FormSchema.omit({ id: true, date: true });`\n    - The `amount` field is specifically set to coerce (change) from a string to a number while also validating its type.\n  - pass your `rawFormData` to `CreateInvoice` to validate the types\n\n```ts\nexport async function createInvoice(formData: FormData) {\n\tconst { customerId, amount, status } = CreateInvoice.parse({\n\t\tcustomerId: formData.get("customerId"),\n\t\tamount: formData.get("amount"),\n\t\tstatus: formData.get("status"),\n\t});\n}\n```\n\n  - Store values in cents to avoid JS floating-point error\n    - `const amountInCents = amount * 100;`\n  - Create new dates\n    - with the format "YYYY-MM-DD" for the invoice\'s creation date\n      - `const date = new Date().toISOString().split(\'T\')[0];`\n- ✅Insert the data\n  - create an SQL query to insert the new invoice into your database and pass in the variables\n- handle errors\n  - 📌See next chapter\n- ✅Revalidate the cache and redirect the user back to invoices page\n  - To revalidate\n    - Why\n      - Next.js has a [Client-side Router Cache](https://nextjs.org/docs/app/building-your-application/caching#router-cache) that stores the route segments in the user\'s browser\n      - [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#1-prefetching),\n        - the cache ensures that users can quickly navigate between routes while reducing the number of requests made to the server\n      - 💡to clear this cache and trigger a new request to the server\n    - [`revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath) function from Next.js `next/cache`\n      - Once the database has been updated, the `/dashboard/invoices` path will be revalidated, and fresh data will be fetched from the server\n  - to redirect the user back\n    - `import { redirect } from \'next/navigation\';`\n    - `redirect(\'/dashboard/invoices\');`\n### Update an invoice\n- 💡need to pass the invoice `id` to update the record in your database\n- ✅create [Dynamic Route Segments](https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes)\n  - Create a new dynamic route segment with the invoice `id`\n  - `invoices/[id]/edit/page.tsx`\n- ✅update the `href` of the `Link` to accept the `id` prop\n  - In `invoices/buttons.tsx` / `<UpdateInvoice />`\n  - `` href={`/dashboard/invoices/${id}/edit`} ``\n- ✅Read the invoice `id` from the page `params`\n\n```ts\nexport default async function Page({ params }: { params: { id: string } }) {\n\tconst id = params.id;\n\t// ...\n}\n```\n\n- ✅Fetch the specific invoice from your database\n  - To pre-populate the form with the invoice data\n  - `import { fetchInvoiceById, fetchCustomers } from \'@/app/lib/data\';`\n\n```ts\nconst [invoice, customers] = await Promise.all([\n\tfetchInvoiceById(id),\n\tfetchCustomers(),\n]);\n```\n\n  - The URL should also be updated with an `id` as follows: `http://localhost:3000/dashboard/invoice/uuid/edit`\n  - 📌UUIDs vs. Auto-incrementing Keys\n    - UUIDs eliminate the risk of ID collision, are globally unique, and reduce the risk of enumeration attacks - making them ideal for large databases\n    - if you prefer cleaner URLs, you might prefer to use auto-incrementing keys\n- ✅Update the invoice data in your database\n  - to pass the `id` to the Server Action so you can update the right record in your database\n  - can pass `id` to the Server Action using JS `bind`\n    - will ensure that any values passed to the Server Action are encoded\n  - in your `actions.ts` file, create a new action, `updateInvoice`\n### Delete an invoice\n- wrap the delete button in a `<form>` element and pass the `id` to the Server Action using `bind`\n  - In `invoices/buttons.tsx` / `<DeleteInvoice />`\n  - `const deleteInvoiceWithId = deleteInvoice.bind(null, id);`\n  - ` <form action={deleteInvoiceWithId}> </form>`\n- In `actions.ts`\n\n```ts\nexport async function deleteInvoice(id: string) {\n\tawait sql`DELETE FROM invoices WHERE id = ${id}`;\n\trevalidatePath("/dashboard/invoices");\n}\n```\n\n- Since this action is being called in the `/dashboard/invoices` path, you don\'t need to call `redirect`\n  - Calling `revalidatePath` will trigger a new server request and re-render the table\n## Error Handling \n### 💡How to handle general and `404` not found errors.\n- use the special `error.tsx` file to catch errors in your route segments, and show a fallback UI to the user\n- use the `notFound` function and `not-found` file to handle 404 errors (for resources that don’t exist)\n### ✅Add `try-catch` to Server Actions\n- `redirect` is being called outside of the `try/catch` block\n  - because `redirect` works by throwing an error, which would be caught by the `catch` block\n### ✅Next.js [`error.tsx`](https://nextjs.org/docs/app/api-reference/file-conventions/error) file\n- Why \n  - to show errors to the user to avoid an abrupt failure and allow your application to continue running\n  - can be used to define a UI boundary for a route segment\n  - serves as a catch-all for unexpected errors\n  - allows you to display a fallback UI to your users\n- `"use client"`\n  - `error.tsx` needs to be a Client Component\n- accepts two props\n  - `error`\n    - an instance of JavaScript\'s native [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object\n  - `reset`\n    - a function to reset the error boundary\n    - When executed, the function will try to re-render the route segment\n### ✅Handle 404 errors with `notFound` function\n- For example, visit a fake UUID that doesn\'t exist\n  - visit [http://localhost:3000/dashboard/invoices/2e94d1ed-d220-449f-9f11-f0bbceed9645/edit](http://localhost:3000/dashboard/invoices/2e94d1ed-d220-449f-9f11-f0bbceed9645/edit)\n- In `/dashboard/invoices/[id]/edit/page.tsx`\n  - `import { notFound } from \'next/navigation\';`\n\n```tsx\nif (!invoice) {\n\tnotFound();\n}\n```\n\n  - `<Page>` will now throw an error if a specific invoice is not found\n- To show an error UI to the user\n  - Create a `not-found.tsx` file inside the `/edit` folder\n- `notFound` will take precedence over `error.tsx`, so you can reach out for it when you want to handle more specific errors\n### Reference\n- [Error Handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling)\n- [`error.js` API Reference](https://nextjs.org/docs/app/api-reference/file-conventions/error)\n- [`notFound()` API Reference](https://nextjs.org/docs/app/api-reference/functions/not-found)\n- [`not-found.js` API Reference](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n## Accessibility \n### What\n- a vast topic that covers many areas, such as keyboard navigation, semantic HTML, images, colors, videos, etc\n  - recommend [Learn Accessibility](https://web.dev/learn/accessibility/) course by [web.dev](https://web.dev/)\n- features available in Next.js\n  - _Server-side Form Validation_\n  - use `eslint-plugin-jsx-a11y` with Next.js to implement accessibility best practices\n  - use the React `useFormState` hook to handle form errors, and display them to the user\n### use `eslint-plugin-jsx-a11y` with Next.js to implement accessibility best practices\n- to help catch accessibility issues early\n  - warns if you have images without `alt` text, use the `aria-*` and `role` attributes incorrectly, and more\n- ✅Add `next lint` as a script in your `package.json` file\n  - `"lint": "next lint"`\n  - `npm run lint`\n- `next lint` runs as part of the build process\n  - If you tried to deploy your application to Vercel, the warning would also show up in the build logs\n### Form Accessibility\n- Semantic HTML\n  - ✅Using semantic elements (`<input>`, `<option>`, etc) instead of `<div>`\n  - allows assistive technologies (AT) to focus on the input elements\n  - provide appropriate contextual information to the user\n  - making the form easier to navigate and understand\n- Labelling\n  - ✅Including `<label>` and the `htmlFor` attribute\n    - ensures that each form field has a descriptive text label\n  - improves AT support by providing context\n  - enhances usability by allowing users to click on the label to focus on the corresponding input field\n- Focus Outline\n  - ✅fields are properly styled to show an outline when they are in focus\n  - visually indicates the active element on the page\n  - helping both keyboard and screen reader users to understand where they are on the form\n- ❌However, they don\'t address _form validation_ and _errors_\n### Form Validation\n- To prevent sending unexpected data to the server\n- Client-Side validation\n  - form validation provided by the browser by adding the `required` attribute to the `<input>` and `<select>` elements in your forms\n- Server-Side validation\n  - Why\n    - Ensure your data is in the expected format before sending it to your database\n    - Reduce the risk of malicious users bypassing client-side validation\n    - Have one source of truth for what is considered _valid_ data\n  - ✅import the `useFormState` hook from `react-dom`\n    - In your `create-form.tsx`\n    - Returns two values: `[state, dispatch]` \n\t    - the form state, and a dispatch function (similar to [useReducer](https://react.dev/reference/react/useReducer))\n\n```tsx\n\tconst initialState = { message: null, errors: {} };\n\tconst [state, dispatch] = useFormState(createInvoice, initialState);\n\treturn <form action={dispatch}>...</form>;\n```\n\n  - ✅use Zod to validate form data\n    - In your `action.ts`\n    - change the Zod `parse()` function to `safeParse()`\n      - `safeParse()` will return an object containing either a `success` or `error` field\n      - will help handle validation more gracefully without having put this logic inside the `try/catch` block\n    - If `validatedFields` isn\'t successful, we return the function early with the error messages from Zod.\n\n\t- ```ts\n\n\tif (!validatedFields.success) {  \n\t\treturn {  \n\t\t\terrors: validatedFields.error.flatten().fieldErrors,  \n\t\t\tmessage: "Missing Fields. Failed to Create Invoice.",  \n\t\t};  \n\t}\n- console.log `validatedFields` and submit an empty form to see the shape of it\n- ✅display the errors in your form component\n\t- In your `create-form.tsx: <select>`\n\t\t- `aria-describedby="customer-error"`\n\t\t- establishes a relationship between the `select` element and the error message container\n\t\t- indicates that the container with `id="customer-error"` describes the `select` element\n\t\t- Screen readers will read this description when the user interacts with the `select` box to notify them of errors\n\n```tsx\n<div id="customer-error" aria-live="polite" aria-atomic="true">\n\t{state.errors?.customerId &&\n\t\tstate.errors.customerId.map((error: string) => (\n\t\t\t<p className="mt-2 text-sm text-red-500" key={error}>\n\t\t\t\t{error}\n\t\t\t</p>\n\t\t))}\n</div>\n```\n\n- You can console.log `state` inside your component and check if everything is wired correctly\n- The screen reader should politely notify the user when the error inside the `div` is updated\n\t- When the content changes (e.g. when a user corrects an error), the screen reader will announce these changes, but only when the user is idle so as not to interrupt them\n  - run `npm run lint` to check if you\'re using the aria labels correctly\n## 📌[Authentication](Authentication) \n### 💡How to add authentication to your application using [`NextAuth.js`](https://next-auth.js.org/) and Middleware.\n### Intro\n- Ways to check identity\n  - 2-factor authentication (2FA)\n    - send a verification code to your device or use an external app like Google Authenticator\n- Authentication\n  - proving your identity with something you have like a username and password\n  - checks who you are\n- Authorization\n  - decides what parts of the application they are allowed to use\n  - determines what you can do or access in the application\n### Create the login route\n- creating a new route in your application called `/login`\n### 📌 [NextAuth.js](https://nextjs.authjs.dev/) \n- abstracts away much of the complexity involved in managing _sessions, sign-in and sign-out_, and other aspects of authentication\n- Set up\n  - `npm install next-auth@beta`\n  - `openssl rand -base64 32`\n    - generate a secret key for your application\n    - used to encrypt cookies, ensuring the security of user sessions\n  - In `.env`\n    - `AUTH_SECRET=your-secret-key`\n    - add your generated key to the `AUTH_SECRET` variable\n  - add environment variables on Vercel\n    - [guide](https://vercel.com/docs/projects/environment-variables)\n- Create an `auth.config.ts` file at the root of our project\n  - contain the configuration options for NextAuth.js\n\n  ```ts\n    import type { NextAuthConfig } from "next-auth";\n    export const authConfig = {\n    \tpages: {\n    \t\tsignIn: "/login",\n    \t},\n    };\n    ```\n\n  - can use the `pages` option to specify the route for custom sign-in, sign-out, and error pages\n    - not required\n    - but by adding `signIn: \'/login\'` into our `pages` option, user will be redirected to our custom login page, rather than the NextAuth.js default page\n  - `authorized` callback is used to verify if the request is authorized to access a page\n    - called before a request is completed\n    - receives an object with the `auth` and `request` properties\n      - The `auth` property contains the user\'s session\n      - the `request` property contains the incoming request\n  - `providers` option is an array where you list different login options.\n    - For now, it\'s an empty array to satisfy NextAuth config.\n    - [Learn Next.js: Adding Authentication | Next.js (nextjs.org)](https://nextjs.org/learn/dashboard-app/adding-authentication#adding-the-credentials-provider)\n- Protect routes with [Next.js Middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n  - Why\n    - 💡prevent users from accessing the dashboard pages unless they are logged in\n    - the protected routes will not even start rendering until the Middleware verifies the authentication\n  - In the root of your project, create a file called `middleware.ts`\n    - import the `authConfig` object into a Middleware file\n    - initializing NextAuth.js with the `authConfig` object\n    - exporting the `auth` property\n\n    ```ts\n      import NextAuth from "next-auth";\n      import { authConfig } from "./auth.config";\n      export default NextAuth(authConfig).auth;\n      ```\n\n    - using the `matcher` option from Middleware to specify that it should run on specific paths\n\n      ```ts\n        export const config = {\n        \tmatcher: ["/((?!api|_next/static|_next/image|.*\\\\.png$).*)"],\n        };\n        ```\n\n- Password Hashing\n  - hash passwords before storing them in a database\n    - converts a password into a fixed-length string of characters\n    - appears random, providing a layer of security even if the user\'s data is exposed\n  - `bcrypt` package in `seed.js`\n    - to compare that the password entered by the user matches the one in the database\n  - Create a new file called `auth.ts`\n    - Why\n      - need to create a separate file for the `bcrypt` package\n      - because `bcrypt` relies on Node.js APIs not available in Next.js Middleware\n    - spreads your `authConfig` object\n\n      ```ts\n        import NextAuth from "next-auth";\n        import { authConfig } from "./auth.config";\n        export const { auth, signIn, signOut } = NextAuth({\n        \t...authConfig,\n        });\n        ```\n\n    - Add the Credentials provider\n      - `providers` is an array where you list different login options such as Google or GitHub\n      - For this course, we will focus on using the [Credentials provider](https://authjs.dev/getting-started/providers/credentials-tutorial) only.\n        - allows users to log in with a username and a password\n      - ⚡recommended to use alternative providers such as [OAuth](https://authjs.dev/getting-started/providers/oauth-tutorial) or [email](https://authjs.dev/getting-started/providers/email-tutorial) providers\n        - See the [NextAuth.js docs](https://authjs.dev/getting-started/providers) for a full list of options\n    - Add the sign in functionality\n      - use the `authorize` function to handle the authentication logic\n      - can use `zod` to validate the email and password before checking if the user exists in the database\n- Update the login form\n  - connect the auth logic with your login form\n  - In your `actions.ts` file\n  - in your `login-form.tsx` component\n    - use React\'s `useFormState` to call the server action and handle form errors\n    - use `useFormStatus` to handle the pending state of the form\n- Add logout functionality\n  - 💡to add the logout functionality to `<SideNav />`\n  - call the `signOut` function from `auth.ts` in your `<form>` element\n## Metadata \n### How to add metadata and prepare your application for social sharing.\n### What\n- provides additional details about a webpage\n- works behind the scenes, embedded within the page\'s HTML, usually within the `<head>` element\n### Why\n- enhancing a webpage\'s SEO, making it more accessible and understandable for search engines and social media platforms\n- Proper metadata helps search engines effectively index webpages, improving their ranking in search results\n- metadata like Open Graph improves the appearance of shared links on social media, making the content more appealing and informative for users\n### Types\n- Title\n  - for the title of a webpage that is displayed on the browser tab\n  - crucial for SEO as it helps search engines understand what the webpage is about\n  - `<title>Page Title</title>`\n- Description\n  - provides a brief overview of the webpage content and is often displayed in search engine results\n  - `<meta name="description" content="A brief description of the page content." />`\n- Keyword\n  - includes the keywords related to the webpage content, helping search engines index the page\n  - `<meta name="keywords" content="keyword1, keyword2, keyword3" />`\n- Open Graph\n  - enhances the way a webpage is represented when shared on social media platforms, providing information such as the title, description, and preview image\n\n```html\n    <meta property="og:title" content="Title Here" />\n    <meta property="og:description" content="Description Here" />\n    <meta property="og:image" content="image_url_here" />\n```\n\n- Favicon\n  - links the favicon (a small icon) to the webpage, displayed in the browser\'s address bar or tab\n  - `<link rel="icon" href="path/to/favicon.ico" />`\n### Metadata API\n- to define your application metadata\n  - to use these files for static metadata, or you can generate them programmatically within your project\n  - With both these options, Next.js will automatically generate the relevant `<head>` elements for your pages\n- 2 ways\n  - Config-based\n    - Export a [static `metadata` object](https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadata-object) or a dynamic [`generateMetadata` function](https://nextjs.org/docs/app/api-reference/functions/generate-metadata#generatemetadata-function) in a `layout.js` or `page.js` file\n  - File-based\n    - `favicon.ico`, `apple-icon.jpg`, and `icon.jpg`: Utilized for favicons and icons\n    - `opengraph-image.jpg` and `twitter-image.jpg`: Employed for social media images\n    - `robots.txt`: Provides instructions for search engine crawling\n    - `sitemap.xml`: Offers information about the website\'s structure\n- Favicon and Open Graph Image\n  - Move these images (`favicon.ico`, `opengraph-image.jpeg`) to the root of your `/app` folder\n  - After doing this, Next.js will automatically identify and use these files as your favicon and OG image\n  - can verify this by checking the `<head>` element of your application in dev tools\n  - can also create dynamic OG images using the [`ImageResponse`](https://nextjs.org/docs/app/api-reference/functions/image-response) constructor.\n- Page title and descriptions\n  - can also include a [`metadata` object](https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadata-fields) from any `layout.js` or `page.js` file to add additional page information like title and description\n  - Any metadata in root `layout.js` will be inherited by all pages that use it\n\n    ```tsx\n      import { Metadata } from "next";\n      export const metadata: Metadata = {\n      \ttitle: "Acme Dashboard",\n      \tdescription:\n      \t\t"The official Next.js Course Dashboard, built with App Router.",\n      \tmetadataBase: new URL("https://next-learn-dashboard.vercel.sh"),\n      };\n      ```\n\n  - add a custom title for a specific page\n    - adding a `metadata` object to the page itself\n    - Metadata in nested pages will override the metadata in the parent\n    - To avoid repetition\n      - use the `title.template` field in the `metadata` object\n        - to define a template for your page titles\n        - can include the page title, and any other information you want to include\n## Configuring \n### Environment Variables\n- [Basic Features: Environment Variables | Next.js](https://nextjs.org/docs/basic-features/environment-variables)\n## 🐛[BugPack_NextJS](BugPack_NextJS)\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"nextjs",text:"Next.js#"},{depth:2,slug:"intro",text:"Intro#"},{depth:2,slug:"project-init",text:"Project-Init#"},{depth:3,slug:"try-next-manual-installation",text:"Try-next (Manual Installation)#"},{depth:3,slug:"automatic-installation",text:"Automatic Installation#"},{depth:3,slug:"run-the-dev-server",text:"Run the Dev Server#"},{depth:3,slug:"fast-refresh",text:"Fast Refresh#"},{depth:2,slug:"project-structure",text:"Project Structure#"},{depth:3,slug:"app",text:"/app#"},{depth:3,slug:"public",text:"/public#"},{depth:3,slug:"scripts",text:"/scripts#"},{depth:3,slug:"config-files",text:"Config files#"},{depth:2,slug:"styling",text:"Styling#"},{depth:3,slug:"conditionally-add-class-names-with-the-clsx-utility-package",text:"conditionally add class names with the clsx utility package.#"},{depth:2,slug:"optimizing-fonts-and-images",text:"Optimizing Fonts and Images#"},{depth:3,slug:"why",text:"Why#"},{depth:3,slug:"fonts",text:"Fonts#"},{depth:3,slug:"images",text:"Images#"},{depth:3,slug:"how-fonts-and-images-are-optimized-in-nextjs",text:"How fonts and images are optimized in Next.js#"},{depth:2,slug:"routing",text:"Routing#"},{depth:3,slug:"how-to-create-nested-layouts-and-pages-using-file-system-routing",text:"How to create nested layouts and pages using file-system routing.#"},{depth:3,slug:"nested-routing",text:"💡Nested Routing#"},{depth:3,slug:"create-the-dashboard-routespages-using-file-system-routing",text:"✅Create the dashboard routes/pages using file-system routing#"},{depth:3,slug:"create-a-nested-layout-that-can-be-shared-between-multiple-dashboard-pages",text:"✅Create a nested layout that can be shared between multiple dashboard pages#"},{depth:3,slug:"understand-root-layout",text:"✅Understand root layout#"},{depth:2,slug:"optimizing-navigation-links",text:"Optimizing Navigation/ Links#"},{depth:3,slug:"why-optimize-navigation",text:"Why optimize navigation#"},{depth:3,slug:"link-component",text:"✅<Link> Component#"},{depth:3,slug:"show-an-active-link-with-the-usepathname-hook",text:"✅show an active link with the usePathname() hook#"},{depth:2,slug:"deploying",text:"Deploying#"},{depth:2,slug:"data-fetching",text:"Data Fetching#"},{depth:3,slug:"approaches-to-fetching-data-apis-orms-sql-etc",text:"💡Approaches to fetching data: APIs, ORMs, SQL, etc#"},{depth:3,slug:"api-layers",text:"❓API Layers#"},{depth:3,slug:"db-queries",text:"❓DB Queries#"},{depth:3,slug:"network-request-waterfalls",text:"Network/ Request waterfalls#"},{depth:3,slug:"parallel-data-fetching-using-a-javascript-pattern",text:"Parallel data fetching using a JavaScript Pattern#"},{depth:2,slug:"rendering",text:"Rendering#"},{depth:3,slug:"static-rendering",text:"Static Rendering#"},{depth:3,slug:"dynamic-rendering",text:"Dynamic Rendering#"},{depth:3,slug:"streaming",text:"Streaming#"},{depth:3,slug:"partial-prerendering",text:"Partial Prerendering#"},{depth:2,slug:"search-and-pagination",text:"Search and Pagination#"},{depth:3,slug:"how-to-implement-search-and-pagination-using-url-search-params",text:"💡How to implement search and pagination using URL Search Params.#"},{depth:3,slug:"capture-the-users-input",text:"✅Capture the user’s input#"},{depth:3,slug:"update-the-url-with-search-params",text:"✅Update the URL with search params#"},{depth:3,slug:"keep-the-url-and-input-in-sync",text:"✅Keep the URL and input in sync#"},{depth:3,slug:"update-the-table-component-to-reflect-the-search-query",text:"✅Update the table component to reflect the search query#"},{depth:3,slug:"best-practice-debouncing",text:"✅Best practice: Debouncing#"},{depth:3,slug:"add-pagination",text:"✅Add pagination#"},{depth:2,slug:"mutating-data",text:"Mutating Data#"},{depth:3,slug:"adding-the-ability-to-create-update-and-delete-invoices",text:"💡adding the ability to create, update, and delete invoices#"},{depth:3,slug:"react-server-actions",text:"React Server Actions#"},{depth:3,slug:"create-a-new-invoice",text:"Create a new invoice#"},{depth:3,slug:"update-an-invoice",text:"Update an invoice#"},{depth:3,slug:"delete-an-invoice",text:"Delete an invoice#"},{depth:2,slug:"error-handling",text:"Error Handling#"},{depth:3,slug:"how-to-handle-general-and-404-not-found-errors",text:"💡How to handle general and 404 not found errors.#"},{depth:3,slug:"add-try-catch-to-server-actions",text:"✅Add try-catch to Server Actions#"},{depth:3,slug:"nextjs-errortsx-file",text:"✅Next.js error.tsx file#"},{depth:3,slug:"handle-404-errors-with-notfound-function",text:"✅Handle 404 errors with notFound function#"},{depth:3,slug:"reference",text:"Reference#"},{depth:2,slug:"accessibility",text:"Accessibility#"},{depth:3,slug:"what",text:"What#"},{depth:3,slug:"use-eslint-plugin-jsx-a11y-with-nextjs-to-implement-accessibility-best-practices",text:"use eslint-plugin-jsx-a11y with Next.js to implement accessibility best practices#"},{depth:3,slug:"form-accessibility",text:"Form Accessibility#"},{depth:3,slug:"form-validation",text:"Form Validation#"},{depth:2,slug:"authentication",text:"📌Authentication#"},{depth:3,slug:"how-to-add-authentication-to-your-application-using-nextauthjs-and-middleware",text:"💡How to add authentication to your application using NextAuth.js and Middleware.#"},{depth:3,slug:"intro-1",text:"Intro#"},{depth:3,slug:"create-the-login-route",text:"Create the login route#"},{depth:3,slug:"-nextauthjs",text:"📌 NextAuth.js#"},{depth:2,slug:"metadata",text:"Metadata#"},{depth:3,slug:"how-to-add-metadata-and-prepare-your-application-for-social-sharing",text:"How to add metadata and prepare your application for social sharing.#"},{depth:3,slug:"what-1",text:"What#"},{depth:3,slug:"why-1",text:"Why#"},{depth:3,slug:"types",text:"Types#"},{depth:3,slug:"metadata-api",text:"Metadata API#"},{depth:2,slug:"configuring",text:"Configuring#"},{depth:3,slug:"environment-variables",text:"Environment Variables#"},{depth:2,slug:"bugpack_nextjs",text:"🐛BugPack_NextJS#"}]}const Content=createComponent(((e,n,t)=>{const{layout:a,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};