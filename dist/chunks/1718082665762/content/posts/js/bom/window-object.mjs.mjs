import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="window-object">Window Object<a class="anchor" href="#window-object"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="定义">定义<a class="anchor" href="#定义"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>BOM 的核心是 window 对象\n<ul>\n<li>all variables and functions declared in the global scope become properties on window.</li>\n</ul>\n</li>\n<li>浏览器将 window 对象实现为 Global 对象的代理\n<ul>\n<li>网页中定义的所有 对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 parseInt()等全局方法</li>\n<li>很多浏览器 API 及相关构造函数 都以 window 对象属性的形式暴露出来</li>\n</ul>\n</li>\n<li>The Global Scope</li>\n</ul>\n<h2 id="window-relationships">Window Relationships<a class="anchor" href="#window-relationships"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>top 对象\n<ul>\n<li>始终指向最上层（最外层）窗口，即浏览器窗口本身</li>\n</ul>\n</li>\n<li>parent 对象</li>\n<li>self 对象\n<ul>\n<li>是终极 window 属性，始终会指向 window</li>\n<li>self 和 window 就 是同一个对象</li>\n</ul>\n</li>\n<li>可以把访问多个窗口的 window 对象串联起来，比如 window.parent.parent</li>\n</ul>\n<h2 id="window-position-and-pixel-ratio">Window Position and Pixel Ratio<a class="anchor" href="#window-position-and-pixel-ratio"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>screenLeft</li>\n<li>screenTop 属性\n<ul>\n<li>用于表示窗口相对于屏幕左侧和顶部的位置 ，返回值的单位是 CSS 像素</li>\n</ul>\n</li>\n<li>moveTo()和 moveBy()方法\n<ul>\n<li>移动窗口</li>\n<li>moveTo()接 收要移动到的新位置的绝对坐标 x 和 y</li>\n<li>moveBy()则接收相对当前位置在两个方向上移动的像素数</li>\n</ul>\n</li>\n<li>像素比\n<ul>\n<li>window.devicePixelRatio 属性</li>\n</ul>\n</li>\n</ul>\n<h2 id="window-size">Window Size<a class="anchor" href="#window-size"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>outerWidth 和 outerHeight\n<ul>\n<li>返回浏 览器窗口自身的大小（不管是在最外层 window 上使用，还是在窗格中使用）</li>\n</ul>\n</li>\n<li>innerWidth 和 innerHeight\n<ul>\n<li>确定页面视口的大小,（不包含浏览器边框和工具栏）</li>\n</ul>\n</li>\n<li>document.documentElement.clientWidth 和 document.documentElement.clientHeight\n<ul>\n<li>返回页面视口的宽度和高度</li>\n</ul>\n</li>\n<li>resizeTo()\n<ul>\n<li>接收新的宽度和高度值</li>\n</ul>\n</li>\n<li>resizeBy()\n<ul>\n<li>接收宽度和高度各要缩放多少</li>\n</ul>\n</li>\n</ul>\n<h2 id="window-viewport-position">Window Viewport Position<a class="anchor" href="#window-viewport-position"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>度量文档相对于视口滚动距离的属性有两对\n<ul>\n<li>window.pageXoffset/window. scrollX</li>\n<li>window.pageYoffset/window.scrollY</li>\n</ul>\n</li>\n<li>滚动页面\n<ul>\n<li>scroll()、scrollTo()和 scrollBy()方法\n<ul>\n<li>都接收表示相对视口距 离的 x 和 y 坐标</li>\n<li>在前两个方法中表示要滚动到的坐标</li>\n<li>在最后一个方法中表示滚动的距离</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ScrollToOptions 字典\n<ul>\n<li>提供偏移值，还可以通过 behavior 属性 告诉浏览器是否平滑滚动</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735043389.png" alt=""></li>\n</ul>\n</li>\n</ul>\n<h2 id="navigating-and-opening-windows">Navigating and Opening Windows<a class="anchor" href="#navigating-and-opening-windows"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Popping Up Windows\n<ul>\n<li>window.open()方法\n<ul>\n<li>接收 4 个参数\n<ul>\n<li>要加载的 URL</li>\n<li>目标窗口</li>\n<li>特性字符串\n<ul>\n<li>特性字符串是一个逗号分隔的设置字符串，用于指定新窗口包含的特性</li>\n<li>如果没有传第三个参数，则新窗口（或标签页）会带有所有默 认的浏览器特性（工具栏、地址栏、状态栏等都是默认配置）</li>\n<li>如果打开的不是新窗口，则忽略第三个 参数</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735260784.png" alt=""></li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735268390.png" alt=""></li>\n<li>这些设置需要以逗号分隔的名值对形式出现</li>\n<li>名值对以等号连接</li>\n<li>不能包含空 格</li>\n</ul>\n</li>\n<li>表示新窗口在浏览器历史记录中是否替代当前加载页 面的布尔值\n<ul>\n<li>最后一个参数只有在不打开新窗口时才会使用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>close()方法</li>\n</ul>\n</li>\n<li>Security Restrictions\n<ul>\n<li>浏览器会在用户操作下才允许创建弹窗。在网页加载过程中调用 window.open()没有效果， 而且还可能导致向用户显示错误。弹窗通常可能在鼠标点击或按下键盘中某个键的情况下才能打开</li>\n</ul>\n</li>\n<li>Pop-up Blockers</li>\n</ul>\n<h2 id="intervals-and-timeouts">Intervals and Timeouts<a class="anchor" href="#intervals-and-timeouts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="timer-%E8%AE%A1%E6%97%B6%E5%99%A8%E5%87%BD%E6%95%B0">timer-计时器函数</a></li>\n<li>setTimeout()\n<ul>\n<li>用于指定在一定时间后执行某些代码</li>\n<li>setTimeout()方法通常接收两个参数\n<ul>\n<li>要执行的代码</li>\n<li>执行回调函数前等待的时间（毫秒）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setInterval()\n<ul>\n<li>用于指定 每隔一段时间执行某些代码</li>\n</ul>\n</li>\n</ul>\n<h2 id="system-dialogs">System Dialogs<a class="anchor" href="#system-dialogs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>这些对话框都是同步的模态对话框\n<ul>\n<li>alert()</li>\n<li>confirm()\n<ul>\n<li>确认框</li>\n<li>确认框有两个按钮：“Cancel”（取消）和“OK”（确定）。</li>\n</ul>\n</li>\n<li>prompt()方法\n<ul>\n<li>提示用户输入消息。 除了 OK 和 Cancel 按钮，提示框还会显示一个文本框，让用户输入内容</li>\n</ul>\n</li>\n<li>它们显示的时候，代码会停止执行， 在它们消失以后，代码才会恢复执行。</li>\n<li>外观由操作系统或者浏览器决定， 无法使用 CSS 设置</li>\n</ul>\n</li>\n<li>这两种对话框都是异步显示的，即控 制权会立即返回给脚本\n<ul>\n<li>find()</li>\n<li>print()</li>\n<li>这两个方法不会返回任何有关用户在对话框中执行了什么操作的信息，因此很难加以利用</li>\n</ul>\n</li>\n</ul>',frontmatter={draft:!1,title:"Window Object",topic:["Objects","BOM"],tags:["JavaScript"],type:"D",DateModified:"2024-04-25T00:00:00.000Z",DateStarted:"2023-08-11T00:00:00.000Z",Datereviewed:null,status:["Snooze"],reviewed:null,difficulty:null,comment:null,aliases:["Window Object"],category:"Programming","linter-yaml-title-alias":"Window Object",minutes:5,words:1023},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/bom/window-object.md",url=void 0;function rawContent(){return"\n# Window Object\n\n## 定义\n\n- BOM 的核心是 window 对象\n  - all variables and functions declared in the global scope become properties on window.\n- 浏览器将 window 对象实现为 Global 对象的代理\n  - 网页中定义的所有 对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 parseInt()等全局方法\n  - 很多浏览器 API 及相关构造函数 都以 window 对象属性的形式暴露出来\n- The Global Scope\n\n## Window Relationships\n\n- top 对象\n  - 始终指向最上层（最外层）窗口，即浏览器窗口本身\n- parent 对象\n- self 对象\n  - 是终极 window 属性，始终会指向 window\n  - self 和 window 就 是同一个对象\n- 可以把访问多个窗口的 window 对象串联起来，比如 window.parent.parent\n\n## Window Position and Pixel Ratio\n\n- screenLeft\n- screenTop 属性\n  - 用于表示窗口相对于屏幕左侧和顶部的位置 ，返回值的单位是 CSS 像素\n- moveTo()和 moveBy()方法\n  - 移动窗口\n  - moveTo()接 收要移动到的新位置的绝对坐标 x 和 y\n  - moveBy()则接收相对当前位置在两个方向上移动的像素数\n- 像素比\n  - window.devicePixelRatio 属性\n\n## Window Size\n\n- outerWidth 和 outerHeight\n  - 返回浏 览器窗口自身的大小（不管是在最外层 window 上使用，还是在窗格<frame>中使用）\n- innerWidth 和 innerHeight\n  - 确定页面视口的大小,（不包含浏览器边框和工具栏）\n- document.documentElement.clientWidth 和 document.documentElement.clientHeight\n  - 返回页面视口的宽度和高度\n- resizeTo()\n  - 接收新的宽度和高度值\n- resizeBy()\n  - 接收宽度和高度各要缩放多少\n\n## Window Viewport Position\n\n- 度量文档相对于视口滚动距离的属性有两对\n  - window.pageXoffset/window. scrollX\n  - window.pageYoffset/window.scrollY\n- 滚动页面\n  - scroll()、scrollTo()和 scrollBy()方法\n    - 都接收表示相对视口距 离的 x 和 y 坐标\n    - 在前两个方法中表示要滚动到的坐标\n    - 在最后一个方法中表示滚动的距离\n- ScrollToOptions 字典\n  - 提供偏移值，还可以通过 behavior 属性 告诉浏览器是否平滑滚动\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735043389.png)\n\n## Navigating and Opening Windows\n\n- Popping Up Windows\n  - window.open()方法\n    - 接收 4 个参数\n      - 要加载的 URL\n      - 目标窗口\n      - 特性字符串\n        - 特性字符串是一个逗号分隔的设置字符串，用于指定新窗口包含的特性\n        - 如果没有传第三个参数，则新窗口（或标签页）会带有所有默 认的浏览器特性（工具栏、地址栏、状态栏等都是默认配置）\n        - 如果打开的不是新窗口，则忽略第三个 参数\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735260784.png)\n        - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1691735268390.png)\n        - 这些设置需要以逗号分隔的名值对形式出现\n        - 名值对以等号连接\n        - 不能包含空 格\n      - 表示新窗口在浏览器历史记录中是否替代当前加载页 面的布尔值\n        - 最后一个参数只有在不打开新窗口时才会使用\n  - close()方法\n- Security Restrictions\n  - 浏览器会在用户操作下才允许创建弹窗。在网页加载过程中调用 window.open()没有效果， 而且还可能导致向用户显示错误。弹窗通常可能在鼠标点击或按下键盘中某个键的情况下才能打开\n- Pop-up Blockers\n\n## Intervals and Timeouts\n\n- [timer-计时器函数](timer-计时器函数)\n- setTimeout()\n  - 用于指定在一定时间后执行某些代码\n  - setTimeout()方法通常接收两个参数\n    - 要执行的代码\n    - 执行回调函数前等待的时间（毫秒）\n- setInterval()\n  - 用于指定 每隔一段时间执行某些代码\n\n## System Dialogs\n\n- 这些对话框都是同步的模态对话框\n  - alert()\n  - confirm()\n    - 确认框\n    - 确认框有两个按钮：“Cancel”（取消）和“OK”（确定）。\n  - prompt()方法\n    - 提示用户输入消息。 除了 OK 和 Cancel 按钮，提示框还会显示一个文本框，让用户输入内容\n  - 它们显示的时候，代码会停止执行， 在它们消失以后，代码才会恢复执行。\n  - 外观由操作系统或者浏览器决定， 无法使用 CSS 设置\n- 这两种对话框都是异步显示的，即控 制权会立即返回给脚本\n  - find()\n  - print()\n  - 这两个方法不会返回任何有关用户在对话框中执行了什么操作的信息，因此很难加以利用\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"window-object",text:"Window Object#"},{depth:2,slug:"定义",text:"定义#"},{depth:2,slug:"window-relationships",text:"Window Relationships#"},{depth:2,slug:"window-position-and-pixel-ratio",text:"Window Position and Pixel Ratio#"},{depth:2,slug:"window-size",text:"Window Size#"},{depth:2,slug:"window-viewport-position",text:"Window Viewport Position#"},{depth:2,slug:"navigating-and-opening-windows",text:"Navigating and Opening Windows#"},{depth:2,slug:"intervals-and-timeouts",text:"Intervals and Timeouts#"},{depth:2,slug:"system-dialogs",text:"System Dialogs#"}]}const Content=createComponent(((n,i,l)=>{const{layout:e,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};