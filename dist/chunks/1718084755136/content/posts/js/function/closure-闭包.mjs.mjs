import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="closures-闭包">Closures 闭包<a class="anchor" href="#closures-闭包"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<hr>\n<p>Basic</p>\n<h3 id="闭包定义">闭包定义<a class="anchor" href="#闭包定义"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>\n<p>闭包是指一个函数可以访问另一个函数作用域内的变量。</p>\n</li>\n<li>\n<p>当一个函数嵌套在另一个函数中时，内部函数可以访问外部函数的变量，即使外部函数已经返回了。这种情况下，内部函数形成了一个闭包，它保留了外部函数的作用域链并可以继续访问这些变量。闭包常常用于实现函数的封装和私有化，以及在回调和事件处理等场景下的数据共享与传递。</p>\n</li>\n<li>\n<p>to give a function access to all variables of its parent function, even after that parent function has returned</p>\n</li>\n<li>\n<p>闭包中使用 this</p>\n<p>📌: JS::JS-Function<br>\n🏷️: JS-Function</p>\n</li>\n</ul>\n<hr>\n<h4 id="1-闭包常见的两种情况">1. 闭包常见的两种情况<a class="anchor" href="#1-闭包常见的两种情况"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>一是函数作为返回值； 另一个是函数作为参数传递</p>\n<h4 id="2-闭包的作用">2. 闭包的作用<a class="anchor" href="#2-闭包的作用"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>可以让局部变量的值始终保持在内存中；<br>\n对内部变量进行保护，使外部访问不到<br>\n最常见的案例：<code>函数节流和防抖</code> <a href="Debounce-and-Throttle-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81">Debounce and Throttle-防抖节流</a></p>\n<h4 id="3-闭包的垃圾回收">3. 闭包的垃圾回收<a class="anchor" href="#3-闭包的垃圾回收"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>副作用：不合理的使用闭包，会造成内存泄露 (就是该内存空间使用完毕之后未被回收)<br>\n闭包中引用的变量直到闭包被销毁时才会被垃圾回收</p>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>[发现 JavaScript 中闭包的强大威力](<a href="https://juejin.cn/post/6844903769646317576">https://juejin.cn/post/6844903769646317576</a> <a href="https://juejin.cn/post/6844903769646317576">https://juejin.cn/post/6844903769646317576</a>)</li>\n<li>[JavaScript 闭包的底层运行机制](<a href="https://link.juejin.cn/?target=http%3A%2F%2Fblog.leapoahead.com%2F2015%2F09%2F15%2Fjs-closure%2F">https://link.juejin.cn/?target=http%3A%2F%2Fblog.leapoahead.com%2F2015%2F09%2F15%2Fjs-closure%2F</a> <a href="http://blog.leapoahead.com/2015/09/15/js-closure/">http://blog.leapoahead.com/2015/09/15/js-closure/</a>)</li>\n<li>[我从来不理解 JavaScript 闭包，直到有人这样向我解释它…](<a href="https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F56490498">https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F56490498</a> <a href="https://zhuanlan.zhihu.com/p/56490498">https://zhuanlan.zhihu.com/p/56490498</a>)</li>\n<li>[破解前端面试（80% 应聘者不及格系列）：从闭包说起](<a href="https://juejin.cn/post/6844903474212143117#heading-0">https://juejin.cn/post/6844903474212143117#heading-0</a> <a href="https://juejin.cn/post/6844903474212143117#heading-0">https://juejin.cn/post/6844903474212143117#heading-0</a>)</li>\n</ul>\n<h4 id="4-闭包的示例">4. 闭包的示例<a class="anchor" href="#4-闭包的示例"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// 原始题目</span></span>\n<span class="line"><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">var</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(i); </span><span style="color:#6A737D">// 1s后打印出5个5</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// ⬅️利用闭包，将上述题目改成1s后，打印0,1,2,3,4</span></span>\n<span class="line"><span style="color:#6A737D">// 方法一：</span></span>\n<span class="line"><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">var</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">j</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetTimeout</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#B392F0"> timer</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(j);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})(i);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// 方法二：</span></span>\n<span class="line"><span style="color:#6A737D">// 利用setTimeout的第三个参数，第三个参数将作为setTimeout第一个参数的参数</span></span>\n<span class="line"><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">var</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#F97583">\t\tfunction</span><span style="color:#B392F0"> fn</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">i</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(i);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t},</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t1000</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ti</span></span>\n<span class="line"><span style="color:#E1E4E8">\t); </span><span style="color:#6A737D">// 第三个参数i,将作为fn的参数</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D">// ⬅️将上述题目改成每间隔1s后，依次打印0,1,2,3,4</span></span>\n<span class="line"><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">var</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#F97583">\t\tfunction</span><span style="color:#B392F0"> fn</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">i</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(i);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t},</span></span>\n<span class="line"><span style="color:#79B8FF">\t\t1000</span><span style="color:#F97583"> *</span><span style="color:#E1E4E8"> i,</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ti</span></span>\n<span class="line"><span style="color:#E1E4E8">\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h3 id="手写一个闭包">手写一个闭包<a class="anchor" href="#手写一个闭包"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span>function fn() {</span></span>\n<span class="line"><span>  var num = 10</span></span>\n<span class="line"><span>  function fun() {</span></span>\n<span class="line"><span>    console.log(num)</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  return fun</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>var f = fn()</span></span>\n<span class="line"><span>f()</span></span>\n<span class="line"><span></span></span></code></pre>',frontmatter={aliases:["Closures 闭包"],draft:!1,title:"Closures 闭包",topic:["Function"],type:"D",tags:["JavaScript"],DateStarted:"2024-02-16T00:00:00.000Z",Datereviewed:"2024-02-16T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",reviewed:1,difficulty:null,status:null,comment:null,category:"Programming","linter-yaml-title-alias":"Closures 闭包",minutes:3,words:611},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/function/closure-闭包.md",url=void 0;function rawContent(){return"# Closures 闭包\n---\nBasic\n### 闭包定义\nBack:\n- 闭包是指一个函数可以访问另一个函数作用域内的变量。\n- 当一个函数嵌套在另一个函数中时，内部函数可以访问外部函数的变量，即使外部函数已经返回了。这种情况下，内部函数形成了一个闭包，它保留了外部函数的作用域链并可以继续访问这些变量。闭包常常用于实现函数的封装和私有化，以及在回调和事件处理等场景下的数据共享与传递。\n- to give a function access to all variables of its parent function, even after that parent function has returned\n- 闭包中使用 this  \n\n  📌: JS::JS-Function  \n  🏷️: JS-Function\n  \n---\n#### 1. 闭包常见的两种情况\n一是函数作为返回值； 另一个是函数作为参数传递\n#### 2. 闭包的作用\n可以让局部变量的值始终保持在内存中；  \n对内部变量进行保护，使外部访问不到  \n最常见的案例：`函数节流和防抖` [Debounce and Throttle-防抖节流](Debounce-and-Throttle-防抖节流)\n#### 3. 闭包的垃圾回收\n副作用：不合理的使用闭包，会造成内存泄露 (就是该内存空间使用完毕之后未被回收)  \n闭包中引用的变量直到闭包被销毁时才会被垃圾回收\n### Reference\n- [发现 JavaScript 中闭包的强大威力](https://juejin.cn/post/6844903769646317576 https://juejin.cn/post/6844903769646317576)\n- [JavaScript 闭包的底层运行机制](https://link.juejin.cn/?target=http%3A%2F%2Fblog.leapoahead.com%2F2015%2F09%2F15%2Fjs-closure%2F http://blog.leapoahead.com/2015/09/15/js-closure/)\n- [我从来不理解 JavaScript 闭包，直到有人这样向我解释它...](https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F56490498 https://zhuanlan.zhihu.com/p/56490498)\n- [破解前端面试（80% 应聘者不及格系列）：从闭包说起](https://juejin.cn/post/6844903474212143117#heading-0 https://juejin.cn/post/6844903474212143117#heading-0)\n#### 4. 闭包的示例\n\n```javascript\n// 原始题目\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i); // 1s后打印出5个5\n\t}, 1000);\n}\n// ⬅️利用闭包，将上述题目改成1s后，打印0,1,2,3,4\n// 方法一：\nfor (var i = 0; i < 5; i++) {\n\t(function (j) {\n\t\tsetTimeout(function timer() {\n\t\t\tconsole.log(j);\n\t\t}, 1000);\n\t})(i);\n}\n// 方法二：\n// 利用setTimeout的第三个参数，第三个参数将作为setTimeout第一个参数的参数\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(\n\t\tfunction fn(i) {\n\t\t\tconsole.log(i);\n\t\t},\n\t\t1000,\n\t\ti\n\t); // 第三个参数i,将作为fn的参数\n}\n// ⬅️将上述题目改成每间隔1s后，依次打印0,1,2,3,4\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(\n\t\tfunction fn(i) {\n\t\t\tconsole.log(i);\n\t\t},\n\t\t1000 * i,\n\t\ti\n\t);\n}\n```\n\n### 手写一个闭包\n\n```\nfunction fn() {\n  var num = 10\n  function fun() {\n    console.log(num)\n  }\n  return fun\n}\nvar f = fn()\nf()\n```"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"closures-闭包",text:"Closures 闭包#"},{depth:3,slug:"闭包定义",text:"闭包定义#"},{depth:4,slug:"1-闭包常见的两种情况",text:"1. 闭包常见的两种情况#"},{depth:4,slug:"2-闭包的作用",text:"2. 闭包的作用#"},{depth:4,slug:"3-闭包的垃圾回收",text:"3. 闭包的垃圾回收#"},{depth:3,slug:"reference",text:"Reference#"},{depth:4,slug:"4-闭包的示例",text:"4. 闭包的示例#"},{depth:3,slug:"手写一个闭包",text:"手写一个闭包#"}]}const Content=createComponent(((n,s,a)=>{const{layout:l,...p}=frontmatter;return p.file=file,p.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};