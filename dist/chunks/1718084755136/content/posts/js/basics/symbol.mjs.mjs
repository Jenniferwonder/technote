import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="symbol">Symbol<a class="anchor" href="#symbol"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript | MDN</a></li>\n<li><a href="https://exploringjs.com/es6/ch_symbols.html">7. Symbols</a></li>\n<li><a href="https://medium.com/intrinsic-blog/javascript-symbols-but-why-6b02768f4a5c">JavaScript Symbols: But Why?. Symbols, the newest JavaScript… | by Thomas Hunter II | intrinsic | Medium</a></li>\n</ul>\n<h2 id="what-is-symbol">What is symbol?<a class="anchor" href="#what-is-symbol"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>\n<ul>\n<li>Symbols are primitive values</li>\n<li>A symbol is a primitive which cannot be recreated?</li>\n<li>symbol instances are unique and immutable</li>\n<li>一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的;\n<ul>\n<li>The purpose of a symbol is to be a guaranteed unique identifier for object properties that does not risk property collision</li>\n</ul>\n</li>\n<li>In this case a symbols is similar to an object as creating multiple instances will result in values which are not exactly equal. But, a symbol is also a primitive in that it cannot be mutated.</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> s1</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> Symbol</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> s2</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> Symbol</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(s1 </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> s2); </span><span style="color:#6A737D">// false</span></span>\n<span class="line"></span></code></pre>\n<h2 id="the-symbol-type">The <a href="Symbol">Symbol</a> Type<a class="anchor" href="#the-symbol-type"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Basic Symbol Use</li>\n<li>Using the Global Symbol Registry</li>\n<li>Using Symbols as Properties</li>\n<li>Well-Known Symbols\n<ul>\n<li>Symbol.asyncIterator</li>\n<li>Symbol.hasInstance</li>\n<li>Symbol.isConcatSpreadable</li>\n<li>Symbol.iterator</li>\n<li>Symbol.match</li>\n<li>Symbol.replace</li>\n<li>Symbol.search</li>\n<li>Symbol.species</li>\n<li>Symbol.split</li>\n<li>Symbol.toPrimitive</li>\n<li>Symbol.toStringTag</li>\n<li>Symbol.unscopables</li>\n</ul>\n</li>\n</ul>',frontmatter={topic:["Basics"],type:"D",tags:["JavaScript"],Datereviewed:"2024-04-16T00:00:00.000Z",reviewed:1,difficulty:"Hard",comment:null,title:"Symbol",DateStarted:"2023-02-15T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:["ToDo"],aliases:["Symbol"],"linter-yaml-title-alias":"Symbol",category:"Programming",draft:!0,minutes:1,words:147},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/symbol.md",url=void 0;function rawContent(){return"\n# Symbol\n\n## Reference\n\n- [Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n- [7. Symbols](https://exploringjs.com/es6/ch_symbols.html)\n- [JavaScript Symbols: But Why?. Symbols, the newest JavaScript… | by Thomas Hunter II | intrinsic | Medium](https://medium.com/intrinsic-blog/javascript-symbols-but-why-6b02768f4a5c)\n\n## What is symbol?\n\n- - Symbols are primitive values\n  - A symbol is a primitive which cannot be recreated?\n  - symbol instances are unique and immutable\n  - 一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的;\n    - The purpose of a symbol is to be a guaranteed unique identifier for object properties that does not risk property collision\n  - In this case a symbols is similar to an object as creating multiple instances will result in values which are not exactly equal. But, a symbol is also a primitive in that it cannot be mutated.\n\n```js\nconst s1 = Symbol();\nconst s2 = Symbol();\nconsole.log(s1 === s2); // false\n```\n\n## The [Symbol](Symbol) Type\n\n- Basic Symbol Use\n- Using the Global Symbol Registry\n- Using Symbols as Properties\n- Well-Known Symbols\n  - Symbol.asyncIterator\n  - Symbol.hasInstance\n  - Symbol.isConcatSpreadable\n  - Symbol.iterator\n  - Symbol.match\n  - Symbol.replace\n  - Symbol.search\n  - Symbol.species\n  - Symbol.split\n  - Symbol.toPrimitive\n  - Symbol.toStringTag\n  - Symbol.unscopables\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"symbol",text:"Symbol#"},{depth:2,slug:"reference",text:"Reference#"},{depth:2,slug:"what-is-symbol",text:"What is symbol?#"},{depth:2,slug:"the-symbol-type",text:"The Symbol Type#"}]}const Content=createComponent(((e,l,n)=>{const{layout:s,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};