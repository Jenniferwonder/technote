import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="astro-basics">Astro Basics<a class="anchor" href="#astro-basics"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h3 id="why">Why<a class="anchor" href="#why"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Fastest client-side app</li>\n</ul>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><a href="https://docs.astro.build/en/tutorial/2-pages/">Check in: Unit 2 - Pages | Docs (astro.build)</a></li>\n</ul>\n<h3 id="dependency">Dependency<a class="anchor" href="#dependency"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>astro 4.4.9</li>\n<li>create RSS feed\n<ul>\n<li><code>npm install @astrojs/rss</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="tools">Tools<a class="anchor" href="#tools"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>VS Code Extension\n<ul>\n<li>astro</li>\n</ul>\n</li>\n</ul>\n<h3 id="reuse-components">Reuse Components<a class="anchor" href="#reuse-components"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><code>src/components</code></p>\n</blockquote>\n<h4 id="astro-components-ssr">Astro Components (SSR)<a class="anchor" href="#astro-components-ssr"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>To hold <code>.astro</code> files that will generate HTML but that will not become new pages on your website</li>\n<li>JS in Astro Components\n<ul>\n<li>JS in HTML template: Curly braces are necessary</li>\n<li>JS in frontmatter\n<ul>\n<li>The Astro frontmatter script contains only JavaScript.</li>\n</ul>\n</li>\n<li>✅ Use\n<ul>\n<li>Defining your page title and heading dynamically</li>\n<li>Mapping through a list of skills on the About page</li>\n<li>Conditionally displaying HTML elements</li>\n</ul>\n</li>\n<li>❌ Not for client-side interaction\n<ul>\n<li>Executed at build time to create static HTML for your site, and then the code is “thrown away.”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id="client-side-interaction-csr">Client Side Interaction (CSR)<a class="anchor" href="#client-side-interaction-csr"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<blockquote>\n<p>📺Sent to the browser, and is available to run, based on user interactions like refreshing a page or toggling an input</p>\n</blockquote>\n<h5 id="framework-components">Framework Components<a class="anchor" href="#framework-components"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<ul>\n<li>Astro Island\n<ul>\n<li>📺 a <em>hydrated</em> component (UI Framework component)</li>\n<li>include <code>client:</code> to send the JavaScript to the client at a different time</li>\n<li>allow you to “try out” a new framework without requiring you to start an entirely new project using that tech stack</li>\n<li>allow you to reuse code you have written in other frameworks and you can often just drop them right into your site.</li>\n<li><code>client:load</code></li>\n<li><code>client:visible</code>\n<ul>\n<li>will only send the component’s JavaScript when it is visible on the page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id="js-in-html-script-tag">JS in HTML <code>&#x3C;script></code> tag<a class="anchor" href="#js-in-html-script-tag"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<ul>\n<li>import from <code>./src/scripts</code></li>\n</ul>\n<h3 id="create-layouts">Create Layouts<a class="anchor" href="#create-layouts"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><code>src/layouts</code></p>\n</blockquote>\n<ul>\n<li>In HTML template, add <code>&#x3C;slot /></code>\n<ul>\n<li>Pass content to your layouts</li>\n</ul>\n</li>\n<li>Pass data from Markdown frontmatter to your layouts\n<ul>\n<li><code>const {pageTitle} = Astro.props</code></li>\n<li>Then use <code>{pageTitle}</code> in HTML template</li>\n</ul>\n</li>\n<li>Nest two layouts</li>\n</ul>\n<h3 id="astro-api">Astro API<a class="anchor" href="#astro-api"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>✅ access data from files in your project\n<ul>\n<li>In frontmatter\n<ul>\n<li><code>const allPosts = await Astro.glob(\'../pages/posts/*\');</code>\n<ul>\n<li>will return an array of objects, one for each blog post</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Then in HTML template\n<ul>\n<li><code>{allPosts.map((post)=>&#x3C;BlogPost url={post.url} title={post.frontmatter.title}/>)}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>✅ create multiple pages (routes) from one file\n<ul>\n<li><code>[tag].astro</code></li>\n<li><code>getStaticPaths(... return {params: {tag}, props:{posts: ...}})</code>\n<ul>\n<li><code>const {tag} = Astro.params</code></li>\n<li><code>const {posts} = Astro.props</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="styles">Styles<a class="anchor" href="#styles"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>global style\n<ul>\n<li><code>./src/styles/global.css</code></li>\n</ul>\n</li>\n<li>page style\n<ul>\n<li>In HTML <code>&#x3C;style></code> to style individual page</li>\n<li>When in conflict, page style will overwrite global style</li>\n</ul>\n</li>\n</ul>\n<h4 id="tailwind-in-astro">Tailwind in Astro<a class="anchor" href="#tailwind-in-astro"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>npx astro add tailwind</code></p>\n<h3 id="pages-routing">Pages Routing<a class="anchor" href="#pages-routing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><code>./src/pages</code></p>\n</blockquote>\n<ul>\n<li><code>pages/folder/index.astro</code> routing feature\n<ul>\n<li>a page at the same route: <code>pages/folder.astro</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="content-collection">Content Collection<a class="anchor" href="#content-collection"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><code>src/content</code></p>\n</blockquote>\n<h4 id="why-1">Why<a class="anchor" href="#why-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>allow you to use more powerful and performant APIs to generate your blog post index and display your individual blog posts<br>\nyou will have a <strong><a href="https://docs.astro.build/en/guides/content-collections/#defining-a-collection-schema">schema</a></strong> to define a common structure for each post that Astro will help you enforce</p>\n<ul>\n<li>can specify when frontmatter properties are required</li>\n<li>which data type each property must be, such as a string or an array</li>\n</ul>\n<h4 id="use">Use<a class="anchor" href="#use"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>convert a basic blog from <code>src/pages/posts/</code> to <code>src/content/posts/</code></p>\n<h5 id="generate-pages-from-a-collection">Generate pages from a collection<a class="anchor" href="#generate-pages-from-a-collection"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<p>Your Markdown and MDX files no longer automatically become pages using Astro’s file-based routing when they are inside a collection, so you must create a page responsible for generating each individual blog post</p>\n<h3 id="transition-animation">Transition Animation<a class="anchor" href="#transition-animation"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<blockquote>\n<p><a href="https://docs.astro.build/en/tutorials/add-view-transitions/">Tutorial - Extend with View Transitions | Docs</a></p>\n</blockquote>\n<p>To change the type of animation for a single element, add the <code>transition:animate=""</code> directive</p>\n<h4 id="override-transition-animation-force-a-full-browser-reload">Override transition animation (force a full browser reload)<a class="anchor" href="#override-transition-animation-force-a-full-browser-reload"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><code>&#x3C;a href="/about/" data-astro-reload>About&#x3C;/a></code></p>',frontmatter={category:"Front-End Frameworks",Datereviewed:null,title:"Astro Basics",topic:null,type:null,tags:["Astro"],DateStarted:"2024-03-29T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",ewed:null,reviewed:null,difficulty:null,status:null,comment:null,aliases:["Astro Basics"],minutes:2,words:423},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-frameworks/astro/astro-basics.md",url=void 0;function rawContent(){return'\n# Astro Basics\n\n### Why\n\n- Fastest client-side app\n\n### Reference\n\n- [Check in: Unit 2 - Pages | Docs (astro.build)](https://docs.astro.build/en/tutorial/2-pages/)\n\n### Dependency\n\n- astro 4.4.9\n- create RSS feed\n  - `npm install @astrojs/rss`\n\n### Tools\n\n- VS Code Extension\n  - astro\n\n### Reuse Components\n\n> `src/components`\n\n#### Astro Components (SSR)\n\n- To hold `.astro` files that will generate HTML but that will not become new pages on your website\n- JS in Astro Components\n  - JS in HTML template: Curly braces are necessary\n  - JS in frontmatter\n    - The Astro frontmatter script contains only JavaScript.\n  - ✅ Use\n    - Defining your page title and heading dynamically\n    - Mapping through a list of skills on the About page\n    - Conditionally displaying HTML elements\n  - ❌ Not for client-side interaction\n    - Executed at build time to create static HTML for your site, and then the code is “thrown away.”\n\n#### Client Side Interaction (CSR)\n\n> 📺Sent to the browser, and is available to run, based on user interactions like refreshing a page or toggling an input\n\n##### Framework Components\n\n- Astro Island\n  - 📺 a *hydrated* component (UI Framework component)\n  - include `client:` to send the JavaScript to the client at a different time\n  - allow you to “try out” a new framework without requiring you to start an entirely new project using that tech stack\n  - allow you to reuse code you have written in other frameworks and you can often just drop them right into your site.\n  - `client:load`\n  - `client:visible`\n    - will only send the component’s JavaScript when it is visible on the page\n\n##### JS in HTML `<script>` tag\n\n- import from `./src/scripts`\n\n### Create Layouts\n\n> `src/layouts`\n\n- In HTML template, add `<slot />`\n  - Pass content to your layouts\n- Pass data from Markdown frontmatter to your layouts\n  - `const {pageTitle} = Astro.props`\n  - Then use `{pageTitle}` in HTML template\n- Nest two layouts\n\n### Astro API\n\n- ✅ access data from files in your project\n  - In frontmatter\n    - `const allPosts = await Astro.glob(\'../pages/posts/*\');`\n      - will return an array of objects, one for each blog post\n  - Then in HTML template\n    - `{allPosts.map((post)=><BlogPost url={post.url} title={post.frontmatter.title}/>)}`\n- ✅ create multiple pages (routes) from one file\n  - `[tag].astro`\n  - `getStaticPaths(... return {params: {tag}, props:{posts: ...}})`\n    - `const {tag} = Astro.params`\n    - `const {posts} = Astro.props`\n\n### Styles\n\n- global style\n  - `./src/styles/global.css`\n- page style\n  - In HTML `<style>` to style individual page\n  - When in conflict, page style will overwrite global style\n\n#### Tailwind in Astro\n\n`npx astro add tailwind`\n\n### Pages Routing\n\n> `./src/pages`\n\n- `pages/folder/index.astro` routing feature\n  - a page at the same route: `pages/folder.astro`\n\n### Content Collection\n\n> `src/content`\n\n#### Why\n\nallow you to use more powerful and performant APIs to generate your blog post index and display your individual blog posts  \n you will have a **[schema](https://docs.astro.build/en/guides/content-collections/#defining-a-collection-schema)** to define a common structure for each post that Astro will help you enforce\n\n- can specify when frontmatter properties are required\n- which data type each property must be, such as a string or an array\n\n#### Use\n\nconvert a basic blog from `src/pages/posts/` to `src/content/posts/`\n\n##### Generate pages from a collection\n\nYour Markdown and MDX files no longer automatically become pages using Astro\'s file-based routing when they are inside a collection, so you must create a page responsible for generating each individual blog post\n\n### Transition Animation\n\n> [Tutorial - Extend with View Transitions | Docs](https://docs.astro.build/en/tutorials/add-view-transitions/)\n\nTo change the type of animation for a single element, add the `transition:animate=""` directive\n\n#### Override transition animation (force a full browser reload)\n\n`<a href="/about/" data-astro-reload>About</a>`\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"astro-basics",text:"Astro Basics#"},{depth:3,slug:"why",text:"Why#"},{depth:3,slug:"reference",text:"Reference#"},{depth:3,slug:"dependency",text:"Dependency#"},{depth:3,slug:"tools",text:"Tools#"},{depth:3,slug:"reuse-components",text:"Reuse Components#"},{depth:4,slug:"astro-components-ssr",text:"Astro Components (SSR)#"},{depth:4,slug:"client-side-interaction-csr",text:"Client Side Interaction (CSR)#"},{depth:5,slug:"framework-components",text:"Framework Components#"},{depth:5,slug:"js-in-html-script-tag",text:"JS in HTML <script> tag#"},{depth:3,slug:"create-layouts",text:"Create Layouts#"},{depth:3,slug:"astro-api",text:"Astro API#"},{depth:3,slug:"styles",text:"Styles#"},{depth:4,slug:"tailwind-in-astro",text:"Tailwind in Astro#"},{depth:3,slug:"pages-routing",text:"Pages Routing#"},{depth:3,slug:"content-collection",text:"Content Collection#"},{depth:4,slug:"why-1",text:"Why#"},{depth:4,slug:"use",text:"Use#"},{depth:5,slug:"generate-pages-from-a-collection",text:"Generate pages from a collection#"},{depth:3,slug:"transition-animation",text:"Transition Animation#"},{depth:4,slug:"override-transition-animation-force-a-full-browser-reload",text:"Override transition animation (force a full browser reload)#"}]}const Content=createComponent(((n,e,t)=>{const{layout:o,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};