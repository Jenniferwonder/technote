import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="sass-预处理器">SASS 预处理器<a class="anchor" href="#sass-预处理器"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="css-preprocessor-adds-power-and-elegance-to-the-language">CSS Preprocessor, adds power and elegance to the language<a class="anchor" href="#css-preprocessor-adds-power-and-elegance-to-the-language"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="main-features">Main features<a class="anchor" href="#main-features"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="mixins">mixins<a class="anchor" href="#mixins"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>to write reusable piece of CSS code</li>\n</ul>\n<h3 id="variables">variables<a class="anchor" href="#variables"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>reusable values:colors, font-sizes, spacing, etc</li>\n</ul>\n<h3 id="functions">functions<a class="anchor" href="#functions"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>similar to mixins, difference is that they produce a value that can be used</li>\n</ul>\n<h3 id="nesting">nesting<a class="anchor" href="#nesting"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>nest selectors insde of one another, to write less code</li>\n</ul>\n<h3 id="extends">extends<a class="anchor" href="#extends"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>make different selectors inherit declarations that are common to all of them</li>\n</ul>\n<h3 id="operators">operators<a class="anchor" href="#operators"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>mathematical opertions inside CSS</li>\n</ul>\n<h3 id="partials-and-imports">partials and imports<a class="anchor" href="#partials-and-imports"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>write CSS in different partial files and importing them all in one single file</li>\n</ul>\n<h3 id="control-directives">control directives<a class="anchor" href="#control-directives"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>write complex code using conditionals and loops</li>\n</ul>\n<h2 id="syntax">syntax<a class="anchor" href="#syntax"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="sass-syntax">SASS syntax<a class="anchor" href="#sass-syntax"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="scss-syntax">SCSS syntax<a class="anchor" href="#scss-syntax"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="to-install-locally">to install locally<a class="anchor" href="#to-install-locally"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="nodejs">node.js<a class="anchor" href="#nodejs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>write and run JS on the server</li>\n</ul>\n<h3 id="npm-node-package-manager">npm: node package manager<a class="anchor" href="#npm-node-package-manager"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>command line interface: to install and manage packages(tools, libraries and frameworks needed for modern development) on local computer</li>\n<li>npm init\n<ul>\n<li>create a package.json file in the working directory</li>\n</ul>\n</li>\n<li>npm install\n<ul>\n<li>npm install node-sass —save-dev\n<ul>\n<li>make sure ‘package.json’ is updated and list it as one of the dev dependencies (tool for the project)</li>\n</ul>\n</li>\n<li>sudo npm install <code>&#x3C;package ame> -g</code>\n<ul>\n<li>install globally</li>\n</ul>\n</li>\n<li>! npm install\n<ul>\n<li>Based on ‘package.json’ download necessary node modules</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>live-server\n<ul>\n<li>Need to go back to the project folder</li>\n<li>! Together with “sass:compile” scripts running: no need to reload to watch for changes</li>\n</ul>\n</li>\n<li>create a ‘main.scss’ file in a new ‘sass’ folder</li>\n<li>”scripts”\n<ul>\n<li>To import sass file to css file\n<ul>\n<li>create a script &#x3C;“compile:sass”: “node-sass sass/main.scss css/style.css -w” in ‘package.json’ (-w: means keep watching for the changes)</li>\n<li>npm run <code>&#x3C;script name></code></li>\n<li>error\n<ul>\n<li>npm rebuild <code>&#x3C;script name></code></li>\n<li>node-fetch connect ETIMEDOUT error\n<ul>\n<li>npm config rm proxy</li>\n<li>npm config rm https-proxy</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>! Other scripts\n<ul>\n<li>To add prefixer: ensure compatibility on different browsers</li>\n<li>To compress code</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>',frontmatter={topic:null,category:"Web Design",aliases:["SASS 预处理器"],draft:!1,title:"SASS 预处理器",type:"O",tags:["SASS","CSS"],status:null,DateStarted:"2023-09-18T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",Datereviewed:"2023-09-22T16:00:00.000Z",difficulty:"Good",reviewed:1,comment:"⭐⭐","linter-yaml-title-alias":"SASS 预处理器",minutes:1,words:232},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/css/sass/sass-预处理器.md",url=void 0;function rawContent(){return"\n# SASS 预处理器\n\n## CSS Preprocessor, adds power and elegance to the language\n\n## Main features\n\n### mixins\n\n- to write reusable piece of CSS code\n\n### variables\n\n- reusable values:colors, font-sizes, spacing, etc\n\n### functions\n\n- similar to mixins, difference is that they produce a value that can be used\n\n### nesting\n\n- nest selectors insde of one another, to write less code\n\n### extends\n\n- make different selectors inherit declarations that are common to all of them\n\n### operators\n\n- mathematical opertions inside CSS\n\n### partials and imports\n\n- write CSS in different partial files and importing them all in one single file\n\n### control directives\n\n- write complex code using conditionals and loops\n\n## syntax\n\n### SASS syntax\n\n### SCSS syntax\n\n## to install locally\n\n### node.js\n\n- write and run JS on the server\n\n### npm: node package manager\n\n- command line interface: to install and manage packages(tools, libraries and frameworks needed for modern development) on local computer\n- npm init\n  - create a package.json file in the working directory\n- npm install\n  - npm install node-sass --save-dev\n    - make sure 'package.json' is updated and list it as one of the dev dependencies (tool for the project)\n  - sudo npm install `<package ame> -g`\n    - install globally\n  - ! npm install\n    - Based on 'package.json' download necessary node modules\n- live-server\n  - Need to go back to the project folder\n  - ! Together with \"sass:compile\" scripts running: no need to reload to watch for changes\n- create a 'main.scss' file in a new 'sass' folder\n- \"scripts\"\n  - To import sass file to css file\n    - create a script <\"compile:sass\": \"node-sass sass/main.scss css/style.css -w\" in 'package.json' (-w: means keep watching for the changes)\n    - npm run `<script name>`\n    - error\n      - npm rebuild `<script name>`\n      - node-fetch connect ETIMEDOUT error\n        - npm config rm proxy\n        - npm config rm https-proxy\n  - ! Other scripts\n    - To add prefixer: ensure compatibility on different browsers\n    - To compress code\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"sass-预处理器",text:"SASS 预处理器#"},{depth:2,slug:"css-preprocessor-adds-power-and-elegance-to-the-language",text:"CSS Preprocessor, adds power and elegance to the language#"},{depth:2,slug:"main-features",text:"Main features#"},{depth:3,slug:"mixins",text:"mixins#"},{depth:3,slug:"variables",text:"variables#"},{depth:3,slug:"functions",text:"functions#"},{depth:3,slug:"nesting",text:"nesting#"},{depth:3,slug:"extends",text:"extends#"},{depth:3,slug:"operators",text:"operators#"},{depth:3,slug:"partials-and-imports",text:"partials and imports#"},{depth:3,slug:"control-directives",text:"control directives#"},{depth:2,slug:"syntax",text:"syntax#"},{depth:3,slug:"sass-syntax",text:"SASS syntax#"},{depth:3,slug:"scss-syntax",text:"SCSS syntax#"},{depth:2,slug:"to-install-locally",text:"to install locally#"},{depth:3,slug:"nodejs",text:"node.js#"},{depth:3,slug:"npm-node-package-manager",text:"npm: node package manager#"}]}const Content=createComponent(((n,e,a)=>{const{layout:s,...t}=frontmatter;return t.file=file,t.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};