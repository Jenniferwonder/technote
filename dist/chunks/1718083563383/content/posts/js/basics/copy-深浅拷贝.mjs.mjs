import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="copy-深浅拷贝">Copy-深浅拷贝<a class="anchor" href="#copy-深浅拷贝"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h3 id="什么是深拷贝什么是浅拷贝">什么是深拷贝、什么是浅拷贝？<a class="anchor" href="#什么是深拷贝什么是浅拷贝"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>浅拷贝： 创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个 地址，就会影响到另一个对象。<br>\n深拷贝： 会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即 发生深拷贝。 深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>[JavaScript 基础心法——深浅拷贝](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Faxuebin%2Farticles%2Fissues%2F20">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Faxuebin%2Farticles%2Fissues%2F20</a> <a href="https://github.com/axuebin/articles/issues/20">https://github.com/axuebin/articles/issues/20</a>)</li>\n<li>[深拷贝的终极探索（90%的人都不知道）](<a href="https://juejin.cn/post/6844903692756336653">https://juejin.cn/post/6844903692756336653</a> <a href="https://juejin.cn/post/6844903692756336653">https://juejin.cn/post/6844903692756336653</a>)</li>\n<li>[JavaScript 专题之深浅拷贝](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F32">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F32</a> <a href="https://github.com/mqyqingfeng/Blog/issues/32">https://github.com/mqyqingfeng/Blog/issues/32</a>)</li>\n<li>[javaScript 中浅拷贝和深拷贝的实现](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwengjq%2FBlog%2Fissues%2F3">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwengjq%2FBlog%2Fissues%2F3</a> <a href="https://github.com/wengjq/Blog/issues/3">https://github.com/wengjq/Blog/issues/3</a>)</li>\n<li>[深入剖析 JavaScript 的深复制](<a href="https://link.juejin.cn?target=https%3A%2F%2Fjerryzou.com%2Fposts%2Fdive-into-deep-clone-in-javascript%2F">https://link.juejin.cn?target=https%3A%2F%2Fjerryzou.com%2Fposts%2Fdive-into-deep-clone-in-javascript%2F</a> <a href="https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/">https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/</a>)</li>\n<li>[「JavaScript」带你彻底搞清楚深拷贝、浅拷贝和循环引用](<a href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015042902">https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015042902</a> <a href="https://segmentfault.com/a/1190000015042902">https://segmentfault.com/a/1190000015042902</a>)</li>\n<li>[面试题之如何实现一个深拷贝](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fyygmind%2Fblog%2Fissues%2F29">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fyygmind%2Fblog%2Fissues%2F29</a> <a href="https://github.com/yygmind/blog/issues/29">https://github.com/yygmind/blog/issues/29</a>)</li>\n</ul>',frontmatter={draft:!1,title:"Copy-深浅拷贝",tags:["JavaScript"],comment:null,type:"D",topic:["Practice"],DateStarted:"2022-12-16T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:null,status:null,difficulty:"Hard",reviewed:0,aliases:["Copy-深浅拷贝"],"linter-yaml-title-alias":"Copy-深浅拷贝",category:"Programming",minutes:1,words:288},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/copy-深浅拷贝.md",url=void 0;function rawContent(){return"\n# Copy-深浅拷贝\n\n### 什么是深拷贝、什么是浅拷贝？\n浅拷贝： 创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个 地址，就会影响到另一个对象。  \n深拷贝： 会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即 发生深拷贝。 深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。\n\n### Reference\n\n- [JavaScript 基础心法——深浅拷贝](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Faxuebin%2Farticles%2Fissues%2F20 https://github.com/axuebin/articles/issues/20)\n- [深拷贝的终极探索（90%的人都不知道）](https://juejin.cn/post/6844903692756336653 https://juejin.cn/post/6844903692756336653)\n- [JavaScript 专题之深浅拷贝](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F32 https://github.com/mqyqingfeng/Blog/issues/32)\n- [javaScript 中浅拷贝和深拷贝的实现](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwengjq%2FBlog%2Fissues%2F3 https://github.com/wengjq/Blog/issues/3)\n- [深入剖析 JavaScript 的深复制](https://link.juejin.cn?target=https%3A%2F%2Fjerryzou.com%2Fposts%2Fdive-into-deep-clone-in-javascript%2F https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/)\n- [「JavaScript」带你彻底搞清楚深拷贝、浅拷贝和循环引用](https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015042902 https://segmentfault.com/a/1190000015042902)\n- [面试题之如何实现一个深拷贝](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fyygmind%2Fblog%2Fissues%2F29 https://github.com/yygmind/blog/issues/29)"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"copy-深浅拷贝",text:"Copy-深浅拷贝#"},{depth:3,slug:"什么是深拷贝什么是浅拷贝",text:"什么是深拷贝、什么是浅拷贝？#"},{depth:3,slug:"reference",text:"Reference#"}]}const Content=createComponent(((t,e,n)=>{const{layout:s,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};