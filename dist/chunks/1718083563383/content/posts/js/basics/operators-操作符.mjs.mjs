import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="operators-操作符">Operators-操作符<a class="anchor" href="#operators-操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="unary-operators-一元操作符">Unary Operators-一元操作符<a class="anchor" href="#unary-operators-一元操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Increment/Decrement\n<ul>\n<li><code>++</code></li>\n<li><code>--</code></li>\n</ul>\n</li>\n<li>Unary Plus and Minus\n<ul>\n<li>Perform similar to <code>Number()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id="bitwise-operators-位操作符">Bitwise Operators-位操作符<a class="anchor" href="#bitwise-operators-位操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Bitwise NOT-按位非\n<ul>\n<li><code>~</code></li>\n</ul>\n</li>\n<li>Bitwise AND-按位与\n<ul>\n<li><code>&#x26;</code></li>\n</ul>\n</li>\n<li>Bitwise OR-按位或\n<ul>\n<li><code>|</code></li>\n</ul>\n</li>\n<li>Bitwise XOR-按位异或\n<ul>\n<li><code>^</code></li>\n</ul>\n</li>\n<li>Left Shift\n<ul>\n<li><code>&#x3C;&#x3C;</code></li>\n</ul>\n</li>\n<li>Signed Right Shift-有符号右移\n<ul>\n<li><code>>></code></li>\n</ul>\n</li>\n<li>Unsigned Right Shift-无符号右移\n<ul>\n<li><code>>>></code></li>\n</ul>\n</li>\n</ul>\n<h2 id="boolean-operators-布尔操作符">Boolean Operators-布尔操作符<a class="anchor" href="#boolean-operators-布尔操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Logical NOT\n<ul>\n<li>\n<p><code>!</code></p>\n</li>\n<li>\n<p><code>!!</code></p>\n</li>\n<li>\n<p>Logical AND</p>\n<ul>\n<li><code>&#x26;&#x26;</code></li>\n</ul>\n</li>\n<li>\n<p>Logical OR</p>\n<ul>\n<li><code>||</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">//logical assignment</span></span>\n<span class="line"><span style="color:#F97583">\t||=</span><span style="color:#6A737D"> //assign the first trusy value</span></span>\n<span class="line"><span style="color:#F97583">\t&#x26;&#x26;=</span><span style="color:#6A737D"> //assign the first falsy value</span></span>\n<span class="line"></span></code></pre>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">    a </span><span style="color:#F97583">||</span><span style="color:#E1E4E8"> b;</span></span>\n<span class="line"><span style="color:#6A737D">    //return the first trusy value</span></span>\n<span class="line"><span style="color:#E1E4E8">    a </span><span style="color:#F97583">??</span><span style="color:#E1E4E8"> b;</span></span>\n<span class="line"><span style="color:#6A737D">    //return the first trusy value include 0</span></span>\n<span class="line"><span style="color:#E1E4E8">    a </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> b;</span></span>\n<span class="line"><span style="color:#6A737D">    //return the first falsy value</span></span>\n<span class="line"><span style="color:#9ECBFF">    ```</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">## Multiplicative Operators-乘性操作符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">- Multiply</span></span>\n<span class="line"><span style="color:#9ECBFF">  - `</span><span style="color:#F97583">*</span><span style="color:#9ECBFF">`</span></span>\n<span class="line"><span style="color:#9ECBFF">- Divide</span></span>\n<span class="line"><span style="color:#9ECBFF">  - `</span><span style="color:#F97583">/</span><span style="color:#9ECBFF">`</span></span>\n<span class="line"><span style="color:#9ECBFF">- Modulus/ Remainder Operator</span></span>\n<span class="line"><span style="color:#9ECBFF">  - `</span><span style="color:#F97583">%</span><span style="color:#9ECBFF">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">## Additive Operators-加性操作符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">- Add</span></span>\n<span class="line"><span style="color:#9ECBFF">  - `</span><span style="color:#F97583">+</span><span style="color:#9ECBFF">`</span></span>\n<span class="line"><span style="color:#9ECBFF">  - Able to combine string</span></span>\n<span class="line"><span style="color:#9ECBFF">- Subtract</span></span>\n<span class="line"><span style="color:#9ECBFF">  - `</span><span style="color:#F97583">-</span><span style="color:#9ECBFF">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">## Exponentiation Operator-指数操作符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">- `</span><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Math.</span><span style="color:#B392F0">pow</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">// 9 console.log(3 ** 2); // 9`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8">## Relational Operators</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">关系操作符</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF">```js</span></span>\n<span class="line"><span style="color:#9ECBFF">  ></span></span>\n<span class="line"><span style="color:#9ECBFF">  &#x3C;</span></span>\n<span class="line"><span style="color:#9ECBFF">  >=</span></span>\n<span class="line"><span style="color:#9ECBFF">  &#x3C;=</span></span>\n<span class="line"></span></code></pre>\n<h2 id="equality-operators-相等操作符">Equality Operators-相等操作符<a class="anchor" href="#equality-operators-相等操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Equal and Not Equal\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C03LanguageBasics-63-x72-y191.png" alt=""></li>\n<li>Compare after conversion</li>\n</ul>\n</li>\n<li>Identically Equal and Not Identically Equal\n<ul>\n<li>Compare without coercion</li>\n<li>identically equal\n<ul>\n<li><code>===</code></li>\n</ul>\n</li>\n<li>not identically equal\n<ul>\n<li><code>!==</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>it is recommended to use identically equal and not identically equal instead.</li>\n</ul>\n<h2 id="assignment-operators-赋值操作符">Assignment Operators-赋值操作符<a class="anchor" href="#assignment-operators-赋值操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Simple assignment is done with the equal sign (=)\n<ul>\n<li>assigns the value on the right to the variable on the left</li>\n</ul>\n</li>\n<li>Compound-assignment operators\n<ul>\n<li>Multiply/assign (*=)</li>\n<li>Divide/assign (/=)</li>\n<li>Modulus/assign (%=)</li>\n<li>Add/assign (+=)</li>\n<li>Subtract/assign (-=)</li>\n<li>Left shift/assign (../&#x3C;=)</li>\n<li>Signed right shift/assign (>>=)</li>\n<li>Unsigned right shift/assign (>>>=)</li>\n</ul>\n</li>\n</ul>\n<h2 id="conditional-operator-条件操作符">Conditional Operator-条件操作符<a class="anchor" href="#conditional-operator-条件操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Short Circuiting\n<ul>\n<li><code>let max = (num1 > num2) ? num1 : num2;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id="comma-operator-逗号操作符">Comma Operator-逗号操作符<a class="anchor" href="#comma-operator-逗号操作符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>is used in the declaration of variables\n<ul>\n<li><code>let num1 = 1, num2 = 2, num3 = 3;</code></li>\n</ul>\n</li>\n<li>can also be used to assign values\n<ul>\n<li><code>let num = (5, 1, 4, 8, 0); // num becomes 0</code></li>\n<li>the comma operator always returns the last item in the expression</li>\n</ul>\n</li>\n</ul>\n<h2 id="numeric-separators-数字分隔符">Numeric Separators-数字分隔符<a class="anchor" href="#numeric-separators-数字分隔符"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#79B8FF">  287_467_000</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">  //return 287467000</span></span>\n<span class="line"><span style="color:#6A737D">  //only allowed between numbers</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,title:"Operators-操作符",tags:["JavaScript"],type:"D",difficulty:null,comment:null,DateStarted:"2022-11-29T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:null,status:["Mature"],reviewed:2,topic:["Basics"],aliases:["Operators-操作符"],"linter-yaml-title-alias":"Operators-操作符",category:"Programming",minutes:2,words:335},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/basics/operators-操作符.md",url=void 0;function rawContent(){return"\n# Operators-操作符\n\n## Unary Operators-一元操作符\n\n- Increment/Decrement\n  - `++`\n  - `--`\n- Unary Plus and Minus\n  - Perform similar to `Number()`\n\n## Bitwise Operators-位操作符\n\n- Bitwise NOT-按位非\n  - `~`\n- Bitwise AND-按位与\n  - `&`\n- Bitwise OR-按位或\n  - `|`\n- Bitwise XOR-按位异或\n  - `^`\n- Left Shift\n  - `<<`\n- Signed Right Shift-有符号右移\n  - `>>`\n- Unsigned Right Shift-无符号右移\n  - `>>>`\n\n## Boolean Operators-布尔操作符\n\n- Logical NOT\n    - `!`\n    - `!!`\n  - Logical AND\n    - `&&`\n  - Logical OR\n\n    - `||`\n\n```js\n//logical assignment\n\t||= //assign the first trusy value\n\t&&= //assign the first falsy value\n```\n\n```js\n    a || b;\n    //return the first trusy value\n    a ?? b;\n    //return the first trusy value include 0\n    a && b;\n    //return the first falsy value\n    ```\n\n## Multiplicative Operators-乘性操作符\n\n- Multiply\n  - `*`\n- Divide\n  - `/`\n- Modulus/ Remainder Operator\n  - `%`\n\n## Additive Operators-加性操作符\n\n- Add\n  - `+`\n  - Able to combine string\n- Subtract\n  - `-`\n\n## Exponentiation Operator-指数操作符\n\n- `console.log(Math.pow(3, 2); // 9 console.log(3 ** 2); // 9`\n\n## Relational Operators-关系操作符\n\n```js\n  >\n  <\n  >=\n  <=\n```\n\n## Equality Operators-相等操作符\n\n- Equal and Not Equal\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C03LanguageBasics-63-x72-y191.png)\n  - Compare after conversion\n- Identically Equal and Not Identically Equal\n  - Compare without coercion\n  - identically equal\n    - `===`\n  - not identically equal\n    - `!==`\n- it is recommended to use identically equal and not identically equal instead.\n\n## Assignment Operators-赋值操作符\n\n- Simple assignment is done with the equal sign (=) \n  - assigns the value on the right to the variable on the left\n- Compound-assignment operators\n  - Multiply/assign (\\*=)\n  - Divide/assign (/=)\n  - Modulus/assign (%=)\n  - Add/assign (+=) \n  - Subtract/assign (-=)\n  - Left shift/assign (../<=) \n  - Signed right shift/assign (>>=)\n  - Unsigned right shift/assign (>>>=)\n\n## Conditional Operator-条件操作符\n\n- Short Circuiting\n  - `let max = (num1 > num2) ? num1 : num2;`\n\n## Comma Operator-逗号操作符 \n\n- is used in the declaration of variables\n  - `let num1 = 1, num2 = 2, num3 = 3;`\n- can also be used to assign values\n  - `let num = (5, 1, 4, 8, 0); // num becomes 0`\n  - the comma operator always returns the last item in the expression\n\n## Numeric Separators-数字分隔符\n\n```js\n  287_467_000;\n  //return 287467000\n  //only allowed between numbers\n```"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"operators-操作符",text:"Operators-操作符#"},{depth:2,slug:"unary-operators-一元操作符",text:"Unary Operators-一元操作符#"},{depth:2,slug:"bitwise-operators-位操作符",text:"Bitwise Operators-位操作符#"},{depth:2,slug:"boolean-operators-布尔操作符",text:"Boolean Operators-布尔操作符#"},{depth:2,slug:"equality-operators-相等操作符",text:"Equality Operators-相等操作符#"},{depth:2,slug:"assignment-operators-赋值操作符",text:"Assignment Operators-赋值操作符#"},{depth:2,slug:"conditional-operator-条件操作符",text:"Conditional Operator-条件操作符#"},{depth:2,slug:"comma-operator-逗号操作符",text:"Comma Operator-逗号操作符#"},{depth:2,slug:"numeric-separators-数字分隔符",text:"Numeric Separators-数字分隔符#"}]}const Content=createComponent(((n,s,a)=>{const{layout:e,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};