import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="list-线性表-">List (线性表) <img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693573540387.png" alt=""><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693628790889.png" alt=""><a class="anchor" href="#list-线性表-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="概念">概念<a class="anchor" href="#概念"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="32-线性表的定义">3.2 　线性表的定义<a class="anchor" href="#32-线性表的定义"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>是一种数据项构成的<strong>有限</strong>序列，即按照一定的<strong>线性</strong>顺序，排列而成的数据项 的集合 7a8)</li>\n</ul>\n\x3c!--SR:!2023-09-13,3,250!2023-09-13,3,250--\x3e\n<h3 id="33-线性表的抽象数据类型">3.3 　线性表的抽象数据类型<a class="anchor" href="#33-线性表的抽象数据类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="34-线性表的顺序存储结构">3.4 　线性表的顺序存储结构<a class="anchor" href="#34-线性表的顺序存储结构"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>3.4.1 　顺序存储定义</li>\n<li>3.4.2 　顺序存储方式</li>\n<li>3.4.3 　数组 (Array) 长度与线性表长度区别</li>\n<li>3.4.4 　地址计算方法</li>\n<li>3.5 　顺序存储结构的插入与删除\n<ul>\n<li>3.5.1 　获得元素操作</li>\n<li>3.5.2 　插入操作</li>\n<li>3.5.3 　删除操作</li>\n<li>3.5.4 　线性表顺序存储结构的优缺点</li>\n</ul>\n</li>\n</ul>\n<h3 id="36-线性表的链式存储结构">3.6 　线性表的链式存储结构<a class="anchor" href="#36-线性表的链式存储结构"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>3.6.1 　顺序存储结构不足的解决办法</li>\n<li>3.6.2 　线性表链式存储结构定义</li>\n<li>3.6.3 　头指针与头结点的异同</li>\n<li>3.6.4 　线性表链式存储结构代码描述</li>\n</ul>\n<h2 id="array">==<a href="Array">Array</a>==<a class="anchor" href="#array"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="数组会用一些名为-索引-的数字来标识每项数据在数组中的位置-0cf">数组会用一些名为 <strong>索引</strong> 的数字来标识每项数据在数组中的位置 0cf)<a class="anchor" href="#数组会用一些名为-索引-的数字来标识每项数据在数组中的位置-0cf"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n\x3c!--SR:!2023-09-13,3,250--\x3e\n<h3 id="操作">操作<a class="anchor" href="#操作"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>读\n<ul>\n<li>O(1)</li>\n</ul>\n</li>\n<li>增</li>\n<li>删\n<ul>\n<li>O(n)</li>\n</ul>\n</li>\n<li>查\n<ul>\n<li>O(n)</li>\n</ul>\n</li>\n</ul>\n<h2 id="链表-linked-list">==链表 (<a href="Linked-List">Linked List</a>)==<a class="anchor" href="#链表-linked-list"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="单链表">==单链表==<a class="anchor" href="#单链表"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>3.7 　单链表的读取</li>\n<li>3.8 　单链表的插入与删除\n<ul>\n<li>3.8.1 　单链表的插入</li>\n<li>3.8.2 　单链表的删除</li>\n</ul>\n</li>\n<li>3.9 　单链表的整表创建</li>\n<li>3.10 　单链表的整表删除</li>\n<li>3.11 　单链表结构与顺序存储结构优缺点</li>\n</ul>\n<h3 id="312-静态链表">3.12 　==静态链表==<a class="anchor" href="#312-静态链表"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>3.12.1 　静态链表的插入操作</li>\n<li>3.12.2 　静态链表的删除操作</li>\n<li>3.12.3 　静态链表优缺点</li>\n</ul>\n<h3 id="313-循环链表">3.13 　==循环链表==<a class="anchor" href="#313-循环链表"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="314-双向链表">3.14 　==双向链表==<a class="anchor" href="#314-双向链表"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h2 id="stack-and-queue"><a href="Stack-and-Queue">Stack and Queue</a><a class="anchor" href="#stack-and-queue"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="stack-栈">==Stack (栈)==<a class="anchor" href="#stack-栈"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>4.2 　栈的定义\n<ul>\n<li>后进先出</li>\n<li>案例\n<ul>\n<li>撤销</li>\n<li>返回上级页面</li>\n</ul>\n</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574753074.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574770147.png" alt=""></li>\n<li>4.2.2 　进栈出栈变化形式\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574945553.png" alt=""></li>\n<li>3 个元素，就有 5 种可能的出栈次序， 如果元素数量多，其实出栈的变化将会更多</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>4.3 　栈的抽象数据类型</li>\n<li>4.4 　栈的顺序存储结构及实现\n<ul>\n<li>4.4.1 　栈的顺序存储结构</li>\n<li>4.4.2 　栈的顺序存储结构 ——进栈操作</li>\n<li>4.4.3 　栈的顺序存储结构 ——出栈</li>\n</ul>\n</li>\n<li>4.5 　两栈共享空间</li>\n<li>4.6 　栈的链式存储结构及实现\n<ul>\n<li>4.6.1 　栈的链式存储结构</li>\n<li>4.6.2 　栈的链式存储结构 ——进栈操作</li>\n<li>4.6.3 　栈的链式存储结构 ——出栈操作</li>\n</ul>\n</li>\n<li>4.7 　栈的作用</li>\n<li>4.8 　栈的应用 ——<strong><em>递归</em></strong>\n<ul>\n<li>4.8.1 　斐波那契数列实现</li>\n<li>4.8.2 　递归定义</li>\n</ul>\n</li>\n<li>4.9 　栈的应用 ——四则运算表达式求值 - 4.9.1 　后缀（逆波兰）表示法定义 - 4.9.2 　后缀表达式计算结果 - 4.9.3 　中缀表达式转后缀表达式</li>\n</ul>\n\x3c!--SR:!2023-09-13,3,250--\x3e\n<h3 id="queue-队列">==Queue (队列)==<a class="anchor" href="#queue-队列"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>4.10 　队列的定义\n<ul>\n<li>先进先出（First In First Out）</li>\n<li>案例\n<ul>\n<li>键盘输入打字 > 屏幕显示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>4.11 　队列的抽象数据类型</li>\n<li>4.12 　循环队列\n<ul>\n<li>4.12.1 　队列顺序存储的不足</li>\n<li>4.12.2 　循环队列定义</li>\n</ul>\n</li>\n<li>4.13 　队列的链式存储结构及实现\n<ul>\n<li>4.13.1 　队列的链式存储结构 ——入队操作</li>\n<li>4.13.2 　队列的链式存储结构 ——出队操作</li>\n</ul>\n</li>\n</ul>\n<h2 id="string-串">==<a href="String">String</a> (串)==<a class="anchor" href="#string-串"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="52-串的定义">5.2 　串的定义<a class="anchor" href="#52-串的定义"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>是由零个或多个字符组成的有限序列，又名叫字符串</li>\n<li>空格串</li>\n<li>子串</li>\n<li>主串</li>\n</ul>\n<h3 id="53-串的比较">5.3 　串的比较<a class="anchor" href="#53-串的比较"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="54-串的抽象数据类型">5.4 　串的抽象数据类型<a class="anchor" href="#54-串的抽象数据类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="55-串的存储结构">5.5 　串的存储结构<a class="anchor" href="#55-串的存储结构"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>5.5.1 　串的顺序存储结构</li>\n<li>5.5.2 　串的链式存储结构</li>\n</ul>\n<h3 id="56-朴素的模式匹配算法">5.6 　朴素的模式匹配算法<a class="anchor" href="#56-朴素的模式匹配算法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h3 id="57-kmp-模式匹配算法">5.7 　<strong><em>KMP 模式匹配算法</em></strong><a class="anchor" href="#57-kmp-模式匹配算法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>5.7.1 　 KMP 模式匹配算法原理</li>\n<li>5.7.2 　 next 数组值推导</li>\n<li>5.7.3 　 KMP 模式匹配算法实现</li>\n<li>5.7.4 　 KMP 模式匹配算法改进</li>\n<li>5.7.5 　 nextval 数组值推导</li>\n</ul>\n\x3c!--SR:!2023-09-13,3,250--\x3e',frontmatter={Datereviewed:null,reviewed:null,difficulty:null,comment:null,draft:!0,title:"List (线性表) ",type:"D",topic:["List"],DateStarted:"2023-09-07T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",status:null,aliases:["List (线性表) ","线性表"],category:"Programming",tags:["Algo"],"linter-yaml-title-alias":"List (线性表) ",minutes:5,words:931},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/searching-(ds)/list.md",url=void 0;function rawContent(){return"\n# List (线性表) ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693573540387.png)![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693628790889.png)\n\n## 概念\n\n### 3.2 　线性表的定义\n\n- 是一种数据项构成的**有限**序列，即按照一定的**线性**顺序，排列而成的数据项 的集合 7a8)\n\x3c!--SR:!2023-09-13,3,250!2023-09-13,3,250--\x3e\n\n### 3.3 　线性表的抽象数据类型\n\n### 3.4 　线性表的顺序存储结构\n\n- 3.4.1 　顺序存储定义\n- 3.4.2 　顺序存储方式\n- 3.4.3 　数组 (Array) 长度与线性表长度区别\n- 3.4.4 　地址计算方法\n- 3.5 　顺序存储结构的插入与删除\n  - 3.5.1 　获得元素操作\n  - 3.5.2 　插入操作\n  - 3.5.3 　删除操作\n  - 3.5.4 　线性表顺序存储结构的优缺点\n\n### 3.6 　线性表的链式存储结构\n\n- 3.6.1 　顺序存储结构不足的解决办法\n- 3.6.2 　线性表链式存储结构定义\n- 3.6.3 　头指针与头结点的异同\n- 3.6.4 　线性表链式存储结构代码描述\n\n## ==[Array](Array)==\n\n### 数组会用一些名为 **索引** 的数字来标识每项数据在数组中的位置 0cf)\n\n\x3c!--SR:!2023-09-13,3,250--\x3e\n\n### 操作\n\n- 读\n  - O(1)\n- 增\n- 删\n  - O(n)\n- 查\n  - O(n)\n\n## ==链表 ([Linked List](Linked-List))==\n\n### ==单链表==\n\n- 3.7 　单链表的读取\n- 3.8 　单链表的插入与删除\n  - 3.8.1 　单链表的插入\n  - 3.8.2 　单链表的删除\n- 3.9 　单链表的整表创建\n- 3.10 　单链表的整表删除\n- 3.11 　单链表结构与顺序存储结构优缺点\n\n### 3.12 　==静态链表==\n\n- 3.12.1 　静态链表的插入操作\n- 3.12.2 　静态链表的删除操作\n- 3.12.3 　静态链表优缺点\n\n### 3.13 　==循环链表==\n\n### 3.14 　==双向链表==\n\n## [Stack and Queue](Stack-and-Queue)\n\n### ==Stack (栈)==\n\n- 4.2 　栈的定义\n  - 后进先出\n  - 案例\n    - 撤销\n    - 返回上级页面\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574753074.png) ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574770147.png)\n  - 4.2.2 　进栈出栈变化形式\n    - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/1693574945553.png)\n    - 3 个元素，就有 5 种可能的出栈次序， 如果元素数量多，其实出栈的变化将会更多\n- 4.3 　栈的抽象数据类型\n- 4.4 　栈的顺序存储结构及实现\n  - 4.4.1 　栈的顺序存储结构\n  - 4.4.2 　栈的顺序存储结构 ——进栈操作\n  - 4.4.3 　栈的顺序存储结构 ——出栈\n- 4.5 　两栈共享空间\n- 4.6 　栈的链式存储结构及实现\n  - 4.6.1 　栈的链式存储结构\n  - 4.6.2 　栈的链式存储结构 ——进栈操作\n  - 4.6.3 　栈的链式存储结构 ——出栈操作\n- 4.7 　栈的作用\n- 4.8 　栈的应用 ——**_递归_**\n  - 4.8.1 　斐波那契数列实现\n  - 4.8.2 　递归定义\n- 4.9 　栈的应用 ——四则运算表达式求值 - 4.9.1 　后缀（逆波兰）表示法定义 - 4.9.2 　后缀表达式计算结果 - 4.9.3 　中缀表达式转后缀表达式\n\x3c!--SR:!2023-09-13,3,250--\x3e\n\n### ==Queue (队列)==\n\n- 4.10 　队列的定义\n  - 先进先出（First In First Out）\n  - 案例\n    - 键盘输入打字 > 屏幕显示\n- 4.11 　队列的抽象数据类型\n- 4.12 　循环队列\n  - 4.12.1 　队列顺序存储的不足\n  - 4.12.2 　循环队列定义\n- 4.13 　队列的链式存储结构及实现\n  - 4.13.1 　队列的链式存储结构 ——入队操作\n  - 4.13.2 　队列的链式存储结构 ——出队操作\n\n## ==[String](String) (串)==\n\n### 5.2 　串的定义\n\n- 是由零个或多个字符组成的有限序列，又名叫字符串\n- 空格串\n- 子串\n- 主串\n\n### 5.3 　串的比较\n\n### 5.4 　串的抽象数据类型\n\n### 5.5 　串的存储结构\n\n- 5.5.1 　串的顺序存储结构\n- 5.5.2 　串的链式存储结构\n\n### 5.6 　朴素的模式匹配算法\n\n### 5.7 　**_KMP 模式匹配算法_**\n\n- 5.7.1 　 KMP 模式匹配算法原理\n- 5.7.2 　 next 数组值推导\n- 5.7.3 　 KMP 模式匹配算法实现\n- 5.7.4 　 KMP 模式匹配算法改进\n- 5.7.5 　 nextval 数组值推导\n\x3c!--SR:!2023-09-13,3,250--\x3e\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"list-线性表-",text:"List (线性表) #"},{depth:2,slug:"概念",text:"概念#"},{depth:3,slug:"32-线性表的定义",text:"3.2 　线性表的定义#"},{depth:3,slug:"33-线性表的抽象数据类型",text:"3.3 　线性表的抽象数据类型#"},{depth:3,slug:"34-线性表的顺序存储结构",text:"3.4 　线性表的顺序存储结构#"},{depth:3,slug:"36-线性表的链式存储结构",text:"3.6 　线性表的链式存储结构#"},{depth:2,slug:"array",text:"==Array==#"},{depth:3,slug:"数组会用一些名为-索引-的数字来标识每项数据在数组中的位置-0cf",text:"数组会用一些名为 索引 的数字来标识每项数据在数组中的位置 0cf)#"},{depth:3,slug:"操作",text:"操作#"},{depth:2,slug:"链表-linked-list",text:"==链表 (Linked List)==#"},{depth:3,slug:"单链表",text:"==单链表==#"},{depth:3,slug:"312-静态链表",text:"3.12 　==静态链表==#"},{depth:3,slug:"313-循环链表",text:"3.13 　==循环链表==#"},{depth:3,slug:"314-双向链表",text:"3.14 　==双向链表==#"},{depth:2,slug:"stack-and-queue",text:"Stack and Queue#"},{depth:3,slug:"stack-栈",text:"==Stack (栈)==#"},{depth:3,slug:"queue-队列",text:"==Queue (队列)==#"},{depth:2,slug:"string-串",text:"==String (串)==#"},{depth:3,slug:"52-串的定义",text:"5.2 　串的定义#"},{depth:3,slug:"53-串的比较",text:"5.3 　串的比较#"},{depth:3,slug:"54-串的抽象数据类型",text:"5.4 　串的抽象数据类型#"},{depth:3,slug:"55-串的存储结构",text:"5.5 　串的存储结构#"},{depth:3,slug:"56-朴素的模式匹配算法",text:"5.6 　朴素的模式匹配算法#"},{depth:3,slug:"57-kmp-模式匹配算法",text:"5.7 　KMP 模式匹配算法#"}]}const Content=createComponent(((n,i,a)=>{const{layout:l,...e}=frontmatter;return e.file=file,e.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};