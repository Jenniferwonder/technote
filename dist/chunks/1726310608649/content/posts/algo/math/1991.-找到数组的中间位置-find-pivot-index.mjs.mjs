import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="1991-找到数组的中间位置-find-pivot-index">1991. 找到数组的中间位置 (Find-Pivot-Index)<a class="anchor" href="#1991-找到数组的中间位置-find-pivot-index"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="题目要求">题目要求<a class="anchor" href="#题目要求"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本题要求满足找到数组的中间位置，满足中间位置左边之和等于右边之和，若中间位置为 0， 则左边之和为 0， 若中间位置为末位，则右边之和为 0。</p>\n<h2 id="核心方法">核心方法<a class="anchor" href="#核心方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ol>\n<li>数组元素求和：\n<ul>\n<li>数组元素值总和：<strong><code>nums.reduce((prev, cur) => prev + cur, 0)</code></strong></li>\n<li>迭代求和：<code>sum += nums[i]</code></li>\n</ul>\n</li>\n</ol>\n<h2 id="关键步骤">关键步骤<a class="anchor" href="#关键步骤"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="代码实现">代码实现<a class="anchor" href="#代码实现"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>本方案可满足时间复杂度 <code>O(n)</code>，空间复杂度 <code>O(1)</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">var</span><span style="color:#B392F0"> findMiddleIndex</span><span style="color:#F97583"> =</span><span style="color:#F97583"> function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">nums</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> total</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> nums.</span><span style="color:#B392F0">reduce</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">prev</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">cur</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> prev </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> cur, </span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> sum </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> nums.</span><span style="color:#79B8FF">length</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">2</span><span style="color:#F97583"> *</span><span style="color:#E1E4E8"> sum </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> nums[i] </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> total) {</span></span>\n<span class="line"><span style="color:#F97583">\t\t\treturn</span><span style="color:#E1E4E8"> i;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tsum </span><span style="color:#F97583">+=</span><span style="color:#E1E4E8"> nums[i];</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> -</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>',frontmatter={tags:["Algo"],category:"Programming",draft:!1,LCID:"LC-1991",title:"1991. 找到数组的中间位置 (Find-Pivot-Index)",type:"A",topic:["Array","Math"],difficulty:"Easy",Time:"O(n)",Space:"O(1)",Like:!0,Solution:"求和",SourceLink:"https://leetcode-cn.com/problems/find-pivot-index/",DateStarted:"2023-09-02T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",status:null,aliases:["1991. 找到数组的中间位置 (Find-Pivot-Index)","LC-1991"],TimeNeed:"Good",reviewed:4,comment:"reduce and loop to add up sum",Datereviewed:"2024-02-16T16:00:00.000Z","linter-yaml-title-alias":"1991. 找到数组的中间位置 (Find-Pivot-Index)",minutes:1,words:180},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/algo/math/1991.-找到数组的中间位置-find-pivot-index.md",url=void 0;function rawContent(){return"\n# 1991. 找到数组的中间位置 (Find-Pivot-Index)\n\n## 题目要求\n\n本题要求满足找到数组的中间位置，满足中间位置左边之和等于右边之和，若中间位置为 0， 则左边之和为 0， 若中间位置为末位，则右边之和为 0。\n\n## 核心方法\n\n1. 数组元素求和：\n   - 数组元素值总和：**`nums.reduce((prev, cur) => prev + cur, 0)`**\n   - 迭代求和：`sum += nums[i]`\n\n## 关键步骤\n\n## 代码实现\n\n本方案可满足时间复杂度 `O(n)`，空间复杂度 `O(1)`\n\n```js\nvar findMiddleIndex = function (nums) {\n\tconst total = nums.reduce((prev, cur) => prev + cur, 0);\n\tlet sum = 0;\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (2 * sum + nums[i] === total) {\n\t\t\treturn i;\n\t\t}\n\t\tsum += nums[i];\n\t}\n\treturn -1;\n};\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"1991-找到数组的中间位置-find-pivot-index",text:"1991. 找到数组的中间位置 (Find-Pivot-Index)#"},{depth:2,slug:"题目要求",text:"题目要求#"},{depth:2,slug:"核心方法",text:"核心方法#"},{depth:2,slug:"关键步骤",text:"关键步骤#"},{depth:2,slug:"代码实现",text:"代码实现#"}]}const Content=createComponent(((n,s,a)=>{const{layout:e,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};