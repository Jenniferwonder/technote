import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<hr>\n<p>Basic</p>\n<h3 id="函数本质">函数本质<a class="anchor" href="#函数本质"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>每个函数都是 Function 对象类型的实例\n<ul>\n<li>Function 也有属性和方法</li>\n</ul>\n</li>\n<li>函数名在 ES 中就是变量，就是指向函数对象的指针\n<ul>\n<li>函数可以用在任何可以使用变量的地方</li>\n<li>函数作为参数传给另一个函数</li>\n<li>在一个函数中返回另一个函数</li>\n<li>一个函数可以有多个名称 * <code>let anotherSum = sum;</code><br>\n📌: JS::JS-Function<br>\n🏷️: JS-Function</li>\n</ul>\n</li>\n</ul>\n<hr>\n<hr>\n<p>Basic</p>\n<h3 id="无重载-no-overloading">无重载 (No Overloading)<a class="anchor" href="#无重载-no-overloading"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>Back:</p>\n<ul>\n<li>两个同名函数，则后定义的会覆盖先定义的</li>\n<li>可以通过检查参数的类型和数量，然后分别执行不同的逻辑来模拟函数重载\n<ul>\n<li>Java 中，一个函数可以有两个定义， 只要签名（接收参数的类型和数量）不同就行</li>\n</ul>\n</li>\n</ul>\n<hr>',frontmatter={draft:!1,title:"function-feature-函数本质与特点",topic:["Function"],type:"D",tags:["JavaScript"],DateStarted:"2024-02-16T00:00:00.000Z",DateModified:"2024-04-25T00:00:00.000Z",Datereviewed:"2024-02-16T00:00:00.000Z",reviewed:1,difficulty:"Good",status:null,comment:null,category:"Programming",minutes:1,words:195},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/function/function-feature-函数本质与特点.md",url=void 0;function rawContent(){return"\n---\n\nBasic\n\n### 函数本质\n\nBack:\n\n- 每个函数都是 Function 对象类型的实例\n  - Function 也有属性和方法\n- 函数名在 ES 中就是变量，就是指向函数对象的指针\n\t- 函数可以用在任何可以使用变量的地方\n\t- 函数作为参数传给另一个函数\n\t- 在一个函数中返回另一个函数\n\t- 一个函数可以有多个名称 \\* `let anotherSum = sum;`  \n  📌: JS::JS-Function  \n  🏷️: JS-Function\n\n---\n\n---\n\nBasic\n\n### 无重载 (No Overloading)\n\nBack:\n\n- 两个同名函数，则后定义的会覆盖先定义的\n- 可以通过检查参数的类型和数量，然后分别执行不同的逻辑来模拟函数重载\n  - Java 中，一个函数可以有两个定义， 只要签名（接收参数的类型和数量）不同就行\n\n---\n"}function compiledContent(){return html}function getHeadings(){return[{depth:3,slug:"函数本质",text:"函数本质#"},{depth:3,slug:"无重载-no-overloading",text:"无重载 (No Overloading)#"}]}const Content=createComponent(((n,t,e)=>{const{layout:o,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};