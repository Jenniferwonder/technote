import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="timer-functions-计时器函数">Timer Functions-计时器函数<a class="anchor" href="#timer-functions-计时器函数"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h4 id="1-settimeoutcallback-function-mileseconds-arg1-arg2">1. setTimeout(<code>callback function</code>, <code>mileseconds</code>, <code>arg1</code>, <code>arg2</code>)<a class="anchor" href="#1-settimeoutcallback-function-mileseconds-arg1-arg2"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>to execute a function after certain mileseconds</li>\n<li>setTimeout、setInterval 最短时长为 4ms</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">setTimeout</span><span style="color:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#E1E4E8">\t(</span><span style="color:#FFAB70">ing1</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">ing2</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`Here are ${</span><span style="color:#E1E4E8">ing1</span><span style="color:#9ECBFF">} and ${</span><span style="color:#E1E4E8">ing2</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">),</span></span>\n<span class="line"><span style="color:#79B8FF">\t3000</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">\tolives,</span></span>\n<span class="line"><span style="color:#E1E4E8">\tspinach</span></span>\n<span class="line"><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#6A737D">//after 3000 mileseconds/ 3 seconds, the console will execute console.log</span></span>\n<span class="line"></span></code></pre>\n<h4 id="2-cleartimeoutsettimeout">2. clearTimeout(setTimeout())<a class="anchor" href="#2-cleartimeoutsettimeout"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>to not execute the setTimeout function</li>\n</ul>\n<h4 id="3-setintervalcallback-function-mileseconds">3. setInterval(<code>callback function</code>, <code>mileseconds</code>)<a class="anchor" href="#3-setintervalcallback-function-mileseconds"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>to repeat executing a function after a certain mileseconds</li>\n<li>setTimeout、setInterval 最短时长为 4ms</li>\n</ul>\n<h4 id="4-clearintervalsetinterval">4. clearInterval(setInterval())<a class="anchor" href="#4-clearintervalsetinterval"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>to stop executing the setInterval function</li>\n</ul>\n<h2 id="定时器不准的原因">定时器不准的原因<a class="anchor" href="#定时器不准的原因"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="1-settimeoutsetinterval-的执行时间并不是确定的">1. setTimeout/setInterval 的执行时间并不是确定的<a class="anchor" href="#1-settimeoutsetinterval-的执行时间并不是确定的"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>setTimeout/setInterval 是宏任务，根据事件轮询机制，其他任务会阻塞或延迟 js 任务的执行</li>\n<li>考虑极端情况，假如定时器里面的代码需要进行大量的计算，或者是 DOM 操作，代码执行时间超过定时器的时间，会出现定时器不准的情况</li>\n</ul>\n<h4 id="2-settimeoutsetinterval-动画卡顿">2. setTimeout/setInterval 动画卡顿<a class="anchor" href="#2-settimeoutsetinterval-动画卡顿"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>不同设备的屏幕刷新频率可能不同， setTimeout/setInterval 只能设置固定的时间间隔，这个时间和屏幕刷新间隔可能不同</p>\n<p>setTimeout/setInterval 通过设置一个间隔时间，来不断改变图像实现动画效果，在不同设备上可能会出现卡顿、抖动等现象</p>\n<h4 id="3-requestanimationframe">3. requestAnimationFrame<a class="anchor" href="#3-requestanimationframe"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><strong><code>requestAnimationFrame</code> 是浏览器专门为动画提供的 API</strong><br>\nrequestAnimationFrame 刷新频率与显示器的刷新频率保持一致，使用该 api 可以避免使用 setTimeout/setInterval 造成动画卡顿的情况<br>\nrequestAnimationFrame：告诉浏览器在下次重绘之前执行传入的回调函数(通常是操纵 dom，更新动画的函数)</p>\n<h4 id="4-settimeoutsetintervalrequestanimationframe-三者的区别">4. setTimeout、setInterval、requestAnimationFrame 三者的区别<a class="anchor" href="#4-settimeoutsetintervalrequestanimationframe-三者的区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><strong>1）引擎层面</strong></p>\n<p>setTimeout 属于 <code>JS引擎</code> ，存在事件轮询<br>\nrequestAnimationFrame 属于 <code>GUI引擎</code><br>\n<code>JS引擎与GUI引擎</code>是互斥的，也就是说 GUI 引擎在渲染时会阻塞 JS 引擎的计算</p>\n<p>这样设计的原因，如果在 GUI 渲染的时候，JS 同时又改变了 dom，那么就会造成页面渲染不同步</p>\n<p><strong>2）性能层面</strong></p>\n<p>当页面被隐藏或最小化时，定时器 setTimeout 仍会在后台执行动画任务</p>\n<p>当页面处于未激活的状态下，该页面的屏幕刷新任务会被系统暂停，requestAnimationFrame 也会停止</p>\n<h4 id="5-settimeout-模拟实现-setinterval">5. setTimeout 模拟实现 setInterval<a class="anchor" href="#5-settimeout-模拟实现-setinterval"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// 使用闭包实现</span></span>\n<span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> mySetInterval</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">fn</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">t</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> timer </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfunction</span><span style="color:#B392F0"> interval</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tfn</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ttimer </span><span style="color:#F97583">=</span><span style="color:#B392F0"> setTimeout</span><span style="color:#E1E4E8">(interval, t);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#B392F0">\tinterval</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// cancel用来清除定时器</span></span>\n<span class="line"><span style="color:#B392F0">\t\tcancel</span><span style="color:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tclearTimeout</span><span style="color:#E1E4E8">(timer);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t},</span></span>\n<span class="line"><span style="color:#E1E4E8">\t};</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="6-setinterval-模拟实现-settimeout">6. setInterval 模拟实现 setTimeout<a class="anchor" href="#6-setinterval-模拟实现-settimeout"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> mySetTimeout</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">fn</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">time</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> timer </span><span style="color:#F97583">=</span><span style="color:#B392F0"> setInterval</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tclearInterval</span><span style="color:#E1E4E8">(timer);</span></span>\n<span class="line"><span style="color:#B392F0">\t\tfn</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}, time);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">// 使用</span></span>\n<span class="line"><span style="color:#B392F0">mySetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">}, </span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>',frontmatter={draft:!1,title:"Timer Functions-计时器函数",tags:["JavaScript"],topic:["Function","BOM"],type:"D",status:null,DateStarted:"2022-12-14T00:00:00.000Z",DateModified:"2024-06-11T00:00:00.000Z",Datereviewed:"2024-04-17T00:00:00.000Z",reviewed:1,difficulty:null,comment:null,aliases:["Timer Functions-计时器函数"],"linter-yaml-title-alias":"Timer Functions-计时器函数",category:"Programming",minutes:3,words:598},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/bom/timer-计时器函数.md",url=void 0;function rawContent(){return"\n# Timer Functions-计时器函数\n\n#### 1. setTimeout(`callback function`, `mileseconds`, `arg1`, `arg2`)\n\n- to execute a function after certain mileseconds\n- setTimeout、setInterval 最短时长为 4ms\n\n```js\nsetTimeout(\n\t(ing1, ing2) => console.log(`Here are ${ing1} and ${ing2}`),\n\t3000,\n\tolives,\n\tspinach\n);\n//after 3000 mileseconds/ 3 seconds, the console will execute console.log\n```\n\n#### 2. clearTimeout(setTimeout())\n\n- to not execute the setTimeout function\n\n#### 3. setInterval(`callback function`, `mileseconds`)\n\n- to repeat executing a function after a certain mileseconds\n- setTimeout、setInterval 最短时长为 4ms\n\n#### 4. clearInterval(setInterval())\n\n- to stop executing the setInterval function\n\n## 定时器不准的原因\n\n#### 1. setTimeout/setInterval 的执行时间并不是确定的\n\n- setTimeout/setInterval 是宏任务，根据事件轮询机制，其他任务会阻塞或延迟 js 任务的执行\n- 考虑极端情况，假如定时器里面的代码需要进行大量的计算，或者是 DOM 操作，代码执行时间超过定时器的时间，会出现定时器不准的情况\n\n#### 2. setTimeout/setInterval 动画卡顿\n\n不同设备的屏幕刷新频率可能不同， setTimeout/setInterval 只能设置固定的时间间隔，这个时间和屏幕刷新间隔可能不同\n\nsetTimeout/setInterval 通过设置一个间隔时间，来不断改变图像实现动画效果，在不同设备上可能会出现卡顿、抖动等现象\n\n#### 3. requestAnimationFrame\n\n**`requestAnimationFrame` 是浏览器专门为动画提供的 API**  \nrequestAnimationFrame 刷新频率与显示器的刷新频率保持一致，使用该 api 可以避免使用 setTimeout/setInterval 造成动画卡顿的情况  \nrequestAnimationFrame：告诉浏览器在下次重绘之前执行传入的回调函数(通常是操纵 dom，更新动画的函数)\n\n#### 4. setTimeout、setInterval、requestAnimationFrame 三者的区别\n\n**1）引擎层面**\n\nsetTimeout 属于 `JS引擎` ，存在事件轮询  \nrequestAnimationFrame 属于 `GUI引擎`  \n`JS引擎与GUI引擎`是互斥的，也就是说 GUI 引擎在渲染时会阻塞 JS 引擎的计算\n\n这样设计的原因，如果在 GUI 渲染的时候，JS 同时又改变了 dom，那么就会造成页面渲染不同步\n\n**2）性能层面**\n\n当页面被隐藏或最小化时，定时器 setTimeout 仍会在后台执行动画任务\n\n当页面处于未激活的状态下，该页面的屏幕刷新任务会被系统暂停，requestAnimationFrame 也会停止\n\n#### 5. setTimeout 模拟实现 setInterval\n\n```js\n// 使用闭包实现\nfunction mySetInterval(fn, t) {\n\tlet timer = null;\n\tfunction interval() {\n\t\tfn();\n\t\ttimer = setTimeout(interval, t);\n\t}\n\tinterval();\n\treturn {\n\t\t// cancel用来清除定时器\n\t\tcancel() {\n\t\t\tclearTimeout(timer);\n\t\t},\n\t};\n}\n```\n\n#### 6. setInterval 模拟实现 setTimeout\n\n```js\nfunction mySetTimeout(fn, time) {\n\tlet timer = setInterval(() => {\n\t\tclearInterval(timer);\n\t\tfn();\n\t}, time);\n}\n\n// 使用\nmySetTimeout(() => {\n\tconsole.log(1);\n}, 2000);\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"timer-functions-计时器函数",text:"Timer Functions-计时器函数#"},{depth:4,slug:"1-settimeoutcallback-function-mileseconds-arg1-arg2",text:"1. setTimeout(callback function, mileseconds, arg1, arg2)#"},{depth:4,slug:"2-cleartimeoutsettimeout",text:"2. clearTimeout(setTimeout())#"},{depth:4,slug:"3-setintervalcallback-function-mileseconds",text:"3. setInterval(callback function, mileseconds)#"},{depth:4,slug:"4-clearintervalsetinterval",text:"4. clearInterval(setInterval())#"},{depth:2,slug:"定时器不准的原因",text:"定时器不准的原因#"},{depth:4,slug:"1-settimeoutsetinterval-的执行时间并不是确定的",text:"1. setTimeout/setInterval 的执行时间并不是确定的#"},{depth:4,slug:"2-settimeoutsetinterval-动画卡顿",text:"2. setTimeout/setInterval 动画卡顿#"},{depth:4,slug:"3-requestanimationframe",text:"3. requestAnimationFrame#"},{depth:4,slug:"4-settimeoutsetintervalrequestanimationframe-三者的区别",text:"4. setTimeout、setInterval、requestAnimationFrame 三者的区别#"},{depth:4,slug:"5-settimeout-模拟实现-setinterval",text:"5. setTimeout 模拟实现 setInterval#"},{depth:4,slug:"6-setinterval-模拟实现-settimeout",text:"6. setInterval 模拟实现 setTimeout#"}]}const Content=createComponent(((n,e,s)=>{const{layout:t,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};