import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="context-and-scope-执行上下文与作用域">Context and Scope-执行上下文与作用域<a class="anchor" href="#context-and-scope-执行上下文与作用域"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<blockquote>\n<p>在 JavaScript 中，作用域、作用域链和执行上下文是密切相关的概念，它们与变量和函数的查找、访问以及生命周期有关。<br>\n<strong>作用域</strong> 是变量和函数的可访问范围；<strong>作用域链</strong> 是由当前执行上下文的作用域和其父级作用域组成的链表，用于在代码执行过程中查找变量和函数；<strong>执行上下文</strong>是代码执行过程中的环境，包含了当前执行的代码所需的所有信息。这三者共同决定了代码执行过程中变量和函数的查找、访问以及生命周期。</p>\n</blockquote>\n<h2 id="作用域-scope">作用域 (Scope)<a class="anchor" href="#作用域-scope"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><strong>作用域是一个变量或函数的可访问范围</strong>。JavaScript 中有三种作用域：<strong>全局作用域</strong>、<strong>局部（函数）作用域</strong>和<strong>块级作用域</strong>。<br>\n变量的生命周期受其作用域的限制。<br>\n作用域最大的用处就是<code>隔离变量</code>，不同作用域下同名变量不会有冲突</p>\n<h3 id="全局作用域">全局作用域<a class="anchor" href="#全局作用域"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>声明的变量和函数可以在整个代码中访问，</li>\n<li>全局作用域中的变量在整个程序执行过程中持续存在，</li>\n<li>In web browsers, the global context is said to be that of the window object</li>\n<li>created as properties and methods on the window object</li>\n<li>var</li>\n</ul>\n<h3 id="局部函数作用域">局部/函数作用域<a class="anchor" href="#局部函数作用域"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>声明的变量和函数只能在特定的函数内部访问，</li>\n<li>是指声明在函数内部的变量，函数的作用域在函数定义的时候就决定了</li>\n<li>局部作用域中的变量在函数执行结束时销毁</li>\n</ul>\n<h3 id="块级作用域">块级作用域<a class="anchor" href="#块级作用域"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>块级作用域在代码块执行结束时，块级作用域中的变量将被销毁。</li>\n<li>一对花括号内定义，对<code>let</code>和<code>const</code>关键字声明的变量有效。</li>\n<li>块作用域由<code>{ }</code>包括，if 和 for 语句里面的<code>{ }</code>也属于块作用域\n<ul>\n<li>Eg. if/ for loops</li>\n</ul>\n</li>\n<li>在块级作用域中，可通过 let 和 const 声明变量，该变量在指定块的作用域外无法被访问\n<ul>\n<li>let; const (not var)</li>\n</ul>\n</li>\n<li>Related:: <a href="variable-let-const-var-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">variable-let-const-var-变量声明</a></li>\n</ul>\n<h3 id="词法作用域的理解">词法作用域的理解<a class="anchor" href="#词法作用域的理解"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>词法作用域（有时也称为静态作用域）是在编程中用于确定变量可见性和生命周期的一种作用域规则。以下是对词法作用域的深入理解：</p>\n<ol>\n<li><strong>定义时确定</strong>：词法作用域是在代码的编写阶段定义的，而不是在运行时。换句话说，作用域是由代码的物理结构决定的，而不是它是如何被调用的。</li>\n<li><strong>嵌套结构</strong>：在词法作用域中，我们可以在一个函数内部定义另一个函数，从而形成一个嵌套的作用域链。内部函数可以访问其外部函数的变量和参数，但外部函数不能访问其内部函数的变量。</li>\n<li><strong>与动态作用域的区别</strong>：词法作用域与动态作用域是两种不同的作用域规则。在动态作用域中，作用域是由函数如何被调用决定的，而不是代码的结构。JavaScript 使用的是词法作用域，而不是动态作用域。</li>\n<li><strong>闭包</strong>：闭包是词法作用域和函数的强大组合。当函数能够记住并访问其词法作用域，即使当该函数在其原始词法作用域之外执行时，我们就称之为闭包。</li>\n<li><strong>性能考虑</strong>：由于词法作用域是在编译时确定的，编译器可以对代码进行优化。知道哪些变量在哪里被访问，以及它们如何被访问，可以帮助编译器提高代码的执行效率。</li>\n</ol>\n<ul>\n<li>JS => Lexical scoping which is defined by the placement of functions and blocks in the code</li>\n<li>[JavaScript 深入之词法作用域和动态作用域](<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3</a> <a href="https://github.com/mqyqingfeng/Blog/issues/3">https://github.com/mqyqingfeng/Blog/issues/3</a>)</li>\n</ul>\n<h2 id="作用域链scope-chain">作用域链（Scope Chain）<a class="anchor" href="#作用域链scope-chain"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Identifier Lookup 标识符查找\n<ul>\n<li><strong>当代码执行过程中访问一个变量或函数时，JavaScript 引擎会沿着作用域链查找该标识符</strong>。作用域链是由当前执行上下文的作用域和其所有父级作用域组成的链表。</li>\n<li>查找过程从当前作用域开始，然后逐级向上查找，直到找到目标标识符或到达全局作用域。如果在全局作用域中仍未找到目标标识符，则返回<code>undefined</code>。</li>\n<li>特点：\n<ul>\n<li>Child scope can access variables in its parent scope</li>\n<li>identifiers in a parent context cannot be referenced if an identifier in the local context has the same name,</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Scope Chain Augmentation 作用域链增强\n<ul>\n<li>The catch block in a try-catch statement</li>\n<li>A <code>with</code> statement</li>\n</ul>\n</li>\n<li>[JavaScript 深入之作用域链](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6</a> <a href="https://github.com/mqyqingfeng/Blog/issues/6">https://github.com/mqyqingfeng/Blog/issues/6</a>)</li>\n</ul>\n<h2 id="执行上下文execution-context">执行上下文（Execution Context）<a class="anchor" href="#执行上下文execution-context"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p>[理解 JavaScript 中的执行上下文和执行栈](<a href="https://juejin.cn/post/6844903682283143181">https://juejin.cn/post/6844903682283143181</a> <a href="https://juejin.cn/post/6844903682283143181">https://juejin.cn/post/6844903682283143181</a>) >[理解 JavaScript 的执行上下文](<a href="https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F72959191">https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F72959191</a> <a href="https://zhuanlan.zhihu.com/p/72959191">https://zhuanlan.zhihu.com/p/72959191</a>) >[JavaScript 进阶-执行上下文](<a href="https://juejin.cn/post/6844903983438381069">https://juejin.cn/post/6844903983438381069</a> <a href="https://juejin.cn/post/6844903983438381069">https://juejin.cn/post/6844903983438381069</a>) >[JavaScript 深入之执行上下文栈](<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F4">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F4</a> <a href="https://github.com/mqyqingfeng/Blog/issues/4">https://github.com/mqyqingfeng/Blog/issues/4</a>) ><a href="https://github.com/kuitos/kuitos.github.io/issues/18">一道 js 面试题引发的思考 · Issue #18 · kuitos/kuitos.github.io · GitHub</a></p>\n</blockquote>\n<p><strong>执行上下文是 JavaScript 代码执行过程中的环境</strong>。每当进入一个新的函数执行或全局代码执行时，都会创建一个新的执行上下文。执行上下文包含了当前执行的代码所需的所有信息，如变量、函数、作用域链等。<br>\nJavaScript 引擎使用执行上下文栈（Execution Context Stack）来管理执行上下文。栈顶的执行上下文为当前执行的代码环境。当一个函数被调用时，一个新的执行上下文被压入栈顶；当函数执行结束时，执行上下文从栈顶弹出，返回到调用者的上下文环境。</p>\n<ul>\n<li>context</li>\n<li>Each execution context has an associated variable object upon which all of its defined variables and functions exist.</li>\n<li>Refers to the environment where a certain variable is declared;<br>\nJavascript 代码都是在 <strong>执行上下文</strong> 中运行的<br>\n执行上下文： 指当前执行环境中的变量、函数声明、作用域链 <a href="Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F">Scope-作用域</a>、this 等信息</li>\n</ul>\n<h4 id="全局函数eval-执行上下文">全局、函数、Eval 执行上下文<a class="anchor" href="#全局函数eval-执行上下文"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>执行上下文分为 <code>全局、函数、Eval执行上下文</code></p>\n<ol>\n<li>全局执行上下文（浏览器环境下，为全局的 <code>window</code> 对象）</li>\n<li>函数执行上下文，每当一个函数被调用时, 都会为该函数创建一个新的上下文</li>\n<li>🟨Eval 函数执行上下文，如 eval(1 + 2)<br>\n对于每个执行上下文，都有三个重要属性：变量对象、作用域链 (<a href="Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F">Scope-作用域</a> chain)、this`</li>\n</ol>\n<h4 id="变量对象">变量对象<a class="anchor" href="#变量对象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>变量对象是与执行上下文相关的数据作用域，存储了上下文中定义的变量和函数声明<br>\n变量对象是一个抽象的概念，在全局执行上下文中，变量对象就是全局对象。</p>\n<h3 id="执行上下文的特点">执行上下文的特点<a class="anchor" href="#执行上下文的特点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>单线程，只在主线程上运行；</li>\n<li>同步执行，从上向下按顺序执行；</li>\n<li>全局上下文只有一个，也就是 <code>window</code> 对象；</li>\n<li>函数每调用一次就会产生一个新的执行上下文环境。</li>\n</ol>\n<h3 id="执行上下文生命周期">执行上下文生命周期<a class="anchor" href="#执行上下文生命周期"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="创建阶段">创建阶段<a class="anchor" href="#创建阶段"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>生成变量对象、建立作用域链 <a href="Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F">Scope-作用域</a>、确定 this 的指向</p>\n<h4 id="执行阶段">执行阶段<a class="anchor" href="#执行阶段"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>变量赋值、函数的引用、执行其他代码<br>\n<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f02e41f0bff3498990d04b7c90215a1f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="执行上下文.jpg"></p>',frontmatter={aliases:["Context and Scope-执行上下文与作用域"],draft:!1,title:"Context and Scope-执行上下文与作用域",tags:["JavaScript"],type:"D",topic:["Scope"],DateStarted:"2023-07-28T00:00:00.000Z",DateModified:"2024-06-11T00:00:00.000Z",Datereviewed:null,status:["Mature"],reviewed:2,difficulty:null,comment:null,category:"Programming","linter-yaml-title-alias":"Context and Scope-执行上下文与作用域",minutes:9,words:1820},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/scope/context-and-scope-执行上下文与作用域.md",url=void 0;function rawContent(){return"\n# Context and Scope-执行上下文与作用域\n>在 JavaScript 中，作用域、作用域链和执行上下文是密切相关的概念，它们与变量和函数的查找、访问以及生命周期有关。  \n>**作用域** 是变量和函数的可访问范围；**作用域链** 是由当前执行上下文的作用域和其父级作用域组成的链表，用于在代码执行过程中查找变量和函数；**执行上下文**是代码执行过程中的环境，包含了当前执行的代码所需的所有信息。这三者共同决定了代码执行过程中变量和函数的查找、访问以及生命周期。\n\n## 作用域 (Scope)\n**作用域是一个变量或函数的可访问范围**。JavaScript 中有三种作用域：**全局作用域**、**局部（函数）作用域**和**块级作用域**。  \n 变量的生命周期受其作用域的限制。  \n 作用域最大的用处就是`隔离变量`，不同作用域下同名变量不会有冲突\n### 全局作用域\n- 声明的变量和函数可以在整个代码中访问，\n- 全局作用域中的变量在整个程序执行过程中持续存在，\n- In web browsers, the global context is said to be that of the window object\n- created as properties and methods on the window object\n- var\n### 局部/函数作用域\n- 声明的变量和函数只能在特定的函数内部访问，\n- 是指声明在函数内部的变量，函数的作用域在函数定义的时候就决定了\n- 局部作用域中的变量在函数执行结束时销毁\n### 块级作用域\n- 块级作用域在代码块执行结束时，块级作用域中的变量将被销毁。  \n- 一对花括号内定义，对`let`和`const`关键字声明的变量有效。  \n- 块作用域由`{ }`包括，if 和 for 语句里面的`{ }`也属于块作用域\n\t- Eg. if/ for loops\n- 在块级作用域中，可通过 let 和 const 声明变量，该变量在指定块的作用域外无法被访问\n\t- let; const (not var)\n- Related:: [variable-let-const-var-变量声明](variable-let-const-var-变量声明)\n### 词法作用域的理解\n词法作用域（有时也称为静态作用域）是在编程中用于确定变量可见性和生命周期的一种作用域规则。以下是对词法作用域的深入理解：\n1. **定义时确定**：词法作用域是在代码的编写阶段定义的，而不是在运行时。换句话说，作用域是由代码的物理结构决定的，而不是它是如何被调用的。\n2. **嵌套结构**：在词法作用域中，我们可以在一个函数内部定义另一个函数，从而形成一个嵌套的作用域链。内部函数可以访问其外部函数的变量和参数，但外部函数不能访问其内部函数的变量。\n3. **与动态作用域的区别**：词法作用域与动态作用域是两种不同的作用域规则。在动态作用域中，作用域是由函数如何被调用决定的，而不是代码的结构。JavaScript 使用的是词法作用域，而不是动态作用域。\n4. **闭包**：闭包是词法作用域和函数的强大组合。当函数能够记住并访问其词法作用域，即使当该函数在其原始词法作用域之外执行时，我们就称之为闭包。\n5. **性能考虑**：由于词法作用域是在编译时确定的，编译器可以对代码进行优化。知道哪些变量在哪里被访问，以及它们如何被访问，可以帮助编译器提高代码的执行效率。\n- JS => Lexical scoping which is defined by the placement of functions and blocks in the code\n- [JavaScript 深入之词法作用域和动态作用域](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3 https://github.com/mqyqingfeng/Blog/issues/3)\n## 作用域链（Scope Chain）\n- Identifier Lookup 标识符查找\n\t - **当代码执行过程中访问一个变量或函数时，JavaScript 引擎会沿着作用域链查找该标识符**。作用域链是由当前执行上下文的作用域和其所有父级作用域组成的链表。\n\t - 查找过程从当前作用域开始，然后逐级向上查找，直到找到目标标识符或到达全局作用域。如果在全局作用域中仍未找到目标标识符，则返回`undefined`。\n  - 特点：\n\t  - Child scope can access variables in its parent scope\n\t  - identifiers in a parent context cannot be referenced if an identifier in the local context has the same name,\n- Scope Chain Augmentation 作用域链增强\n  - The catch block in a try-catch statement\n  - A `with` statement\n- [JavaScript 深入之作用域链](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6 https://github.com/mqyqingfeng/Blog/issues/6)\n## 执行上下文（Execution Context）\n> [理解 JavaScript 中的执行上下文和执行栈](https://juejin.cn/post/6844903682283143181 https://juejin.cn/post/6844903682283143181) >[理解 JavaScript 的执行上下文](https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F72959191 https://zhuanlan.zhihu.com/p/72959191) >[JavaScript 进阶-执行上下文](https://juejin.cn/post/6844903983438381069 https://juejin.cn/post/6844903983438381069) >[JavaScript 深入之执行上下文栈](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F4 https://github.com/mqyqingfeng/Blog/issues/4) >[一道 js 面试题引发的思考 · Issue #18 · kuitos/kuitos.github.io · GitHub](https://github.com/kuitos/kuitos.github.io/issues/18)\n\n**执行上下文是 JavaScript 代码执行过程中的环境**。每当进入一个新的函数执行或全局代码执行时，都会创建一个新的执行上下文。执行上下文包含了当前执行的代码所需的所有信息，如变量、函数、作用域链等。  \n JavaScript 引擎使用执行上下文栈（Execution Context Stack）来管理执行上下文。栈顶的执行上下文为当前执行的代码环境。当一个函数被调用时，一个新的执行上下文被压入栈顶；当函数执行结束时，执行上下文从栈顶弹出，返回到调用者的上下文环境。\n- context\n- Each execution context has an associated variable object upon which all of its defined variables and functions exist.\n- Refers to the environment where a certain variable is declared;  \nJavascript 代码都是在 **执行上下文** 中运行的  \n执行上下文： 指当前执行环境中的变量、函数声明、作用域链 [Scope-作用域](Scope-作用域)、this 等信息\n\n#### 全局、函数、Eval 执行上下文\n执行上下文分为 `全局、函数、Eval执行上下文`\n1. 全局执行上下文（浏览器环境下，为全局的 `window` 对象）\n2. 函数执行上下文，每当一个函数被调用时, 都会为该函数创建一个新的上下文\n3. 🟨Eval 函数执行上下文，如 eval(1 + 2)  \n   对于每个执行上下文，都有三个重要属性：变量对象、作用域链 ([Scope-作用域](Scope-作用域) chain)、this`\n\n#### 变量对象\n变量对象是与执行上下文相关的数据作用域，存储了上下文中定义的变量和函数声明  \n变量对象是一个抽象的概念，在全局执行上下文中，变量对象就是全局对象。\n\n### 执行上下文的特点\n\n1. 单线程，只在主线程上运行；\n2. 同步执行，从上向下按顺序执行；\n3. 全局上下文只有一个，也就是 `window` 对象；\n4. 函数每调用一次就会产生一个新的执行上下文环境。\n\n### 执行上下文生命周期\n\n#### 创建阶段\n\n生成变量对象、建立作用域链 [Scope-作用域](Scope-作用域)、确定 this 的指向\n\n#### 执行阶段\n\n变量赋值、函数的引用、执行其他代码  \n![执行上下文.jpg](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f02e41f0bff3498990d04b7c90215a1f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"context-and-scope-执行上下文与作用域",text:"Context and Scope-执行上下文与作用域#"},{depth:2,slug:"作用域-scope",text:"作用域 (Scope)#"},{depth:3,slug:"全局作用域",text:"全局作用域#"},{depth:3,slug:"局部函数作用域",text:"局部/函数作用域#"},{depth:3,slug:"块级作用域",text:"块级作用域#"},{depth:3,slug:"词法作用域的理解",text:"词法作用域的理解#"},{depth:2,slug:"作用域链scope-chain",text:"作用域链（Scope Chain）#"},{depth:2,slug:"执行上下文execution-context",text:"执行上下文（Execution Context）#"},{depth:4,slug:"全局函数eval-执行上下文",text:"全局、函数、Eval 执行上下文#"},{depth:4,slug:"变量对象",text:"变量对象#"},{depth:3,slug:"执行上下文的特点",text:"执行上下文的特点#"},{depth:3,slug:"执行上下文生命周期",text:"执行上下文生命周期#"},{depth:4,slug:"创建阶段",text:"创建阶段#"},{depth:4,slug:"执行阶段",text:"执行阶段#"}]}const Content=createComponent(((n,t,e)=>{const{layout:a,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};