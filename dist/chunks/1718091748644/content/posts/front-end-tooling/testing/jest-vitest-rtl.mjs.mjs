import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="jest-vitest-rtl">Jest, Vitest, RTL<a class="anchor" href="#jest-vitest-rtl"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="jest-or-vitest">Jest or Vitest<a class="anchor" href="#jest-or-vitest"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<blockquote>\n<p>test runner</p>\n</blockquote>\n<ul>\n<li><a href="https://jestjs.io/docs/getting-started">Getting Started · Jest</a></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// Test suite</span></span>\n<span class="line"><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'true is truthy and false is falsy\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">  // Test case</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'true is truthy\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t  // Assertion</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">toBe</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'false is falsy\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">toBe</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">  });</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<p>Powerful features, like <em>mocking</em> modules so you can have more control over how the code executes, to make sure your unit testing is standalone.\nA JS test runner that lets you access an artificial DOM called jsdom. While jsdom is an approximation of how the browser works, it’s often good enough for testing React component.</p>\n<h3 id="test-coverage--report">❓Test Coverage &#x26; Report<a class="anchor" href="#test-coverage--report"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#9ECBFF">"test:cover"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"istanbul cover -x *.test.js _mocha -- -R spec --require tests/config/setup \'tests/**/*.test.js\'"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#9ECBFF">"test:report"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"cat ./coverage/lcov.info | codecov &#x26;&#x26; rm -rf ./coverage"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"></span></code></pre>\n<h2 id="rtl"><a href="rtl-react-testing-library.md">RTL</a><a class="anchor" href="#rtl"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h2 id="jest--rtl">Jest + RTL<a class="anchor" href="#jest--rtl"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://www.robinwieruch.de/react-testing-jest/">How to test React with Jest</a></li>\n<li>Tutorials\n<ul>\n<li><a href="https://www.youtube.com/watch?v=ML5egqL3YFE">React Testing Tutorial (Jest + React Testing Library) (youtube.com)</a></li>\n</ul>\n</li>\n</ul>\n<h3 id="install">Install<a class="anchor" href="#install"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>npm i -D jest @testing-library/react react-test-renderer @testing-library/user-event</code><br>\nreact-test-renderer utility library commonly used for Jest to render your actual component in your tests</p>\n<h3 id="script-in-packagejson">Script in package.json<a class="anchor" href="#script-in-packagejson"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>"test": "jest --config ./jest.config.json"</code><br>\n<code>"test:watch": "npm run test --watch"</code><br>\ncan have your tests running continuously in one command line tab. Every time you change source code while developing your application, your tests will run again with this watch script.</p>\n<h3 id="jestconfigjson">jest.config.json<a class="anchor" href="#jestconfigjson"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#79B8FF">  "testRegex"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"((</span><span style="color:#79B8FF">\\\\</span><span style="color:#9ECBFF">.|/*.)(spec))</span><span style="color:#79B8FF">\\\\</span><span style="color:#9ECBFF">.js?$"</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<p>In this case, the files will have the name <code>*spec.js</code>. That’s how you can separate them clearly from other files in your <em>src/</em> folder</p>\n<h3 id="snapshot-testing">Snapshot testing<a class="anchor" href="#snapshot-testing"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><a href="https://jestjs.io/docs/snapshot-testing">Snapshot Testing · Jest</a><br>\nto make sure your UI does not change unexpectedly.<br>\n Instead of rendering the graphical UI, which would require building the entire app, you can use a <strong>test renderer</strong> to quickly generate a serializable value for your React tree</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> renderer </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'react-test-renderer\'</span><span style="color:#E1E4E8">;  </span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> Link </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'../Link\'</span><span style="color:#E1E4E8">;  </span></span>\n<span class="line"><span style="color:#B392F0">it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">\'renders correctly\'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {  </span></span>\n<span class="line"><span style="color:#F97583">\tconst</span><span style="color:#79B8FF"> tree</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> renderer  </span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">create</span><span style="color:#E1E4E8">(&#x3C;</span><span style="color:#79B8FF">Link</span><span style="color:#B392F0"> page</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"http://www.facebook.com"</span><span style="color:#E1E4E8">>Facebook&#x3C;/</span><span style="color:#79B8FF">Link</span><span style="color:#E1E4E8">>)  </span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">toJSON</span><span style="color:#E1E4E8">();  </span></span>\n<span class="line"><span style="color:#B392F0">\texpect</span><span style="color:#E1E4E8">(tree).</span><span style="color:#B392F0">toMatchSnapshot</span><span style="color:#E1E4E8">();  </span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<p>either accepting the new snapshot or fixing your React component<br>\n<code>jest --updateSnapshot</code></p>\n<h3 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>⭐<a href="https://www.robinwieruch.de/react-testing-library/">React Testing Library Tutorial</a><br>\n<a href="https://github.com/jestjs/jest/blob/main/examples/react-testing-library/__tests__/CheckboxWithLabel-test.js">jest/examples/react-testing-library/__tests__/CheckboxWithLabel-test.js at main · jestjs/jest · GitHub</a><br>\n<a href="https://jestjs.io/docs/tutorial-react">Testing React Apps · Jest</a><br>\n<a href="https://www.freecodecamp.org/news/write-unit-tests-using-react-testing-library/">React Testing Library Tutorial – How to Write Unit Tests for React Apps</a><br>\n<a href="https://blog.logrocket.com/testing-react-apps-jest-react-testing-library/">React app testing: Jest and React Testing Library - LogRocket Blog</a><br>\n<a href="https://www.freecodecamp.org/news/write-unit-tests-using-react-testing-library/">React Testing Library Tutorial – How to Write Unit Tests for React Apps</a></p>\n<h2 id="vitest--rtl">Vitest + RTL<a class="anchor" href="#vitest--rtl"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="https://www.robinwieruch.de/vitest-react-testing-library/">Vitest with React Testing Library</a><br>\n<a href="https://github.com/vitest-dev/vitest/blob/main/examples/react/test/basic.test.tsx">vitest/examples/react/test/basic.test.tsx at main · vitest-dev/vitest · GitHub</a></p>\n<h3 id="install-1">Install<a class="anchor" href="#install-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>npm i -D vitest jsdom @testing-library/react @testing-library/jest-dom @testing-library/user-event</code></p>\n<h3 id="script-in-packagejson-1">Script in package.json<a class="anchor" href="#script-in-packagejson-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p><code>"test": "vitest --watch"</code></p>\n<h3 id="add-a-test-setup-file-in-testssetupjs">Add a test setup file in tests/setup.js<a class="anchor" href="#add-a-test-setup-file-in-testssetupjs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { expect, afterEach } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'vitest\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { cleanup } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@testing-library/react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#79B8FF"> *</span><span style="color:#F97583"> as</span><span style="color:#E1E4E8"> matchers </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "@testing-library/jest-dom/matchers"</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">expect.</span><span style="color:#B392F0">extend</span><span style="color:#E1E4E8">(matchers);</span></span>\n<span class="line"><span style="color:#B392F0">afterEach</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">  cleanup</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="vite-config-file">vite config file<a class="anchor" href="#vite-config-file"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { defineConfig } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'vite\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> react </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> \'@vitejs/plugin-react\'</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">// https://vitejs.dev/config/</span></span>\n<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#B392F0"> defineConfig</span><span style="color:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#E1E4E8">  plugins: [</span><span style="color:#B392F0">react</span><span style="color:#E1E4E8">()],</span></span>\n<span class="line"><span style="color:#E1E4E8">  test: {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t globals: </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">, </span><span style="color:#6A737D">//make all imports from Vitest global, so that you don\'t need to perform these imports (e.g. `expect`) in each file manually</span></span>\n<span class="line"><span style="color:#E1E4E8">    environment: </span><span style="color:#9ECBFF">\'jsdom\'</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">    setupFiles: </span><span style="color:#9ECBFF">\'./tests/setup.js\'</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#E1E4E8">  },</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h2 id="test-redux">Test redux<a class="anchor" href="#test-redux"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="https://www.robinwieruch.de/react-connected-component-test/">How to test React-Redux connected Components</a><br>\n<code>redux-mock-store</code></p>\n<h2 id="test-styled-component">Test styled-component<a class="anchor" href="#test-styled-component"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p><a href="https://github.com/styled-components/jest-styled-components">GitHub - styled-components/jest-styled-components: 🔧 💅 Jest utilities for Styled Components</a></p>',frontmatter={aliases:["Jest, Vitest, RTL "],title:"Jest, Vitest, RTL ",topic:null,type:"D",tags:["Testing"],category:"Front-End Tooling",DateStarted:"2024-05-05T00:00:00.000Z",DateModified:"2024-06-11T00:00:00.000Z",Datereviewed:null,reviewed:null,difficulty:null,status:null,comment:null,draft:!0,"linter-yaml-title-alias":"Jest, Vitest, RTL ",minutes:2,words:451},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/front-end-tooling/testing/jest-vitest-rtl.md",url=void 0;function rawContent(){return"# Jest, Vitest, RTL \n## Jest or Vitest\n>test runner\n- [Getting Started · Jest](https://jestjs.io/docs/getting-started)\n\n```js\n// Test suite\ndescribe('true is truthy and false is falsy', () => {\n  // Test case\n  it('true is truthy', () => {\n\t  // Assertion\n    expect(true).toBe(true);\n  });\n  it('false is falsy', () => {\n    expect(false).toBe(false);\n  });\n});\n```\n\n\nPowerful features, like _mocking_ modules so you can have more control over how the code executes, to make sure your unit testing is standalone.\nA JS test runner that lets you access an artificial DOM called jsdom. While jsdom is an approximation of how the browser works, it's often good enough for testing React component.\n### ❓Test Coverage & Report\n```json\n\"test:cover\": \"istanbul cover -x *.test.js _mocha -- -R spec --require tests/config/setup 'tests/**/*.test.js'\",\n\"test:report\": \"cat ./coverage/lcov.info | codecov && rm -rf ./coverage\",\n```\n## [RTL](rtl-react-testing-library.md)\n## Jest + RTL\n- [How to test React with Jest](https://www.robinwieruch.de/react-testing-jest/)\n- Tutorials\n  - [React Testing Tutorial (Jest + React Testing Library) (youtube.com)](https://www.youtube.com/watch?v=ML5egqL3YFE)\n### Install\n`npm i -D jest @testing-library/react react-test-renderer @testing-library/user-event`  \nreact-test-renderer utility library commonly used for Jest to render your actual component in your tests\n### Script in package.json\n`\"test\": \"jest --config ./jest.config.json\"`  \n`\"test:watch\": \"npm run test --watch\"`  \ncan have your tests running continuously in one command line tab. Every time you change source code while developing your application, your tests will run again with this watch script.\n### jest.config.json\n\n```json\n{\n  \"testRegex\": \"((\\\\.|/*.)(spec))\\\\.js?$\"\n}\n```\n\nIn this case, the files will have the name `*spec.js`. That's how you can separate them clearly from other files in your _src/_ folder\n### Snapshot testing\n[Snapshot Testing · Jest](https://jestjs.io/docs/snapshot-testing)  \nto make sure your UI does not change unexpectedly.  \n Instead of rendering the graphical UI, which would require building the entire app, you can use a **test renderer** to quickly generate a serializable value for your React tree\n\n```js\nimport renderer from 'react-test-renderer';  \nimport Link from '../Link';  \nit('renders correctly', () => {  \n\tconst tree = renderer  \n\t.create(<Link page=\"http://www.facebook.com\">Facebook</Link>)  \n\t.toJSON();  \n\texpect(tree).toMatchSnapshot();  \n});\n```\n\neither accepting the new snapshot or fixing your React component  \n`jest --updateSnapshot`\n### Reference\n⭐[React Testing Library Tutorial](https://www.robinwieruch.de/react-testing-library/)  \n[jest/examples/react-testing-library/\\_\\_tests\\_\\_/CheckboxWithLabel-test.js at main · jestjs/jest · GitHub](https://github.com/jestjs/jest/blob/main/examples/react-testing-library/__tests__/CheckboxWithLabel-test.js)  \n[Testing React Apps · Jest](https://jestjs.io/docs/tutorial-react)  \n[React Testing Library Tutorial – How to Write Unit Tests for React Apps](https://www.freecodecamp.org/news/write-unit-tests-using-react-testing-library/)  \n[React app testing: Jest and React Testing Library - LogRocket Blog](https://blog.logrocket.com/testing-react-apps-jest-react-testing-library/)  \n[React Testing Library Tutorial – How to Write Unit Tests for React Apps](https://www.freecodecamp.org/news/write-unit-tests-using-react-testing-library/)\n## Vitest + RTL\n[Vitest with React Testing Library](https://www.robinwieruch.de/vitest-react-testing-library/)  \n[vitest/examples/react/test/basic.test.tsx at main · vitest-dev/vitest · GitHub](https://github.com/vitest-dev/vitest/blob/main/examples/react/test/basic.test.tsx)\n### Install\n`npm i -D vitest jsdom @testing-library/react @testing-library/jest-dom @testing-library/user-event`\n### Script in package.json\n`\"test\": \"vitest --watch\"`\n### Add a test setup file in tests/setup.js\n\n```js\nimport { expect, afterEach } from 'vitest';\nimport { cleanup } from '@testing-library/react';\nimport * as matchers from \"@testing-library/jest-dom/matchers\";\nexpect.extend(matchers);\nafterEach(() => {\n  cleanup();\n});\n```\n\n### vite config file\n\n```js\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n\t globals: true, //make all imports from Vitest global, so that you don't need to perform these imports (e.g. `expect`) in each file manually\n    environment: 'jsdom',\n    setupFiles: './tests/setup.js',\n  },\n});\n```\n\n## Test redux\n[How to test React-Redux connected Components](https://www.robinwieruch.de/react-connected-component-test/)  \n`redux-mock-store`\n## Test styled-component \n[GitHub - styled-components/jest-styled-components: 🔧 💅 Jest utilities for Styled Components](https://github.com/styled-components/jest-styled-components)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"jest-vitest-rtl",text:"Jest, Vitest, RTL#"},{depth:2,slug:"jest-or-vitest",text:"Jest or Vitest#"},{depth:3,slug:"test-coverage--report",text:"❓Test Coverage & Report#"},{depth:2,slug:"rtl",text:"RTL#"},{depth:2,slug:"jest--rtl",text:"Jest + RTL#"},{depth:3,slug:"install",text:"Install#"},{depth:3,slug:"script-in-packagejson",text:"Script in package.json#"},{depth:3,slug:"jestconfigjson",text:"jest.config.json#"},{depth:3,slug:"snapshot-testing",text:"Snapshot testing#"},{depth:3,slug:"reference",text:"Reference#"},{depth:2,slug:"vitest--rtl",text:"Vitest + RTL#"},{depth:3,slug:"install-1",text:"Install#"},{depth:3,slug:"script-in-packagejson-1",text:"Script in package.json#"},{depth:3,slug:"add-a-test-setup-file-in-testssetupjs",text:"Add a test setup file in tests/setup.js#"},{depth:3,slug:"vite-config-file",text:"vite config file#"},{depth:2,slug:"test-redux",text:"Test redux#"},{depth:2,slug:"test-styled-component",text:"Test styled-component#"}]}const Content=createComponent(((s,e,t)=>{const{layout:n,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};