import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="network-protocols">Network Protocols<a class="anchor" href="#network-protocols"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Protocol">Protocol - MDN Web Docs Glossary: Definitions of Web-related terms | MDN</a></li>\n<li>[[private/p-network/S-Network]]</li>\n</ul>\n<h2 id="osi-的七层模型">OSI 的七层模型：<a class="anchor" href="#osi-的七层模型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>✅<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjawil%2Fblog%2Fissues%2F14" title="https://github.com/jawil/blog/issues/14">通俗大白话来理解 TCP 协议的三次握手和四次分手</a><br>\n在 <strong>TCP/IP 协议栈</strong>里，后三层可以并为一层，如底层的 ARP 协议、中间的 TCP/UDP 协议，以及高层的 HTTP 协议。<br>\n在<strong>ISO/OSI</strong>七层模型中，每一层的作用和对应的协议如下：<br>\n<a href="https://camo.githubusercontent.com/b5edc916eebc7117d31a8f47d194def70e8e3fe3269f7a92647da93b35ca3bbe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d323062333132323731313732616364632e6769663f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/b5edc916eebc7117d31a8f47d194def70e8e3fe3269f7a92647da93b35ca3bbe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d323062333132323731313732616364632e6769663f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt=""></a><br>\n<a href="https://camo.githubusercontent.com/3568ca73ef69fb3fbccf7f03867933c98b4ec3c99721261389faba43ca56c928/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d313235396366326233646635333766342e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/3568ca73ef69fb3fbccf7f03867933c98b4ec3c99721261389faba43ca56c928/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d313235396366326233646635333766342e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt=""></a><br>\n每个 <strong>数据</strong> 都会经过数据的封装和解封装的过程。<br>\n第七层——应用层，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。([[web-fundamentals/web-protocol/http|HTTP]])<br>\n第四层——Transport 层，数据叫 Segment。([[web-fundamentals/web-protocol/tcp-protocol|TCP]], UDP)</p>\n<ul>\n<li>传输层（包含连接保持机制）<br>\n第三层——Network 层，数据叫 Packet ([[ip-protocol|IP]], ICMP)</li>\n<li>网络层（包含路由机制）<br>\n第二层——Data Link 层，数据叫 Frame (ARP, RARP)</li>\n<li>数据链路层（包含错误重发机制）</li>\n</ul>\n<h3 id="protocol">Protocol<a class="anchor" href="#protocol"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>Rules for interactions between two parties</li>\n</ul>\n<h3 id="network-protocol">Network protocol<a class="anchor" href="#network-protocol"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>the type of messages that are going to be sent over the network</li>\n<li>format, structure and order of those messages</li>\n<li>whether or not there should be some sort of response, and what the response should look like</li>\n<li>whether or not there should be rules around when messages can be sent to one another</li>\n</ul>\n<h2 id="socketsocket">[[socket|Socket]]<a class="anchor" href="#socketsocket"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>',frontmatter={category:"Network",title:"Network Protocols",type:"D",topic:null,Datereviewed:null,reviewed:null,difficulty:null,comment:null,tags:["Network"],DateStarted:"2023-03-06T00:00:00.000Z",DateModified:"2024-04-18T00:00:00.000Z",status:null,"linter-yaml-title-alias":"Network Protocols",aliases:["Network Protocols"],minutes:1,words:284},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/network/web-protocol/network-protocols-网络协议.md",url=void 0;function rawContent(){return'\n# Network Protocols\n\n## Reference\n\n- [Protocol - MDN Web Docs Glossary: Definitions of Web-related terms | MDN](https://developer.mozilla.org/en-US/docs/Glossary/Protocol)\n- [[private/p-network/S-Network]]\n\n## OSI 的七层模型：\n\n✅[通俗大白话来理解 TCP 协议的三次握手和四次分手](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjawil%2Fblog%2Fissues%2F14 "https://github.com/jawil/blog/issues/14")  \n在 **TCP/IP 协议栈**里，后三层可以并为一层，如底层的 ARP 协议、中间的 TCP/UDP 协议，以及高层的 HTTP 协议。  \n在**ISO/OSI**七层模型中，每一层的作用和对应的协议如下：  \n[![](https://camo.githubusercontent.com/b5edc916eebc7117d31a8f47d194def70e8e3fe3269f7a92647da93b35ca3bbe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d323062333132323731313732616364632e6769663f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)](https://camo.githubusercontent.com/b5edc916eebc7117d31a8f47d194def70e8e3fe3269f7a92647da93b35ca3bbe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d323062333132323731313732616364632e6769663f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)  \n[![](https://camo.githubusercontent.com/3568ca73ef69fb3fbccf7f03867933c98b4ec3c99721261389faba43ca56c928/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d313235396366326233646635333766342e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)](https://camo.githubusercontent.com/3568ca73ef69fb3fbccf7f03867933c98b4ec3c99721261389faba43ca56c928/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323434383735322d313235396366326233646635333766342e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)  \n每个 **数据** 都会经过数据的封装和解封装的过程。  \n第七层——应用层，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。([[web-fundamentals/web-protocol/http|HTTP]])  \n第四层——Transport 层，数据叫 Segment。([[web-fundamentals/web-protocol/tcp-protocol|TCP]], UDP)\n\n- 传输层（包含连接保持机制）  \n  第三层——Network 层，数据叫 Packet ([[ip-protocol|IP]], ICMP)\n- 网络层（包含路由机制）  \n  第二层——Data Link 层，数据叫 Frame (ARP, RARP)\n- 数据链路层（包含错误重发机制）\n\n### Protocol\n\n- Rules for interactions between two parties\n\n### Network protocol\n\n- the type of messages that are going to be sent over the network\n- format, structure and order of those messages\n- whether or not there should be some sort of response, and what the response should look like\n- whether or not there should be rules around when messages can be sent to one another\n\n## [[socket|Socket]]\n'}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"network-protocols",text:"Network Protocols#"},{depth:2,slug:"reference",text:"Reference#"},{depth:2,slug:"osi-的七层模型",text:"OSI 的七层模型：#"},{depth:3,slug:"protocol",text:"Protocol#"},{depth:3,slug:"network-protocol",text:"Network protocol#"},{depth:2,slug:"socketsocket",text:"[[socket|Socket]]#"}]}const Content=createComponent(((e,o,t)=>{const{layout:n,...r}=frontmatter;return r.file=file,r.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};